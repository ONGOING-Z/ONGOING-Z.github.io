<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on ongoing's blog</title><link>https://ongoingblog.org/categories/c/</link><description>Recent content in C on ongoing's blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 01 Oct 2020 11:02:57 +0800</lastBuildDate><atom:link href="https://ongoingblog.org/categories/c/index.xml" rel="self" type="application/rss+xml"/><item><title>《C and pointer》阅读笔记</title><link>https://ongoingblog.org/2020/10/c-and-pointer-reading-notes/</link><pubDate>Thu, 01 Oct 2020 11:02:57 +0800</pubDate><guid>https://ongoingblog.org/2020/10/c-and-pointer-reading-notes/</guid><description>&lt;p&gt;关于《C 和指针》这本书的读书记录。&lt;/p&gt;
&lt;h3 id="c-和指针"&gt;《C 和指针》&lt;/h3&gt;
&lt;h4 id="1th-快速上手"&gt;1th 快速上手&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数组名&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr[&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假设&lt;code&gt;int&lt;/code&gt;型变量占 4 Byte，那么这个声明，编译器会给 c 预留内存空间 4×4 Byte，并且
数组名代表着指向数组第一个元素的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串常量存储在常量区，常量区存储的内容是不能被修改的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针指定一个存储与计算机内存中的值的地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个 C 程序必须有一个 main 函数，因为它是程序执行的起点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 C 语言中，数组参数是以&lt;code&gt;引用(reference)&lt;/code&gt;形式进行传递的，即传址调用，
而标量和常量是按&lt;code&gt;值(value)&lt;/code&gt;传递的。
在函数中对标量参数的任何修改都会在函数返回时丢失，因此，被调用函数无法修改
调用函数以传值形式传递给它的参数。
然而，当被调用函数修改数组参数的其中一个元素时，调用函数所传递的数组就会被实际地修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 C 语言中，字符串是一串以&lt;code&gt;NUL&lt;/code&gt;字节结尾的字符。&lt;code&gt;NUL&lt;/code&gt;是作为字符串终止符，它本身并不被看作是字符串的一部分。字符串常量就是源程序中被&lt;code&gt;双引号&lt;/code&gt;括起来的一串字符。例如，&lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;在内存中占据 6 个字节的空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于 scanf 函数的实现原理，所有标量参数的前面必须加上一个&lt;code&gt;&amp;amp;&lt;/code&gt;符号。数组参数前面不需要加上&lt;code&gt;&amp;amp;&lt;/code&gt;符号，但是若数组参数中出现下标引用，即实际参数是数组某个特定元素，那么它的前面也必须加上&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编程提示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 while 和 if 表达式中蕴含赋值操作&lt;/li&gt;
&lt;li&gt;始终要进行检查，确保数组不越界&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="3th-数据"&gt;3th 数据&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 C 语言中，仅有 4 中基本数据类型 &amp;ndash;
整型、浮点型、指针和聚合类型（如数组和结构等).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针可以有效地实现如 tree 和 list 这类高级数据结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;房子和它的门牌号码标识&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以把计算机内存想象成一条长街上的一间间房子，每间房子都用一个唯一的号码进行标识。每个位置包含一个值，这和它的地址是独立且显著不同的，即使它们都是数字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序在使用字符串常量会生成一个“指向字符的常量指针”。当一个字符串常量出现于一个表达式中时，表达式所使用的值就是这些字符所存储的地址，而不是这些字符本身。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不能把字符串常量赋值给一个字符数组，因为字符串常量的直接值是一个指针，而不是这些字符本身。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;typedef 允许你为各种数据类型定义新名字。
&lt;code&gt;typedef int another_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用typedef声明类型可以减少使声明变得又臭又长的危险，尤其是那些复杂的声明。&lt;/p&gt;</description></item><item><title>C 语言的一些基础知识 02</title><link>https://ongoingblog.org/2020/10/c-basic-part-2/</link><pubDate>Thu, 01 Oct 2020 10:53:05 +0800</pubDate><guid>https://ongoingblog.org/2020/10/c-basic-part-2/</guid><description>&lt;p&gt;新增一些关于 C 和 C++ 的基础知识。&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数组初始化符号&lt;code&gt;{}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get array length(C)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr[];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; length &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(arr)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(arr[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]); &lt;span style="color:#75715e"&gt;// 总字节数/第一个元素字节数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;define&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#define 名字 替换文本&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;（1）符号常量通常用大写字母拼写
（2）末尾无分号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C 中常量 INT_MAX 和 INT_MIN 分别表示最大、最小整数，定义在头文件 limits.h 中。INT_MAX = 2^31-1，INT_MIN= -2^31&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑移位&lt;/p&gt;
&lt;p&gt;逻辑移位 = (1) 逻辑左移 (2) 逻辑右移; 移出的空位都用 0 来补。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nullptr&lt;/p&gt;
&lt;p&gt;其指 c++ 中的空指针常量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c++ delete&lt;/p&gt;
&lt;p&gt;假设 ptr 是一个指针，delete ptr 代表释放内存，只用来释放 ptr 指向的内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to_string()&lt;/p&gt;
&lt;p&gt;将数值转换为字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for 循环遍历字符串的一种新方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;better&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; c &lt;span style="color:#f92672"&gt;=&lt;/span&gt; str)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; printf(&lt;span style="color:#e6db74"&gt;&amp;#34;%c&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, c);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c++ auto (since C++ 11)(谨慎使用)&lt;/p&gt;</description></item><item><title>C 语言的一些基础知识</title><link>https://ongoingblog.org/2020/04/some-basic-knowledge-of-cc-/</link><pubDate>Sat, 04 Apr 2020 15:18:31 +0800</pubDate><guid>https://ongoingblog.org/2020/04/some-basic-knowledge-of-cc-/</guid><description>&lt;hr&gt;
&lt;h3 id="一些细节"&gt;一些细节&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;linux 下编译运行 c++ 程序&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;g&lt;span style="color:#f92672"&gt;++&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;W file_name.cpp &lt;span style="color:#f92672"&gt;-&lt;/span&gt;o another_name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#f92672"&gt;/&lt;/span&gt;file_name
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-W&lt;/code&gt; = 输入错误信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符数组的输入输出&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scanf&lt;/code&gt;输入，&lt;code&gt;printf&lt;/code&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; str[&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; scanf(&lt;span style="color:#e6db74"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, str);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; printf(&lt;span style="color:#e6db74"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, str);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：&lt;code&gt;%s&lt;/code&gt;识别&lt;code&gt;空格&lt;/code&gt;作为字符串的结尾；&lt;code&gt;scanf&lt;/code&gt;在使用&lt;code&gt;%s&lt;/code&gt;时，对应数组名是不需要加&lt;code&gt;&amp;amp;&lt;/code&gt;运算符的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组初始化符号&lt;code&gt;{}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ascii&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A = 65; a: 97&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构体的初始化&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;scanf(&lt;span style="color:#e6db74"&gt;&amp;#34;%d %c %d&amp;#34;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;a, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;data, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;b);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;node[a] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {data, b, false}; &lt;span style="color:#75715e"&gt;// 注意时花括号，和数组初始化一样。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高位补 0 与高位补空&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;printf(&lt;span style="color:#e6db74"&gt;&amp;#34;%05d&amp;#34;&lt;/span&gt;, i); &lt;span style="color:#75715e"&gt;// 使不足5位的整数的高位补0。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;printf(&lt;span style="color:#e6db74"&gt;&amp;#34;%5d&amp;#34;&lt;/span&gt;, i); &lt;span style="color:#75715e"&gt;// 使不足5位的整数的高位补为空。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;scanf()&lt;/code&gt;使用&lt;code&gt;%c&lt;/code&gt;可以读入&lt;code&gt;空格&lt;/code&gt;，要注意格式！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;scanf(&lt;span style="color:#e6db74"&gt;&amp;#34;%d %c&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 new 运算符为链表结点分配内存空间&lt;/p&gt;
&lt;p&gt;使用方法：&lt;code&gt;typename *p = new typename;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例子如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;node &lt;span style="color:#f92672"&gt;*&lt;/span&gt;p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; node;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; arr[&lt;span style="color:#ae81ff"&gt;10000&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;memset&lt;/code&gt;对数组中每一个元素赋相同的值&lt;/p&gt;</description></item></channel></rss>