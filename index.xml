<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ongoing's blog</title><link>https://ongoingblog.org/</link><description>Recent content on ongoing's blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 24 Oct 2025 13:16:05 +0800</lastBuildDate><atom:link href="https://ongoingblog.org/index.xml" rel="self" type="application/rss+xml"/><item><title>rocketmq: broker store</title><link>https://ongoingblog.org/2025/10/broker-store/</link><pubDate>Fri, 24 Oct 2025 13:16:05 +0800</pubDate><guid>https://ongoingblog.org/2025/10/broker-store/</guid><description>&lt;h3 id="一broker-收取消息流程"&gt;一、broker 收取消息流程&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/10/broker-store/mq-broker_store.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/10/broker-store/mq-broker_store.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;

&lt;h3 id="二messagestore-存储消息流程"&gt;二、MessageStore 存储消息流程&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/10/broker-store/mq-MessageStore.png"
 data-pswp-width="990"
 data-pswp-height="316"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/10/broker-store/mq-MessageStore.png"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>rocketmq: producer send</title><link>https://ongoingblog.org/2025/10/rmq-producer-send/</link><pubDate>Wed, 22 Oct 2025 21:50:45 +0800</pubDate><guid>https://ongoingblog.org/2025/10/rmq-producer-send/</guid><description>&lt;h3 id="一producer-send"&gt;一、producer send&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/10/rmq-producer-send/mq-producer_send.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/10/rmq-producer-send/mq-producer_send.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;

&lt;h3 id="二底层通信"&gt;二、底层通信&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/10/rmq-producer-send/mq-underlying_communcation.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/10/rmq-producer-send/mq-underlying_communcation.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>rocketmq: pull message and consume</title><link>https://ongoingblog.org/2025/10/pulling-and-consuming-messages/</link><pubDate>Wed, 22 Oct 2025 14:47:34 +0800</pubDate><guid>https://ongoingblog.org/2025/10/pulling-and-consuming-messages/</guid><description>&lt;p&gt;这里展示 rmq 拉取及消费消息时的主要流程：&lt;/p&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/10/pulling-and-consuming-messages/mq-pulling_consuming_msg.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/10/pulling-and-consuming-messages/mq-pulling_consuming_msg.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>Git worktree</title><link>https://ongoingblog.org/2025/10/git-worktree/</link><pubDate>Sat, 18 Oct 2025 16:24:34 +0800</pubDate><guid>https://ongoingblog.org/2025/10/git-worktree/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;之前我在看 spring 源码时，选择了一个分支，5.3.x 分支，之后有时我想要去看下最新版的源码。&lt;/p&gt;
&lt;p&gt;因为源码总是需要编译成功之后，在 idea 中才支持跳转，让你可以顺利的阅览。所以比如我想要去阅读 6.1 分支的代码，步骤就是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;checkout branch 6.1
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;compile 源码
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是这种情况就会把我编译好的 5.3.x 的产物给清除掉。&lt;/p&gt;
&lt;p&gt;今天我遇到了一个工具叫作 git worktree。这个工具可以让你不需要去 checkout，就可以阅读到别的版本的代码。&lt;/p&gt;
&lt;h3 id="二原理"&gt;二、原理&lt;/h3&gt;
&lt;p&gt;我使用完毕之后，发现它就是会给你新建一个目录，在那个新建的目录中去编译，相当于不会来污染你当前的工作，下次你想要阅读时就打开那个目录就行了。&lt;/p&gt;
&lt;p&gt;注意：这些目录会共享同一个&lt;code&gt;.git&lt;/code&gt;目录，主目录是&lt;code&gt;.git&lt;/code&gt;存放的地方，其他目录都是对于这个目录的链接。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相对“切分支+stash”更安全，相对“多仓库 clone”更高效、更省空间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="三一些命令"&gt;三、一些命令&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 查看所有工作区&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git worktree list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>显示两个 commit (1 -&gt; 2) 变更文件的数量</title><link>https://ongoingblog.org/2025/10/show-the-number-of-changed-files-between-two-commits/</link><pubDate>Wed, 15 Oct 2025 09:39:54 +0800</pubDate><guid>https://ongoingblog.org/2025/10/show-the-number-of-changed-files-between-two-commits/</guid><description>&lt;p&gt;场景：需要统计一下 commit1 到 commit2 之间总共变更了多少个文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git diff --name-only commit1 commit2 | wc -l
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Mybatis 查询流程</title><link>https://ongoingblog.org/2025/10/mybatis-query/</link><pubDate>Tue, 07 Oct 2025 19:35:25 +0800</pubDate><guid>https://ongoingblog.org/2025/10/mybatis-query/</guid><description>&lt;h3 id="一缓存示意图"&gt;一、缓存示意图&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/10/mybatis-query/mybatis-level1_level2.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/10/mybatis-query/mybatis-level1_level2.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;

&lt;h3 id="二查询流程"&gt;二、查询流程&lt;/h3&gt;
&lt;p&gt;注意查询顺序：二级缓存 (namespace 级别) -&amp;gt; 一级缓存 (sqlSession 级别) -&amp;gt; 数据库&lt;/p&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/10/mybatis-query/mybatis-mybatis-query.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/10/mybatis-query/mybatis-mybatis-query.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>Spring Cache</title><link>https://ongoingblog.org/2025/09/spring-cache/</link><pubDate>Thu, 25 Sep 2025 11:02:16 +0800</pubDate><guid>https://ongoingblog.org/2025/09/spring-cache/</guid><description>&lt;h3 id="一缓存注解"&gt;一、缓存注解&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;注解&lt;/th&gt;
 &lt;th&gt;说明&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;@Cacheable&lt;/td&gt;
 &lt;td&gt;缓存查询结果，如果缓存存在则直接返回&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;@CachePut&lt;/td&gt;
 &lt;td&gt;更新缓存，无论缓存是否存在都会执行方法并更新缓存&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;@CacheEvict&lt;/td&gt;
 &lt;td&gt;清除缓存，可以清除单个或所有缓存条目&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="二主要流程"&gt;二、主要流程&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/09/spring-cache/spring_process-spring-cache-main-flow.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/09/spring-cache/spring_process-spring-cache-main-flow.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>Seata TCC 对象的触发</title><link>https://ongoingblog.org/2025/09/seata-tcc-object-invocation/</link><pubDate>Tue, 16 Sep 2025 13:48:02 +0800</pubDate><guid>https://ongoingblog.org/2025/09/seata-tcc-object-invocation/</guid><description>&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/09/seata-tcc-object-invocation/flow_seata-seata-tcc_object_invocation.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/09/seata-tcc-object-invocation/flow_seata-seata-tcc_object_invocation.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>Seata TCC 对象的创建</title><link>https://ongoingblog.org/2025/09/seata-tcc-object-creation/</link><pubDate>Tue, 16 Sep 2025 13:47:42 +0800</pubDate><guid>https://ongoingblog.org/2025/09/seata-tcc-object-creation/</guid><description>&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/09/seata-tcc-object-creation/flow_seata-seata-tcc_object_creation.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/09/seata-tcc-object-creation/flow_seata-seata-tcc_object_creation.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>Seata 分支事务注册的时机</title><link>https://ongoingblog.org/2025/09/the-timing-of-seata-branch-transaction-registration/</link><pubDate>Tue, 09 Sep 2025 15:02:45 +0800</pubDate><guid>https://ongoingblog.org/2025/09/the-timing-of-seata-branch-transaction-registration/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;我们在执行真正的 sql 语句时，seata 会拦截我们的操作，这里我们看下是如何拦截的，以及分支事务触发的时机。&lt;/p&gt;
&lt;h3 id="二流程"&gt;二、流程&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/09/the-timing-of-seata-branch-transaction-registration/flow_seata-seata_jdbctemplate.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/09/the-timing-of-seata-branch-transaction-registration/flow_seata-seata_jdbctemplate.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;

&lt;p&gt;这里可以查看下&lt;a href="https://ongoingblog.org/2025/09/jdbctemplate/"&gt;JdbcTemplate 对象的触发&lt;/a&gt;。&lt;/p&gt;</description></item><item><title>JdbcTemplate 对象的创建及触发</title><link>https://ongoingblog.org/2025/09/jdbctemplate/</link><pubDate>Tue, 09 Sep 2025 11:34:24 +0800</pubDate><guid>https://ongoingblog.org/2025/09/jdbctemplate/</guid><description>&lt;p&gt;JdbcTemplate 是 spring 框架中支持 sql 语句执行的组件，使用起来很方便。这里主要展示下 JdbcTemplate 对象的创建及触发流程。&lt;/p&gt;
&lt;h3 id="一对象的创建"&gt;一、对象的创建&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/09/jdbctemplate/spring_process-jdbctemplate_object_creation.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/09/jdbctemplate/spring_process-jdbctemplate_object_creation.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;

&lt;h3 id="二对象的触发"&gt;二、对象的触发&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/09/jdbctemplate/spring_process-jdbctemplate_object_invocation.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/09/jdbctemplate/spring_process-jdbctemplate_object_invocation.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>git commit message</title><link>https://ongoingblog.org/2025/09/git-commit-message/</link><pubDate>Thu, 04 Sep 2025 10:54:34 +0800</pubDate><guid>https://ongoingblog.org/2025/09/git-commit-message/</guid><description>&lt;p&gt;注重意图而非细节。&lt;/p&gt;
&lt;p&gt;写你提交的这些文件是要完成什么事情，而非琐碎的细节，变更本身就反映了这些事情，再在提交信息中重复一遍没有必要。&lt;/p&gt;</description></item><item><title>事务传播：required - nested</title><link>https://ongoingblog.org/2025/08/tx-required-nested/</link><pubDate>Thu, 28 Aug 2025 13:42:05 +0800</pubDate><guid>https://ongoingblog.org/2025/08/tx-required-nested/</guid><description>&lt;h3 id="一正常提交"&gt;一、正常提交&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/08/tx-required-nested/spring_process-tx-required-nested.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/08/tx-required-nested/spring_process-tx-required-nested.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;

&lt;h3 id="二异常回滚"&gt;二、异常回滚&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/08/tx-required-nested/spring_process-tx-required-nested_exception.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/08/tx-required-nested/spring_process-tx-required-nested_exception.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>事务传播：required - requiresnew</title><link>https://ongoingblog.org/2025/08/tx-required-requiresnew/</link><pubDate>Thu, 28 Aug 2025 13:41:58 +0800</pubDate><guid>https://ongoingblog.org/2025/08/tx-required-requiresnew/</guid><description>&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/08/tx-required-requiresnew/spring_process-tx-required-requires_new_exception.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/08/tx-required-requiresnew/spring_process-tx-required-requires_new_exception.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>事务传播：required - required</title><link>https://ongoingblog.org/2025/08/tx-required-required/</link><pubDate>Wed, 27 Aug 2025 23:48:47 +0800</pubDate><guid>https://ongoingblog.org/2025/08/tx-required-required/</guid><description>&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/08/tx-required-required/spring_process-tx-required-required_exception.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/08/tx-required-required/spring_process-tx-required-required_exception.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>本地消息表</title><link>https://ongoingblog.org/2025/08/local-message-table/</link><pubDate>Mon, 25 Aug 2025 16:19:46 +0800</pubDate><guid>https://ongoingblog.org/2025/08/local-message-table/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;将要发送到外部系统的消息和自己本地的业务数据，放在同一个数据库事务里进行保存。&lt;/p&gt;
&lt;p&gt;通过这种方式，本地业务操作和消息的存储具备了 原子性：&lt;/p&gt;
&lt;p&gt;成功：业务数据和消息同时被存入数据库。&lt;/p&gt;
&lt;p&gt;失败：业务数据和消息同时回滚，仿佛发送消息的操作从未发生过。&lt;/p&gt;
&lt;p&gt;暂存，先保存，后处理。&lt;/p&gt;
&lt;p&gt;这很像是登记任务后，后台异步任务处理而已。&lt;/p&gt;
&lt;p&gt;其实之前像是异步登记的任务，差不多都是这种模式的，只要用户对于实时性不是那么的高。&lt;/p&gt;
&lt;h3 id="二流程"&gt;二、流程&lt;/h3&gt;
&lt;img src="spring_process-local_message_table.svg" alt=""&gt;&lt;h3 id="三独立消息服务"&gt;三、独立消息服务&lt;/h3&gt;
&lt;p&gt;除了本地消息外，还有使用消息中间件的独立服务。这个更加专业，性能也更好。消息和业务分开。&lt;/p&gt;</description></item><item><title>drawio 中的组合功能</title><link>https://ongoingblog.org/2025/08/drawio-group/</link><pubDate>Thu, 21 Aug 2025 10:58:48 +0800</pubDate><guid>https://ongoingblog.org/2025/08/drawio-group/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;在画布里拖动图形，图形是有很多很多个小组件构成的。所以每次，都需要用鼠标把所有组件全部给圈定，不能少一个，不然图形就会乱套，这种操作很麻烦。&lt;/p&gt;
&lt;h3 id="二解决方案"&gt;二、解决方案&lt;/h3&gt;
&lt;p&gt;搜索了一下，可以把这些组成图形所有的组件进行组合，组后后作为一个整体，这样的话，拖动就只需要去拖动这个整体，整体会把所有的组件全都囊阔，我也就不会要去关注零零碎碎的东西了，比较方便。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组合前：需要圈定所有的小组件&lt;/li&gt;
&lt;li&gt;组合后：只需要去关注这个大整体&lt;/li&gt;
&lt;/ul&gt;
&lt;img src="cancel_grouping.png" alt=""&gt;</description></item><item><title>方法签名</title><link>https://ongoingblog.org/2025/08/method-signature/</link><pubDate>Fri, 15 Aug 2025 14:05:04 +0800</pubDate><guid>https://ongoingblog.org/2025/08/method-signature/</guid><description>&lt;p&gt;方法名是方法的&amp;quot;名字&amp;quot;，&lt;/p&gt;
&lt;p&gt;方法签名是方法的&amp;quot;身份证&amp;quot;。&lt;/p&gt;
&lt;p&gt;类似人的名字，叫作“张三”的人可能有很多，但是这些人的身份证号都是唯一的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;cal&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; b);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方法名：cal
方法签名：cal(int, int)&lt;/p&gt;
&lt;p&gt;方法签名是唯一的。&lt;/p&gt;</description></item><item><title>macos - pbcopy</title><link>https://ongoingblog.org/2025/08/pbcopy/</link><pubDate>Sun, 10 Aug 2025 11:47:25 +0800</pubDate><guid>https://ongoingblog.org/2025/08/pbcopy/</guid><description>&lt;p&gt;一些常用的命令&lt;/p&gt;
&lt;p&gt;复制当前目录的文件列表&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ls | pbcopy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;|（管道）：将 ls 的输出直接传递给剪贴板工具 pbcopy。
执行后文件列表会进入剪贴板，可直接用 ⌘+V 粘贴。&lt;/p&gt;
&lt;p&gt;复制 file.txt 的内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pbcopy &amp;lt; file.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个命令在复制一些公钥的时候很有用，不需要去打开文件，直接复制内容出来。&lt;/p&gt;</description></item><item><title>Seata 代理对象的创建</title><link>https://ongoingblog.org/2025/08/seata-proxy-object-creatation/</link><pubDate>Sat, 09 Aug 2025 18:54:47 +0800</pubDate><guid>https://ongoingblog.org/2025/08/seata-proxy-object-creatation/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;这里看下 Seata 代理对象在容器启动过程中流程是怎样的。&lt;/p&gt;
&lt;h3 id="二主要流程"&gt;二、主要流程&lt;/h3&gt;
&lt;p&gt;主要看两个地方：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注册 BeanPostProcessors: GlobalTransactionScanner&lt;/li&gt;
&lt;li&gt;应用 BeanPostProcessors: applyBeanPostProcessorsAfterInitialization&lt;/li&gt;
&lt;/ol&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/08/seata-proxy-object-creatation/spring_process-seata-proxy-object-creation_20250812.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/08/seata-proxy-object-creatation/spring_process-seata-proxy-object-creation_20250812.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>Mysql processlist</title><link>https://ongoingblog.org/2025/08/mysql-processlist/</link><pubDate>Sat, 09 Aug 2025 14:45:31 +0800</pubDate><guid>https://ongoingblog.org/2025/08/mysql-processlist/</guid><description>&lt;p&gt;显示当前 MySQL 服务器实例中正在运行的所有线程（客户端连接和内部线程）的信息。相当于活动监视器。&lt;/p&gt;
&lt;p&gt;是 MySQL 数据库管理员和开发人员必备的诊断工具。它提供了数据库服务器当前活动的实时快照。&lt;/p&gt;
&lt;p&gt;触发的两种方式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;show&lt;/span&gt; processlist;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; INFORMATION_SCHEMA.PROCESSLIST;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面这两种方式是相同的效果。&lt;/p&gt;
&lt;img src="show_processlist.png" alt=""&gt;</description></item><item><title>IDEA plugin: spring-debugger</title><link>https://ongoingblog.org/2025/08/spring-debugger/</link><pubDate>Tue, 05 Aug 2025 13:30:48 +0800</pubDate><guid>https://ongoingblog.org/2025/08/spring-debugger/</guid><description>&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#一一些符号的表示"&gt;一、一些符号的表示&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#二logical-view"&gt;二、logical view&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#三适用范围"&gt;三、适用范围&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#四一些示例"&gt;四、一些示例&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;p&gt;这个插件在 debug 的时候很有用。&lt;/p&gt;</description></item><item><title>Docker 上下文切换</title><link>https://ongoingblog.org/2025/08/docker-context-switching/</link><pubDate>Mon, 04 Aug 2025 17:02:39 +0800</pubDate><guid>https://ongoingblog.org/2025/08/docker-context-switching/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;我的 macos 上安装了 docker desktop 和 colima 两个 docker 客户端软件，因为 desktop 很笨重，所以找到了 colima，这个是命令行里启动的。&lt;/p&gt;
&lt;p&gt;之前一直在用 colima，但是由于两个软件的镜像是分别存储的，所以有时候就会交叉用着，不想去做移植了。&lt;/p&gt;
&lt;p&gt;今天启动的时候遇到一个报错，macos docker desktop 已启动，但是执行 docker 报错&lt;code&gt;Cannot connect to the Docker daemon at unix:///Users/zero/.colima/default/docker.sock. Is the docker daemon running?&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="二解决方法"&gt;二、解决方法&lt;/h3&gt;
&lt;p&gt;切换切换 Docker 上下文到 Docker Desktop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 查看所有上下文&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker context ls
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 切换到 Docker Desktop 的上下文（通常是 &amp;#34;default&amp;#34; 或 &amp;#34;desktop-linux&amp;#34;）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker context use default &lt;span style="color:#75715e"&gt;# 或 docker context use desktop-linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在就正常了。&lt;/p&gt;</description></item><item><title>Tmux 的复制和粘贴</title><link>https://ongoingblog.org/2025/08/tmux-copy-and-paste/</link><pubDate>Mon, 04 Aug 2025 16:46:01 +0800</pubDate><guid>https://ongoingblog.org/2025/08/tmux-copy-and-paste/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;在终端中使用 tmux 界面时，更快捷的复制粘贴设置。&lt;/p&gt;
&lt;h3 id="二按键步骤"&gt;二、按键步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;按下 tmux prefix 键位 (默认是 ctrl + b)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&lt;/code&gt;: 进入选择界面，可以使用 vim 的上下左右和其他跳转键位&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;空格键&lt;/code&gt;触发选择&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt;: 复制到系统剪切板中&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="三配置"&gt;三、配置&lt;/h3&gt;
&lt;h4 id="一安装"&gt;（一）安装&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install reattach-to-user-namespace
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="二tmuxconf中添加配置"&gt;（二）&lt;code&gt;~/.tmux.conf&lt;/code&gt;中添加配置&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bind -T copy-mode-vi y send-keys -X copy-pipe &lt;span style="color:#e6db74"&gt;&amp;#34;reattach-to-user-namespace pbcopy&amp;#34;&lt;/span&gt; &lt;span style="color:#75715e"&gt;# macOS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>注解 @SpringBootTest</title><link>https://ongoingblog.org/2025/08/annotation-springboottest/</link><pubDate>Sun, 03 Aug 2025 17:44:19 +0800</pubDate><guid>https://ongoingblog.org/2025/08/annotation-springboottest/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;这里我们看下在我们的测试程序上加上注解 @SpringBootTest 后，这个注解是如何为我们创建一个测试用的 ApplicationContext 的。&lt;/p&gt;
&lt;p&gt;在执行我们的测试方法之前框架为我们准备了哪些东西。&lt;/p&gt;
&lt;h3 id="二主要流程"&gt;二、主要流程&lt;/h3&gt;
&lt;h4 id="一测试用-application-的构建"&gt;（一）测试用 Application 的构建&lt;/h4&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/08/annotation-springboottest/spring_process-TestContext_20250812.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/08/annotation-springboottest/spring_process-TestContext_20250812.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>Seata 执行测试程序报错：程序包 org.apache.seata.core.protocol.generated 不存在</title><link>https://ongoingblog.org/2025/08/seata-core-package-generated/</link><pubDate>Sun, 03 Aug 2025 17:41:47 +0800</pubDate><guid>https://ongoingblog.org/2025/08/seata-core-package-generated/</guid><description>&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#一背景"&gt;一、背景&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#二解决方法"&gt;二、解决方法&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#三快捷方式"&gt;三、快捷方式&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;把 seata 源码 clone 下来了，需要一个简单的例子，先把功能用起来，但是执行后发现报错，程序包 org.apache.seata.core.protocol.generated 不存在。&lt;/p&gt;</description></item><item><title>@Bean 方法之间的调用</title><link>https://ongoingblog.org/2025/07/invocation-between-beanmethod/</link><pubDate>Sun, 27 Jul 2025 15:04:47 +0800</pubDate><guid>https://ongoingblog.org/2025/07/invocation-between-beanmethod/</guid><description>&lt;h3 id="一主要流程"&gt;一、主要流程&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/07/invocation-between-beanmethod/spring_process-BeanMethod_20250812.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/07/invocation-between-beanmethod/spring_process-BeanMethod_20250812.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;

&lt;h3 id="二测试程序"&gt;二、测试程序&lt;/h3&gt;
&lt;p&gt;程序结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── ApplicationTest.java
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── config
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│   └── MyConfig.java
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└── domain
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ├── A.java
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; └── B.java
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;程序文件&lt;/p&gt;
&lt;p&gt;&lt;a href="javafiles/config/MyConfig.java"&gt;MyConfig.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="javafiles/domain/A.java"&gt;A.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="javafiles/domain/B.java"&gt;B.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="javafiles/ApplicationTest.java"&gt;ApplicationTest.java&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Java 中的数字分隔</title><link>https://ongoingblog.org/2025/07/number-separation/</link><pubDate>Sun, 27 Jul 2025 14:10:16 +0800</pubDate><guid>https://ongoingblog.org/2025/07/number-separation/</guid><description>&lt;p&gt;为什么提高代码的阅读性，可以在代码中将 100000 表示为&lt;code&gt;100_000&lt;/code&gt;，不会对性能产生影响。&lt;/p&gt;
&lt;p&gt;数字字面量下划线（Underscores in Numeric Literals）的特性，从 Java 7 开始引入。这个设计主要是为了提高代码可读性。&lt;/p&gt;
&lt;p&gt;可以在测试程序中多多使用。&lt;/p&gt;</description></item><item><title>适配器模式</title><link>https://ongoingblog.org/2025/07/adapter-pattern/</link><pubDate>Thu, 24 Jul 2025 10:18:42 +0800</pubDate><guid>https://ongoingblog.org/2025/07/adapter-pattern/</guid><description>&lt;p&gt;一个转换层，起承上启下的作用。&lt;/p&gt;
&lt;img src="adapter.png" alt=""&gt;&lt;p&gt;翻译家也可以说是适配器。&lt;/p&gt;
&lt;img src="adapter_in_real_world.png" alt=""&gt;&lt;p&gt;适配器可以让不同的接口进行交互，充当两个不兼容接口之间的桥梁。&lt;/p&gt;
&lt;p&gt;我想到收到请求，将之转换为 domain，返回响应，将 domain 转换为响应。&lt;/p&gt;
&lt;p&gt;adapter wrap an object.&lt;/p&gt;
&lt;p&gt;添加适配器前：外层直接访问 object，接口不同，访问不通&lt;/p&gt;
&lt;p&gt;添加适配器后：可以直接访问 adapter，adapter 可以直接访问 object.&lt;/p&gt;
&lt;p&gt;场景：装修的时候走水管时一堆的适配器&lt;/p&gt;
&lt;p&gt;参考：guru 网站。&lt;/p&gt;</description></item><item><title>@Bean 方法名称的生成逻辑</title><link>https://ongoingblog.org/2025/07/the-generation-logic-of-at-bean-method-names/</link><pubDate>Wed, 23 Jul 2025 09:44:36 +0800</pubDate><guid>https://ongoingblog.org/2025/07/the-generation-logic-of-at-bean-method-names/</guid><description>&lt;p&gt;org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForBeanMethod&lt;/p&gt;
&lt;img src="bean_method_name.png" alt=""&gt;</description></item><item><title>激活框架日志</title><link>https://ongoingblog.org/2025/07/2025-07-16-active-spring-framework-logging/</link><pubDate>Wed, 16 Jul 2025 14:16:52 +0800</pubDate><guid>https://ongoingblog.org/2025/07/2025-07-16-active-spring-framework-logging/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;在 debug 程序过程中，将框架中原有的日志打印到控制台中也很有利于 debug 的进行。这里对 spring framework 的日志进行配置并且激活。&lt;/p&gt;
&lt;h3 id="二步骤"&gt;二、步骤&lt;/h3&gt;
&lt;h4 id="一添加依赖"&gt;（一）添加依赖&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-groovy" data-lang="groovy"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dependencies &lt;span style="color:#f92672"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Logback 实现
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; implementation &lt;span style="color:#e6db74"&gt;&amp;#39;ch.qos.logback:logback-classic:1.2.13&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// SLF4J API
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; implementation &lt;span style="color:#e6db74"&gt;&amp;#39;org.slf4j:slf4j-api:1.7.36&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 桥接 Commons Logging (JCL)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; implementation &lt;span style="color:#e6db74"&gt;&amp;#39;org.slf4j:jcl-over-slf4j:1.7.36&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 桥接 Java Util Logging (JUL)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; implementation &lt;span style="color:#e6db74"&gt;&amp;#39;org.slf4j:jul-to-slf4j:1.7.36&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 排除其他日志框架（同上）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; configurations&lt;span style="color:#f92672"&gt;.&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;all&lt;/span&gt; &lt;span style="color:#f92672"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 排除所有 Log4j2 相关依赖
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; exclude group: &lt;span style="color:#e6db74"&gt;&amp;#39;org.apache.logging.log4j&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;,&lt;/span&gt; module: &lt;span style="color:#e6db74"&gt;&amp;#39;log4j-core&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; exclude group: &lt;span style="color:#e6db74"&gt;&amp;#39;org.apache.logging.log4j&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;,&lt;/span&gt; module: &lt;span style="color:#e6db74"&gt;&amp;#39;log4j-api&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; exclude group: &lt;span style="color:#e6db74"&gt;&amp;#39;org.apache.logging.log4j&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;,&lt;/span&gt; module: &lt;span style="color:#e6db74"&gt;&amp;#39;log4j-slf4j-impl&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; exclude group: &lt;span style="color:#e6db74"&gt;&amp;#39;org.apache.logging.log4j&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;,&lt;/span&gt; module: &lt;span style="color:#e6db74"&gt;&amp;#39;log4j-slf4j2-impl&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; exclude group: &lt;span style="color:#e6db74"&gt;&amp;#39;org.apache.logging.log4j&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;,&lt;/span&gt; module: &lt;span style="color:#e6db74"&gt;&amp;#39;log4j-jcl&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; exclude group: &lt;span style="color:#e6db74"&gt;&amp;#39;org.apache.logging.log4j&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;,&lt;/span&gt; module: &lt;span style="color:#e6db74"&gt;&amp;#39;log4j-jul&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 确保没有其他 SLF4J 实现
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; exclude group: &lt;span style="color:#e6db74"&gt;&amp;#39;org.slf4j&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;,&lt;/span&gt; module: &lt;span style="color:#e6db74"&gt;&amp;#39;slf4j-simple&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; exclude group: &lt;span style="color:#e6db74"&gt;&amp;#39;org.slf4j&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;,&lt;/span&gt; module: &lt;span style="color:#e6db74"&gt;&amp;#39;slf4j-log4j12&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="二添加配置文件"&gt;（二）添加配置文件&lt;/h4&gt;
&lt;p&gt;logback.xml&lt;/p&gt;</description></item><item><title>事务代理对象的触发</title><link>https://ongoingblog.org/2025/07/2025-07-15-invocation-of-transactional-proxy-objects/</link><pubDate>Tue, 15 Jul 2025 09:48:54 +0800</pubDate><guid>https://ongoingblog.org/2025/07/2025-07-15-invocation-of-transactional-proxy-objects/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;事务代理对象生成完成后，现在了解下代理对象的触发流程。&lt;/p&gt;
&lt;h3 id="二流程图"&gt;二、流程图&lt;/h3&gt;
&lt;p&gt;这里的事务代理对象依旧是依托于 &lt;a href="https://ongoingblog.org/2025/05/2025-05-27-proxy-object-invocation/"&gt;aop 代理对象触发&lt;/a&gt;的，事务的处理具体在&lt;code&gt;org.springframework.transaction.interceptor.TransactionInterceptor&lt;/code&gt;中。&lt;/p&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/07/2025-07-15-invocation-of-transactional-proxy-objects/transactioninterceptor_hierarchy.png"
 data-pswp-width="3200"
 data-pswp-height="2264"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/07/2025-07-15-invocation-of-transactional-proxy-objects/transactioninterceptor_hierarchy.png"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;

&lt;h4 id="一jdk-事务代理对象触发"&gt;（一）JDK 事务代理对象触发&lt;/h4&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/07/2025-07-15-invocation-of-transactional-proxy-objects/spring_process-transaction-aop-jdk-proxy-invocation.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/07/2025-07-15-invocation-of-transactional-proxy-objects/spring_process-transaction-aop-jdk-proxy-invocation.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>事务代理对象的创建</title><link>https://ongoingblog.org/2025/07/2025-07-15-creation-of-transactional-proxy-objects/</link><pubDate>Tue, 15 Jul 2025 09:48:21 +0800</pubDate><guid>https://ongoingblog.org/2025/07/2025-07-15-creation-of-transactional-proxy-objects/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;为什么保证专注点的聚焦？&lt;/p&gt;
&lt;p&gt;我这边只针对 dao 层的被调用的方法所在的类进行观察。&lt;/p&gt;
&lt;p&gt;只去观察这个类的一个表现和行为，至于其他一些基础设施类的 bean，虽然在这个过程中也有受到牵扯，我这里就先不展开说明。&lt;/p&gt;
&lt;p&gt;也就是说，这里聚焦于框架为 UserDao 这个接口生成对应的代理对象。&lt;/p&gt;
&lt;p&gt;如何去根据事务注解去定位并且生成代理对象的？&lt;/p&gt;
&lt;p&gt;单一事务（无嵌套事务）&lt;/p&gt;
&lt;p&gt;嵌套事务&lt;/p&gt;
&lt;p&gt;注解的解析、生成事务属性。&lt;/p&gt;
&lt;h3 id="二步骤"&gt;二、步骤&lt;/h3&gt;
&lt;p&gt;准备好事务各组件的过程。&lt;/p&gt;
&lt;h4 id="一事务代理对象的创建"&gt;（一）事务代理对象的创建&lt;/h4&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/07/2025-07-15-creation-of-transactional-proxy-objects/spring_process-proxy-object-creation_20250812.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/07/2025-07-15-creation-of-transactional-proxy-objects/spring_process-proxy-object-creation_20250812.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;

&lt;h4 id="二事务代理对象的创建---甬道图"&gt;（二）事务代理对象的创建 - 甬道图&lt;/h4&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/07/2025-07-15-creation-of-transactional-proxy-objects/spring_process-proxy-object-creation-corridor-diagram_20250812.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/07/2025-07-15-creation-of-transactional-proxy-objects/spring_process-proxy-object-creation-corridor-diagram_20250812.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>单词前缀 post-</title><link>https://ongoingblog.org/2025/07/2025-07-09-prefix-post/</link><pubDate>Wed, 09 Jul 2025 13:03:02 +0800</pubDate><guid>https://ongoingblog.org/2025/07/2025-07-09-prefix-post/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;post-有 after 的意思。&lt;/p&gt;
&lt;h3 id="二一些词语"&gt;二、一些词语&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;post-&lt;/th&gt;
 &lt;th&gt;英文释义&lt;/th&gt;
 &lt;th&gt;中文释义&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;postwar&lt;/td&gt;
 &lt;td&gt;after a war&lt;/td&gt;
 &lt;td&gt;战后&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;postscript&lt;/td&gt;
 &lt;td&gt;written after signature&lt;/td&gt;
 &lt;td&gt;附言&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;postgraduate&lt;/td&gt;
 &lt;td&gt;a student taking advanced work after graduation.&lt;/td&gt;
 &lt;td&gt;研究生&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>@Postconstruct</title><link>https://ongoingblog.org/2025/07/2025-07-08-at-postconstruct/</link><pubDate>Tue, 08 Jul 2025 19:13:17 +0800</pubDate><guid>https://ongoingblog.org/2025/07/2025-07-08-at-postconstruct/</guid><description>&lt;p&gt;此注解位于 javax 包中。既然是位于 javax 包中，我想它肯定是在 spring 出现之前就定义出来的。&lt;/p&gt;
&lt;p&gt;注意它的语义：post + construct, 构造函数之后。&lt;/p&gt;
&lt;p&gt;spring 框架中针对这种标记是有怎样的处理呢？&lt;/p&gt;
&lt;p&gt;源码位置：&lt;code&gt;org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;优点：和容器不耦合。&lt;/p&gt;
&lt;p&gt;另外的替代：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;InitializingBean: &lt;code&gt;org.springframework.beans.factory.InitializingBean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;@Bean 的 initMethod 属性：&lt;code&gt;org.springframework.context.annotation.Bean#initMethod&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Bean 生命周期</title><link>https://ongoingblog.org/2025/07/2025-07-08-bean-lifecycle/</link><pubDate>Tue, 08 Jul 2025 16:42:11 +0800</pubDate><guid>https://ongoingblog.org/2025/07/2025-07-08-bean-lifecycle/</guid><description>&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/07/2025-07-08-bean-lifecycle/spring_process-bean_lifecycle.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/07/2025-07-08-bean-lifecycle/spring_process-bean_lifecycle.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>Git notes</title><link>https://ongoingblog.org/2025/07/2025-07-07-git-notes/</link><pubDate>Mon, 07 Jul 2025 10:26:25 +0800</pubDate><guid>https://ongoingblog.org/2025/07/2025-07-07-git-notes/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;我想要针对源码历史中的 commit 信息进行评论，例如写下对应英文的中文意思或者写下其他的笔记。&lt;/p&gt;
&lt;p&gt;在 IDEA 中倒是没有找到这样的按钮，只能在命令行中去进行。&lt;/p&gt;
&lt;h3 id="二git-nots"&gt;二、git nots&lt;/h3&gt;
&lt;p&gt;添加 notes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git notes add -m &lt;span style="color:#e6db74"&gt;&amp;#34;你的信息&amp;#34;&lt;/span&gt; git_hash_id
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显示 notes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git show git_hash_id
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Spring 框架历史</title><link>https://ongoingblog.org/2025/07/2025-07-04-history-of-spring-framework/</link><pubDate>Fri, 04 Jul 2025 17:56:43 +0800</pubDate><guid>https://ongoingblog.org/2025/07/2025-07-04-history-of-spring-framework/</guid><description>&lt;img src="history_of_spring_framework.png" alt=""&gt;&lt;h3 id="参考"&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.ityouknow.com/springboot/2019/01/03/spring-pivotal.html"target="_blank" rel="noopener noreferrer"&gt;http://www.ityouknow.com/springboot/2019/01/03/spring-pivotal.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.quickprogrammingtips.com/spring-boot/history-of-spring-framework-and-spring-boot.html"target="_blank" rel="noopener noreferrer"&gt;https://www.quickprogrammingtips.com/spring-boot/history-of-spring-framework-and-spring-boot.html&lt;/a&gt;&lt;/p&gt;</description></item><item><title>$Proxy29@123 JDK 代理对象名称生成逻辑</title><link>https://ongoingblog.org/2025/07/2025-07-03-jdk-proxy-object-name-generation-logic/</link><pubDate>Thu, 03 Jul 2025 14:41:42 +0800</pubDate><guid>https://ongoingblog.org/2025/07/2025-07-03-jdk-proxy-object-name-generation-logic/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;spring 在给接口生成代理对象时，会使用 jdk 内置的动态代理，生成的代理对象名称形如&lt;/p&gt;
&lt;img src="proxy_instance_name.png" alt=""&gt;&lt;p&gt;这里来定位下对应的逻辑是在哪里。&lt;/p&gt;
&lt;h3 id="二名称生成的逻辑"&gt;二、名称生成的逻辑&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/07/2025-07-03-jdk-proxy-object-name-generation-logic/name_generation_logic.png"
 data-pswp-width="971"
 data-pswp-height="2729"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/07/2025-07-03-jdk-proxy-object-name-generation-logic/name_generation_logic.png"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>优雅停</title><link>https://ongoingblog.org/2025/07/2025-07-03-graceful-shutdown/</link><pubDate>Thu, 03 Jul 2025 10:37:21 +0800</pubDate><guid>https://ongoingblog.org/2025/07/2025-07-03-graceful-shutdown/</guid><description>&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#一配置的读取"&gt;一、配置的读取&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#二web-server-的初始化"&gt;二、web server 的初始化&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#三测试案例的搭建"&gt;三、测试案例的搭建&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;h3 id="一配置的读取"&gt;一、配置的读取&lt;/h3&gt;
&lt;img src="graceful_shutdown_config.png" alt=""&gt;&lt;h3 id="二web-server-的初始化"&gt;二、web server 的初始化&lt;/h3&gt;
&lt;p&gt;执行优雅停源码位置：&lt;code&gt;org.springframework.boot.web.embedded.tomcat.GracefulShutdown#doShutdown&lt;/code&gt;&lt;/p&gt;</description></item><item><title>文章序号规范</title><link>https://ongoingblog.org/2025/06/2025-06-29-specification-for-article-numbering/</link><pubDate>Sun, 29 Jun 2025 10:32:58 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-29-specification-for-article-numbering/</guid><description>&lt;p&gt;一、一级&lt;/p&gt;
&lt;p&gt;二、二级&lt;/p&gt;
&lt;p&gt;（一）二级中的第一级&lt;/p&gt;
&lt;p&gt;（二）二级中的第二级&lt;/p&gt;
&lt;p&gt;以此类推&amp;hellip;&lt;/p&gt;</description></item><item><title>DMZ 是什么</title><link>https://ongoingblog.org/2025/06/2025-06-27-what-is-dmz/</link><pubDate>Fri, 27 Jun 2025 20:04:52 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-27-what-is-dmz/</guid><description>&lt;p&gt;独立隔离区，处在独立隔离区的计算机是直接暴露在外，不经过防火墙保护的。&lt;/p&gt;
&lt;p&gt;是公司内部网络和外部网络的隔离缓冲带。&lt;/p&gt;
&lt;img src="dmz.png" alt=""&gt;</description></item><item><title>Mermaid</title><link>https://ongoingblog.org/2025/06/2025-06-26-mermaid/</link><pubDate>Thu, 26 Jun 2025 11:20:21 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-26-mermaid/</guid><description>&lt;p&gt;我发现 deepseek 回答中的时间线图、流程图都是用这个工具渲染的。
在 typora 中也支持，在 IDEA 中也支持对应的插件，应用范围很广，并且渲染效果还不错。&lt;/p&gt;
&lt;p&gt;我觉得像是 mermaid 这类使用代码生成图像的做法，一个难点就是你在下笔之前很难去知道全貌，所以这个时候所见即所得是最好的。mermaid 适合于把已有的流程图移植一份，用代码保存起来，用代码表示后，就容易去做版本控制了。&lt;/p&gt;
&lt;p&gt;所以以后画草图：依旧还是 draw.io，所见即所得。
如果需要进行版本控制，就用 mermaid 代码表示。&lt;/p&gt;</description></item><item><title>英语单词前缀 -im</title><link>https://ongoingblog.org/2025/06/2025-06-24-word-prefix-im/</link><pubDate>Tue, 24 Jun 2025 15:17:53 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-24-word-prefix-im/</guid><description>&lt;h3 id="表示否定或者相反not-without"&gt;表示否定或者相反，not, without&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;im 单词&lt;/th&gt;
 &lt;th&gt;去掉 im&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;immutable 不可变的&lt;/td&gt;
 &lt;td&gt;mutable 可变的&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;impossible 不可能的&lt;/td&gt;
 &lt;td&gt;possible 可能的&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;impatient 没有耐心的&lt;/td&gt;
 &lt;td&gt;patient 有耐心的&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;impolite 不礼貌的&lt;/td&gt;
 &lt;td&gt;polite 礼貌的&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>underlying 单词的翻译</title><link>https://ongoingblog.org/2025/06/2025-06-24-underlying/</link><pubDate>Tue, 24 Jun 2025 10:48:37 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-24-underlying/</guid><description>&lt;p&gt;我把含有这个单词的句子输入到 deepseek 中去后，发现对应的翻译都是如“底层的&amp;hellip;”。&lt;/p&gt;
&lt;img src="underlying_in_spring_source_code.png" alt=""&gt;</description></item><item><title>markdown 语法中的 bare url</title><link>https://ongoingblog.org/2025/06/2025-06-22-markdown-bare-url/</link><pubDate>Sun, 22 Jun 2025 17:23:04 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-22-markdown-bare-url/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;今天在用格式化工具对 markdown 文章处理时，发现文章中的链接两侧被加上了&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;符号，一开始还以为是异常，但其实是一种包裹的结构。&lt;/p&gt;
&lt;p&gt;裸 URL 可能破坏文档结构，建议用 &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; 包裹或嵌入链接文本。&lt;/p&gt;
&lt;h3 id="二示例"&gt;二、示例&lt;/h3&gt;
&lt;h4 id="错误场景裸-url-可能被误解析"&gt;错误场景（裸 URL 可能被误解析）&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;请访问 https://example.com. 了解更多 → 解析器可能将末尾的句号包含进 URL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="安全写法"&gt;安全写法&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;请访问 &amp;lt;https://example.com&amp;gt;. 了解更多 → 句号明确排除在 URL 外
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为何脚注定义需要此优化？
脚注定义 ([^1]: &amp;hellip;) 中的 URL 通常是独立存在的（没有描述文本包裹），属于裸 URL 的高风险场景。优化为 &lt;code&gt;&amp;lt;https://...&amp;gt;&lt;/code&gt; 能确保：&lt;/p&gt;
&lt;p&gt;任何 Markdown 解析器（如 GitHub、Obsidian、VSCode）均正确识别完整 URL。&lt;/p&gt;
&lt;p&gt;避免 URL 中的特殊字符（如 _, ~, #）干扰渲染。&lt;/p&gt;</description></item><item><title>注解 @Bean</title><link>https://ongoingblog.org/2025/06/2025-06-18-at-bean-annotation/</link><pubDate>Wed, 18 Jun 2025 19:16:20 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-18-at-bean-annotation/</guid><description>&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#一背景"&gt;一、背景&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#二bean"&gt;二、@Bean&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#三生命周期"&gt;三、生命周期&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#四bean-名称"&gt;四、bean 名称&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#五使用场景"&gt;五、使用场景&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;这篇文章来看类：&lt;code&gt;org.springframework.context.annotation.Bean&lt;/code&gt;。&lt;/p&gt;</description></item><item><title>Docker 的使用</title><link>https://ongoingblog.org/2025/06/2025-06-18-docker-usage/</link><pubDate>Wed, 18 Jun 2025 14:20:35 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-18-docker-usage/</guid><description>&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#copy-语法"&gt;COPY 语法&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#查看占用体积"&gt;查看占用体积&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#前缀docker-image"&gt;前缀：docker image&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#前缀docker-container"&gt;前缀：docker container&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#端口映射"&gt;端口映射&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#退出-docker-进程-macos"&gt;退出 docker 进程 (macos)&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;h3 id="copy-语法"&gt;COPY 语法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果目标目录不存在，docker 会自动创建目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：将目录&lt;code&gt;docs.spring.io&lt;/code&gt;这个整个目录（包含目录及其内容）复制到&lt;code&gt;app&lt;/code&gt;目录下&lt;/p&gt;</description></item><item><title>单例双锁检测</title><link>https://ongoingblog.org/2025/06/2025-06-17-singleton/</link><pubDate>Tue, 17 Jun 2025 15:00:51 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-17-singleton/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;这里复习一下单例。&lt;/p&gt;
&lt;h3 id="二类的构造函数私有化"&gt;二、类的构造函数私有化&lt;/h3&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;A&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;A&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，A 类的构造函数虽然私有化了，但是从内部还是可以进行 new 的，外部不可以。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;A&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;final&lt;/span&gt; A INSTANCE &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; A(); &lt;span style="color:#75715e"&gt;// 可以从内部进行 new&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;A&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="三双锁检测-double-checked-locking"&gt;三、双锁检测 (double-checked locking)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SingletonDemo&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// volatile 防止指令重排序，并且保证变更对于其他线程可见。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;volatile&lt;/span&gt; SingletonDemo instance;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SingletonDemo&lt;/span&gt;() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; SingletonDemo &lt;span style="color:#a6e22e"&gt;getInstance&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 加锁前判断一次，防止不必要的加锁，缩小锁的范围&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (instance &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;synchronized&lt;/span&gt; (SingletonDemo.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 预防其他线程也创建的实例，再次判断&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (instance &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; instance &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; SingletonDemo();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; instance;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Linux os-release文件</title><link>https://ongoingblog.org/2025/06/2025-06-16-os-release/</link><pubDate>Mon, 16 Jun 2025 21:41:57 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-16-os-release/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;知道这个文件，可以比较方便知道docker镜像的系统信息，这个文件保存着操作系统的识别数据。&lt;/p&gt;
&lt;h3 id="二使用"&gt;二、使用&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat /etc/os-release
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果如下图&lt;/p&gt;
&lt;img src="os-release.png" alt=""&gt;&lt;p&gt;也可以查看下这个文件：&lt;code&gt;/usr/lib/os-release&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id="三参考"&gt;三、参考&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/latest/os-release.html"target="_blank" rel="noopener noreferrer"&gt;https://www.freedesktop.org/software/systemd/man/latest/os-release.html&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Idea view mode 中的 dock pinned 和 undock 分别是什么意思</title><link>https://ongoingblog.org/2025/06/2025-06-15-idea-view-mode-dock-pinned-and-undock/</link><pubDate>Sun, 15 Jun 2025 15:39:36 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-15-idea-view-mode-dock-pinned-and-undock/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;困扰了我一段时间的侧边栏展示问题被我试出解决方案了。&lt;/p&gt;
&lt;img src="idea_sidebar.png" alt=""&gt;&lt;p&gt;上图是 IDEA 打开项目后的侧边栏，我这里有三个展示，分别是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Project&lt;/li&gt;
&lt;li&gt;Structure&lt;/li&gt;
&lt;li&gt;Commit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先点击 Project，会展示项目的目录树&lt;/li&gt;
&lt;li&gt;修改了文件后，我想要看下 Commit 中的文件变更，点击 Commit
但是此时是上面是目录树窗口，下面是文件变更窗口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我想要的效果：点击 Project 就展示目录树，当前只展示目录树；点击 Commit
就展示文件变更，当前只展示文件变更。而不是目录树和文件变更都展示。我更想要一个轻爽的界面查看。&lt;/p&gt;
&lt;p&gt;问了下 deepseek，给出的回应并非指导我找到对应的配置。&lt;/p&gt;
&lt;p&gt;因为我受到这个困扰有今天了，就只能自行去试试了。&lt;/p&gt;
&lt;p&gt;我四处查看 IDEA 中的配置信息，最后试到这里
&lt;img src="dock_view_mode.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;发现可以实现我想要的轻爽界面效果，很不错。&lt;/p&gt;
&lt;h3 id="原因不是这个什么-dock是分组的原因"&gt;原因不是这个什么 dock，是分组的原因&lt;/h3&gt;
&lt;img src="group.png" alt=""&gt;&lt;p&gt;&lt;strong&gt;这个横线就是分组的依据，把按钮都移动到横线的一侧就可以了！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;dock 是说侧边栏内容在打开文件后的一个状态：例如在左侧目录树选择了一个文件后，现在鼠标如果点进右侧的文件里，左侧目录树的一个状态（是继续固定还是要收起来）。&lt;/p&gt;</description></item><item><title>Arthas</title><link>https://ongoingblog.org/2025/06/2025-06-13-arthas/</link><pubDate>Fri, 13 Jun 2025 15:32:07 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-13-arthas/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://arthas.aliyun.com/"target="_blank" rel="noopener noreferrer"&gt;Arthas&lt;/a&gt;是阿里出的一款 Java 应用监控诊断的工具。&lt;/p&gt;
&lt;p&gt;下面是官方文档中简述它可以起到的作用
&lt;img src="arthas_effect.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;我记得之前公司有人用它来介绍火焰图。&lt;/p&gt;
&lt;h3 id="二如何查看代理类的源码"&gt;二、如何查看代理类的源码&lt;/h3&gt;
&lt;p&gt;找到对应的代理类后，直接执行命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;jad 代理类名称
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="三如何快速找到我想要定位的代理类所在进程-todo"&gt;三、如何快速找到我想要定位的代理类所在进程 todo&lt;/h3&gt;
&lt;h3 id="四在-idea-中如何看到当前运行的应用进程名-todo"&gt;四、在 IDEA 中如何看到当前运行的应用进程名 todo&lt;/h3&gt;
&lt;h3 id="三如何查看生成的-lambda-源码-todo"&gt;三、如何查看生成的 lambda 源码 todo&lt;/h3&gt;
&lt;h3 id="四一些命令"&gt;四、一些命令&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;命令&lt;/th&gt;
 &lt;th&gt;备注&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;sc&lt;/td&gt;
 &lt;td&gt;search class 搜索类信息&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;sm&lt;/td&gt;
 &lt;td&gt;search method 搜素类中方法信息&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;stop/shutdown&lt;/td&gt;
 &lt;td&gt;关闭所有会话，停止 arthas 运行。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;quit&lt;/td&gt;
 &lt;td&gt;关闭当前会话，但是 arthas 还在运行&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;ctrl + d&lt;/td&gt;
 &lt;td&gt;当前的会话还是在运行之中的&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;jad&lt;/td&gt;
 &lt;td&gt;找到代理类，这个命令可以反编译，看源代码&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>本地 git 仓库信息错乱</title><link>https://ongoingblog.org/2025/06/2025-06-13-local-git-repository-info-disorder/</link><pubDate>Fri, 13 Jun 2025 14:09:34 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-13-local-git-repository-info-disorder/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;本地的一个项目仓库莫名其妙有了两个 git remote 信息&lt;/p&gt;
&lt;p&gt;IDEA 中 git 信息窗口每次都有另一个和本项目无关的提交历史。
但是我本地执行&lt;code&gt;git remote -v&lt;/code&gt;并无错误。&lt;/p&gt;
&lt;h3 id="二解决方案"&gt;二、解决方案&lt;/h3&gt;
&lt;p&gt;我询问了下豆包，它给了几种解决方法，我选择了其中的一种&lt;/p&gt;
&lt;p&gt;删除&lt;code&gt;.idea&lt;/code&gt;文件夹后，重新打开项目，就变正常了。&lt;/p&gt;</description></item><item><title>Mysql 终端帮助工具：mycli</title><link>https://ongoingblog.org/2025/06/2025-06-12-mysql-mycli/</link><pubDate>Thu, 12 Jun 2025 13:45:57 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-12-mysql-mycli/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;mycli&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;是 mysql 的命令行小工具，支持 tab 快速弹出命令，加快效率。&lt;/p&gt;
&lt;img src="mycli.png" alt=""&gt;&lt;h3 id="二一些使用方法"&gt;二、一些使用方法&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;场景&lt;/th&gt;
 &lt;th&gt;方法&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;加载并执行外部 sql 文件&lt;/td&gt;
 &lt;td&gt;source 文件的绝对路径&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="三mysql-的安装"&gt;三、Mysql 的安装&lt;/h3&gt;
&lt;p&gt;推荐直接用 docker 安装，更方便一些，有现成的容器环境，直接下载下来在本地启动起来就可以，不污染宿主机环境。&lt;/p&gt;
&lt;h3 id="四在-dbeaver-中连接报错public-key-retrieval-is-not-allowed"&gt;四、在 dbeaver 中连接报错：Public Key Retrieval is not allowed&lt;/h3&gt;
&lt;img src="allowPublicKeyRetrieval.png" alt=""&gt;&lt;p&gt;也可以在连接串中设置属性 allowPublicKeyRetrieval。&lt;/p&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://www.mycli.net/"target="_blank" rel="noopener noreferrer"&gt;https://www.mycli.net/&lt;/a&gt;&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>Java 命令：jps</title><link>https://ongoingblog.org/2025/06/2025-06-12-java-jps/</link><pubDate>Thu, 12 Jun 2025 12:55:53 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-12-java-jps/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;jps(JVM Process Status Tool): java 自带的命令行工具。可以展示当前系统正在运行的 Java 进程信息。&lt;/p&gt;
&lt;img src="jps_exec.png" alt=""&gt;&lt;h3 id="二功能"&gt;二、功能&lt;/h3&gt;
&lt;div class="table-left"&gt;
 &lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;命令&lt;/th&gt;
 &lt;th&gt;备注&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;jps&lt;/td&gt;
 &lt;td&gt;进程 id 主类名&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;jps -l&lt;/td&gt;
 &lt;td&gt;进程 id 全限定类名&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;jps -q&lt;/td&gt;
 &lt;td&gt;只有进程 id&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;

&lt;style&gt;
 .table-left table {
 margin-left: 0 !important;
 margin-right: auto;
 }
&lt;/style&gt;</description></item><item><title>Idea 下载依赖包失败，attatch source 也失败</title><link>https://ongoingblog.org/2025/06/2025-06-12-idea-can-not-see-source-code-about-enhancer/</link><pubDate>Thu, 12 Jun 2025 10:15:04 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-12-idea-can-not-see-source-code-about-enhancer/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;IDEA 看到下面这段代码&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;时&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;protected&lt;/span&gt; Enhancer &lt;span style="color:#a6e22e"&gt;createEnhancer&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Enhancer();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;点进 Enhancer 中，显示的是 Enhancer.class 文件，我想要看源文件，IDEA 上有显示 download，但是也是失败的 (下图所示)。&lt;/p&gt;
&lt;img src="problem.png" alt=""&gt;&lt;h3 id="二解决方案"&gt;二、解决方案&lt;/h3&gt;
&lt;img src="solution.png" alt=""&gt;&lt;h3 id="三后语"&gt;三、后语&lt;/h3&gt;
&lt;p&gt;但是我发现每次重新编译完 spring 源码后，我都需要重新去 attach 这个类的源码。&lt;/p&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;org.springframework.aop.framework.CglibAopProxy#createEnhancer&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>Jetbrains Toolbox</title><link>https://ongoingblog.org/2025/06/2025-06-11-jetbrains-toolbox/</link><pubDate>Wed, 11 Jun 2025 23:44:39 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-11-jetbrains-toolbox/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;发现 IDEA 又出了新版本了。
之前每次更新编程软件新版本的做法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去 jetbrains 官网找到最新版本的安装包&lt;/li&gt;
&lt;li&gt;全量下载安装包&lt;/li&gt;
&lt;li&gt;本地安装时会覆盖掉旧版本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;询问了下 ai 工具，发现了 jetbrains 有一个专门用来管理更新的小工具叫作&lt;a href="https://www.jetbrains.com/toolbox-app/"target="_blank" rel="noopener noreferrer"&gt;JetBrains Toolbox App&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="二jetbrains-toolbox-app"&gt;二、JetBrains Toolbox App&lt;/h3&gt;
&lt;img src="toolbox.png" alt=""&gt;&lt;p&gt;如上图，这是它的样子，直接下载安装后。&lt;/p&gt;
&lt;p&gt;应用再有更新就可以直接用它了，并且可以设置后台自动更新。
优点是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每次升级下载是 patch 安装包，而非全量的安装包，更快&lt;/li&gt;
&lt;li&gt;可以管理所有 jetbrains 旗下的软件&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>接口的默认方法</title><link>https://ongoingblog.org/2025/06/2025-06-05-interface-default-method/</link><pubDate>Thu, 05 Jun 2025 11:16:05 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-05-interface-default-method/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;例如这个场景&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最开始，你写了一个接口TestInterface这个接口中没有声明任何方法，是一个空接口&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestInterface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你根据这个空接口有一个实现类TestInterfaceImpl&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestInterfaceImpl&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;implements&lt;/span&gt; TestInterface {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 因为接口中没有声明任何方法，所以实现类自然也没有。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;陆陆续续这个接口下面实现了很多很多类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;现在想要对这个接口添加方法。如果在接口TestInterface中直接添加方法声明，会强制下面所有实现类全部都要实现方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestInterface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;methodA&lt;/span&gt;(); &lt;span style="color:#75715e"&gt;// 给接口添加方法声明，实现类TestInterfaceImpl也需要实现此方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 default 关键在接口中去声明方法，不会影响到先有实现类的功能&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestInterface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;newExec&lt;/span&gt;() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="二优点"&gt;二、优点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;向后兼容，不会导致兼容性的问题。已有的实现类无需实现此方法，可正常工作。&lt;/li&gt;
&lt;li&gt;符合开闭原则：对扩展开放，对修改关闭。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="三现有框架例子"&gt;三、现有框架例子&lt;/h3&gt;
&lt;p&gt;直接在spring源码中搜索default关键字的接口，你会发现很多这样使用的例子。最开始就是普通接口及接口方法的声明，后面有default关键字声明的方法。&lt;/p&gt;
&lt;img src="spring_interface_default_method.png" alt=""&gt;</description></item><item><title>标记接口</title><link>https://ongoingblog.org/2025/06/2025-06-05-marker-interface/</link><pubDate>Thu, 05 Jun 2025 10:59:26 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-05-marker-interface/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;在 spring 源码中遇到的空方法的接口，有些奇怪，因为一般接口都是行为的契约，但是这些接口都是空接口，里面没有任何方法的定义。&lt;/p&gt;
&lt;h3 id="二释义"&gt;二、释义&lt;/h3&gt;
&lt;p&gt;表示实现类具有某种特性或者能力，可以用作一种能力标识。&lt;/p&gt;
&lt;p&gt;最开始可以为空方法，后续如果想要添加，可以使用&lt;a href="https://ongoingblog.org/2025/06/2025-06-05-interface-default-method/"&gt;接口的默认方法&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="三spring-中例子"&gt;三、Spring 中例子&lt;/h3&gt;
&lt;p&gt;在源码中搜索关键词 &lt;code&gt;marker interface&lt;/code&gt;:&lt;/p&gt;
&lt;img src="marker_interface_in_spring.png" alt=""&gt;&lt;img src="afteradvice.png" alt=""&gt;&lt;img src="springproxy.png" alt=""&gt;</description></item><item><title>JDK Proxy 流程</title><link>https://ongoingblog.org/2025/06/2025-06-05-jdk-proxy-process/</link><pubDate>Thu, 05 Jun 2025 10:14:54 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-05-jdk-proxy-process/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;展示 jdk 动态代理的流程。&lt;/p&gt;
&lt;h3 id="二流程图"&gt;二、流程图&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/06/2025-06-05-jdk-proxy-process/spring_process-aoo-jdk-proxy-creation.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/06/2025-06-05-jdk-proxy-process/spring_process-aoo-jdk-proxy-creation.svg"
 alt="jdk 动态代理"
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 &lt;figcaption style="text-align: center;"&gt;jdk 动态代理&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id="三测试代码"&gt;三、测试代码&lt;/h3&gt;
&lt;p&gt;&lt;a href="aopdemo_jdk/AopTest.java"&gt;AopTest.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="aopdemo_jdk/Application.java"&gt;Application.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="aopdemo_jdk/DemoInterface.java"&gt;DemoInterface.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="aopdemo_jdk/DemoService.java"&gt;DemoService.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="aopdemo_jdk/ServiceAspect.java"&gt;ServiceAspect.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里的程序都是标准 bean 的生成路径，没有走&lt;code&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation&lt;/code&gt;中的 short-cut 路径（流程图中菱形左侧分支的自定义场景）。&lt;/p&gt;</description></item><item><title>如何消除循环依赖</title><link>https://ongoingblog.org/2025/06/2025-06-04-how-to-resolve-circular-dependency/</link><pubDate>Wed, 04 Jun 2025 19:15:59 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-04-how-to-resolve-circular-dependency/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;在遇到循环依赖后，我们应该怎么去消除循环依赖？&lt;/p&gt;
&lt;h3 id="二方法"&gt;二、方法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;不要使用字段注入(field injection)，强制使用构造器注入&lt;/li&gt;
&lt;li&gt;重构代码，从根本上消除掉相互依赖的逻辑。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>CGLIB Proxy 流程</title><link>https://ongoingblog.org/2025/06/2025-06-04-code-generation-library/</link><pubDate>Wed, 04 Jun 2025 14:16:18 +0800</pubDate><guid>https://ongoingblog.org/2025/06/2025-06-04-code-generation-library/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;展示 cglib 生成代理对象流程。&lt;/p&gt;
&lt;p&gt;CGLIB 是一个常用的字节码生成器的类库。
提供的功能：生成和转换 Java 字节码。&lt;/p&gt;
&lt;p&gt;CGLIB 可以覆盖 final 方法&lt;/p&gt;
&lt;p&gt;技术背景：在 Java 早期，动态代理主要依赖 JDK 原生的 java.lang.reflect.Proxy，但该机制仅支持接口代理，无法直接代理普通类。CGLIB 则通过字节码生成技术（基于 ASM 框架），实现了对类的代理，弥补了 JDK 代理的局限性。&lt;/p&gt;
&lt;p&gt;如果目标类没有实现接口，spring 会强制使用 CGLIB&lt;/p&gt;
&lt;p&gt;代理对象和目标对象如何产生联系？&lt;/p&gt;
&lt;h3 id="二流程图"&gt;二、流程图&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/06/2025-06-04-code-generation-library/spring_process-aoo-cglib-proxy-creation.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/06/2025-06-04-code-generation-library/spring_process-aoo-cglib-proxy-creation.svg"
 alt="cglib 动态代理"
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 &lt;figcaption style="text-align: center;"&gt;cglib 动态代理&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id="三测试代码"&gt;三、测试代码&lt;/h3&gt;
&lt;p&gt;&lt;a href="aopdemo_cglib/AopTest.java"&gt;AopTest.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="aopdemo_cglib/Application.java"&gt;Application.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="aopdemo_cglib/DemoService.java"&gt;DemoService.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="aopdemo_cglib/ServiceAspect.java"&gt;ServiceAspect.java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里的程序都是标准 bean 的生成路径，没有走&lt;code&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation&lt;/code&gt;中的 short-cut 路径（流程图中菱形左侧分支的自定义场景）。&lt;/p&gt;</description></item><item><title>Spring 术语</title><link>https://ongoingblog.org/2025/05/2025-05-30-spring-terminology/</link><pubDate>Fri, 30 May 2025 13:18:13 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-30-spring-terminology/</guid><description>&lt;h3 id="一一些名词的含义"&gt;一、一些名词的含义&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;名称&lt;/th&gt;
 &lt;th&gt;解释&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;application code&lt;/td&gt;
 &lt;td&gt;开发者编写的代码&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;framework code&lt;/td&gt;
 &lt;td&gt;框架的代码&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Application-provided&lt;/td&gt;
 &lt;td&gt;开发者提供的&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;User-provided&lt;/td&gt;
 &lt;td&gt;用户提供的。和 Application-provided 意思其实一样&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;instantiation&lt;/td&gt;
 &lt;td&gt;实例化。指创建 Bean 的实例对象，例如通过构造器或工厂方法创建对象。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;initialization&lt;/td&gt;
 &lt;td&gt;初始化。在实例化之后，进行属性填充、初始化方法调用等。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;declarative programming&lt;/td&gt;
 &lt;td&gt;声明式编程&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;semantic concepts&lt;/td&gt;
 &lt;td&gt;语义概念&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;populate&lt;/td&gt;
 &lt;td&gt;fill with data&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;first-class&lt;/td&gt;
 &lt;td&gt;一等公民&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Transaction Demarcation&lt;/td&gt;
 &lt;td&gt;事务界定 (定义事务开始和结束点的过程)&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Transaction Boundary&lt;/td&gt;
 &lt;td&gt;事务边界&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;non-invasive framework&lt;/td&gt;
 &lt;td&gt;非侵入式框架&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;imperative transaction&lt;/td&gt;
 &lt;td&gt;命令式事务&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;regular beans&lt;/td&gt;
 &lt;td&gt;常规 Bean&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Most Specific&lt;/td&gt;
 &lt;td&gt;最终实现/最具体。场景：继承链方法解析&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;idempotent behavior&lt;/td&gt;
 &lt;td&gt;幂等行为&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;NonStop System&lt;/td&gt;
 &lt;td&gt;不停机系统&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;R&amp;amp;D&lt;/td&gt;
 &lt;td&gt;Research and Development，研发&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Codebase Awareness&lt;/td&gt;
 &lt;td&gt;代码库感知&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;project internals&lt;/td&gt;
 &lt;td&gt;项目内部结构&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;in turn&lt;/td&gt;
 &lt;td&gt;次序&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;in question&lt;/td&gt;
 &lt;td&gt;特指，this specific one&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;glue code&lt;/td&gt;
 &lt;td&gt;胶水代码&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;bidirectional interface&lt;/td&gt;
 &lt;td&gt;双向接口&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;specification&lt;/td&gt;
 &lt;td&gt;规范&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;invariable roles&lt;/td&gt;
 &lt;td&gt;固定角色&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;delinate&lt;/td&gt;
 &lt;td&gt;界定&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;presumed rollback&lt;/td&gt;
 &lt;td&gt;预设回滚机制&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;record stably&lt;/td&gt;
 &lt;td&gt;稳定写入&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;protocol optimisations&lt;/td&gt;
 &lt;td&gt;协议优化机制&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;hindrance&lt;/td&gt;
 &lt;td&gt;impediment -&amp;gt; obstacle&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;empirical process&lt;/td&gt;
 &lt;td&gt;实证过程&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;dirty flagging&lt;/td&gt;
 &lt;td&gt;脏标记机制&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;in-house solution&lt;/td&gt;
 &lt;td&gt;内部解决方案&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;coroutine&lt;/td&gt;
 &lt;td&gt;协程&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;fine-grained concurrency&lt;/td&gt;
 &lt;td&gt;细粒度并发控制&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;synchronization primitive&lt;/td&gt;
 &lt;td&gt;同步原语&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;plumbing&lt;/td&gt;
 &lt;td&gt;组件装配。一种隐喻。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;seamlessly integrate&lt;/td&gt;
 &lt;td&gt;无缝集成&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;in-flight&lt;/td&gt;
 &lt;td&gt;事务处理领域，它作为一个生动的比喻，专门用来描述一个已经开始但尚未最终完成的事务状态。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;statement&lt;/td&gt;
 &lt;td&gt;语句。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;SQL statements&lt;/td&gt;
 &lt;td&gt;sql 语句。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Eagerly initialize&lt;/td&gt;
 &lt;td&gt;立即初始化&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;broker&lt;/td&gt;
 &lt;td&gt;agent, 代理。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Livereload&lt;/td&gt;
 &lt;td&gt;实时重载。This editor supports livereload for instant preview.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;start timeout&lt;/td&gt;
 &lt;td&gt;启动超时&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;long polling&lt;/td&gt;
 &lt;td&gt;长轮询&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;square root&lt;/td&gt;
 &lt;td&gt;平方根&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;img src="most_specific.png" alt=""&gt;&lt;img src="works_out_of_the_box.png" alt=""&gt;&lt;h3 id="二一些缩写"&gt;二、一些缩写&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;名称&lt;/th&gt;
 &lt;th&gt;解释&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;bf&lt;/td&gt;
 &lt;td&gt;beanFactory&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;bd&lt;/td&gt;
 &lt;td&gt;beanDefinition&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;ctx&lt;/td&gt;
 &lt;td&gt;context&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;prop&lt;/td&gt;
 &lt;td&gt;property&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>Idea 查找快捷键</title><link>https://ongoingblog.org/2025/05/2025-05-28-idea-shortcut/</link><pubDate>Wed, 28 May 2025 13:59:35 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-28-idea-shortcut/</guid><description>&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#快捷键"&gt;快捷键&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#搜索技巧"&gt;搜索技巧&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#类中方法的排序方式"&gt;类中方法的排序方式&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#装订线图标"&gt;装订线图标&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#渲染全部-javadoc"&gt;渲染全部 javadoc&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#格式化代码"&gt;格式化代码&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#idea-的-show-diagram-一般是以当前类或接口为起点展示它的所有上级如何以当前类或接口为起点展示它所有的下级呢"&gt;idea 的 show diagram 一般是以当前类或接口为起点，展示它的所有上级。如何以当前类或接口为起点，展示它所有的下级呢？&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;h3 id="快捷键"&gt;快捷键&lt;/h3&gt;
&lt;div class="table-left"&gt;
 &lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;场景&lt;/th&gt;
 &lt;th&gt;快捷键 (Macos 系统)&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;根据文件名查找文件&lt;/td&gt;
 &lt;td&gt;command + shift + N&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;查看某个方法的调用链路&lt;/td&gt;
 &lt;td&gt;option + F7&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;快速到达备忘录最下方进行编辑&lt;/td&gt;
 &lt;td&gt;command + ↓&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;

&lt;style&gt;
 .table-left table {
 margin-left: 0 !important;
 margin-right: auto;
 }
&lt;/style&gt;
&lt;h3 id="搜索技巧"&gt;搜索技巧&lt;/h3&gt;
&lt;div class="table-left"&gt;
 &lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;场景&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;查找类文件中的空实现方法&lt;/td&gt;
 &lt;td&gt;根据正则表达式：{\s*(\n\s*)?}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;查找变量引用位置&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;

&lt;style&gt;
 .table-left table {
 margin-left: 0 !important;
 margin-right: auto;
 }
&lt;/style&gt;
&lt;img src="option_f7.png" alt=""&gt;&lt;h3 id="类中方法的排序方式"&gt;类中方法的排序方式&lt;/h3&gt;
&lt;p&gt;我认为还是不能按照字母表的顺序，应该按照类中原本的顺序，它的顺序涵盖了某种语义。&lt;/p&gt;</description></item><item><title>隐式继承</title><link>https://ongoingblog.org/2025/05/2025-05-28-implicit-inheritance/</link><pubDate>Wed, 28 May 2025 10:45:01 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-28-implicit-inheritance/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;今天看到&lt;code&gt;org.springframework.beans.factory.ObjectFactory#getObject&lt;/code&gt;抛出的&lt;code&gt;org. springframework.beans.BeansException&lt;/code&gt;，我一直往上找到&lt;code&gt;Throwable &lt;/code&gt;，往右侧看父类和子类的结构时，发现这个类代码中并没有去写继承Object，但是右侧层次结构中却有Object
&lt;img src="object.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;搜了一下，这种叫作隐式继承，突然想起很久之前看到java书中基本概念确实说过这个东西。&lt;/p&gt;
&lt;h3 id="二概念"&gt;二、概念&lt;/h3&gt;
&lt;p&gt;隐式继承是指一个类没有使用&lt;code&gt;extends&lt;/code&gt;关键字显示指定父类时，会自动继承&lt;code&gt;java.lang.Object&lt;/code&gt;的机制。确保所有类都有一个共同的根。&lt;/p&gt;
&lt;p&gt;在Object类中，有这样一段注释&lt;/p&gt;
&lt;img src="object_comment.png" alt=""&gt;&lt;p&gt;随便找个类进行验证下&lt;/p&gt;
&lt;img src="sample.png" alt=""&gt;&lt;h3 id="三注意"&gt;三、注意&lt;/h3&gt;
&lt;p&gt;接口不会继承Object，但是接口的实现类会继承。&lt;/p&gt;</description></item><item><title>代理对象的触发</title><link>https://ongoingblog.org/2025/05/2025-05-27-proxy-object-invocation/</link><pubDate>Tue, 27 May 2025 15:50:55 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-27-proxy-object-invocation/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;代理对象生成完成后，现在了解下代理对象的触发流程。&lt;/p&gt;
&lt;h3 id="二流程图"&gt;二、流程图&lt;/h3&gt;
&lt;p&gt;触发的主要流程 JDK 和 CGLIB 都是相同的，主要步骤就在&lt;code&gt;org.springframework.aop.framework.ReflectiveMethodInvocation#proceed&lt;/code&gt;中。&lt;/p&gt;
&lt;h4 id="一jdk-代理对象触发"&gt;（一）JDK 代理对象触发&lt;/h4&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/05/2025-05-27-proxy-object-invocation/spring_process-aoo-jdk-proxy-invocation.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/05/2025-05-27-proxy-object-invocation/spring_process-aoo-jdk-proxy-invocation.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;

&lt;h4 id="二cglib-代理对象触发"&gt;（二）CGLIB 代理对象触发&lt;/h4&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/05/2025-05-27-proxy-object-invocation/spring_process-aoo-cglib-proxy-invocation.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/05/2025-05-27-proxy-object-invocation/spring_process-aoo-cglib-proxy-invocation.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;</description></item><item><title>代理对象的创建</title><link>https://ongoingblog.org/2025/05/2025-05-27-proxy-object-creatation/</link><pubDate>Tue, 27 May 2025 15:25:19 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-27-proxy-object-creatation/</guid><description>&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#一背景"&gt;一、背景&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#二创建入口-时段run-time"&gt;二、创建入口 (时段：run-time)&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#三自动生成的代理对象的结构"&gt;三、自动生成的代理对象的结构&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#四名称逻辑"&gt;四、名称逻辑&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#五问题目标对象的代理对象创建了之后目标对象还会去创建吗"&gt;五、问题：目标对象的代理对象创建了之后，目标对象还会去创建吗？&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#六annotationawareaspectjautoproxycreator"&gt;六、AnnotationAwareAspectJAutoProxyCreator&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#七问题如何判断一个-bean-是否需要生成代理对象"&gt;七、问题：如何判断一个 bean 是否需要生成代理对象？&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#八问题getbean-获取代理对象的过程是怎样的"&gt;八、问题：getBean() 获取代理对象的过程是怎样的？&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;了解 Spring AOP 的代理对象的创建流程。&lt;/p&gt;</description></item><item><title>lambda 表达式生成的类是 final 的</title><link>https://ongoingblog.org/2025/05/2025-05-27-lambda-class-is-final/</link><pubDate>Tue, 27 May 2025 13:48:36 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-27-lambda-class-is-final/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;在看 aop 创建方法&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;时，代码中第三个判断条件&lt;/p&gt;
&lt;img src="third_condition.png" alt=""&gt;&lt;p&gt;&lt;code&gt;ClassUtils.isLambdaClass(targetClass)&lt;/code&gt;说 lambda 表达式生成的类是 final，不能被继承，所以强制得用 JDK 动态代理。&lt;/p&gt;
&lt;p&gt;这里用例子检查 lambda 生成的类是否是 final 的。&lt;/p&gt;
&lt;h3 id="二代码"&gt;二、代码&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;LamdbaFinalDemo&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(String&lt;span style="color:#f92672"&gt;[]&lt;/span&gt; args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Runnable lambda &lt;span style="color:#f92672"&gt;=&lt;/span&gt; () &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;test&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Class&lt;span style="color:#f92672"&gt;&amp;lt;?&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;extends&lt;/span&gt; Runnable&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; aClass &lt;span style="color:#f92672"&gt;=&lt;/span&gt; lambda.&lt;span style="color:#a6e22e"&gt;getClass&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;====&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;boolean&lt;/span&gt; isFinal &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Modifier.&lt;span style="color:#a6e22e"&gt;isFinal&lt;/span&gt;(aClass.&lt;span style="color:#a6e22e"&gt;getModifiers&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;isFinal: &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; isFinal);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(aClass.&lt;span style="color:#a6e22e"&gt;getName&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果&lt;/p&gt;
&lt;img src="result.png" alt=""&gt;&lt;h3 id="三为什么生成的类是-final-的"&gt;三、为什么生成的类是 final 的？&lt;/h3&gt;
&lt;p&gt;为了确保 不可变性和安全性，JVM 会将生成的类标记为 final，防止其他代码继承或修改其行为。&lt;/p&gt;
&lt;h3 id="四在-spring-aop-中的判断"&gt;四、在 spring aop 中的判断&lt;/h3&gt;
&lt;p&gt;由于 Lambda 类无法被继承，Spring AOP 只能对其使用 JDK 动态代理（而非 CGLIB）。&lt;/p&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;org.springframework.aop.framework.DefaultAopProxyFactory#createAopProxy&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>Advice的类型</title><link>https://ongoingblog.org/2025/05/2025-05-27-advice-type/</link><pubDate>Tue, 27 May 2025 11:42:31 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-27-advice-type/</guid><description>&lt;p&gt;主要展示Advice发生作用的5种类型的类和接口的关系：&lt;/p&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/05/2025-05-27-advice-type/spring_process-aop_advice.png"
 data-pswp-width="6008"
 data-pswp-height="3848"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/05/2025-05-27-advice-type/spring_process-aop_advice.png"
 alt="aop advice"
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 &lt;figcaption style="text-align: center;"&gt;aop advice&lt;/figcaption&gt;
&lt;/figure&gt;</description></item><item><title>代码中的注释</title><link>https://ongoingblog.org/2025/05/2025-05-22-comment-in-source-code/</link><pubDate>Thu, 22 May 2025 11:26:23 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-22-comment-in-source-code/</guid><description>&lt;p&gt;&lt;code&gt;为什么去做&lt;/code&gt;和&lt;code&gt;怎么做&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;注释最佳实践：&lt;/p&gt;
&lt;p&gt;1、优先让代码去解释
通过命名、函数去解释
代码就是注释。&lt;/p&gt;
&lt;p&gt;2、关注为什么，而非怎么做
写这段代码的目的是什么?
这么写的目的是什么。&lt;/p&gt;
&lt;p&gt;3、不要用注释去一对一地对代码进行翻译，这种没有必要，只会消耗读者的精力&lt;/p&gt;
&lt;p&gt;怎么去做：这个直接让代码去直观地展示即可，不要冗余再去使用注释&lt;/p&gt;
&lt;p&gt;需要有意识的去注意到这些。&lt;/p&gt;</description></item><item><title>EnhancerBySpringCGLIB</title><link>https://ongoingblog.org/2025/05/2025-05-22-enhancerbyspringcglib/</link><pubDate>Thu, 22 May 2025 10:35:12 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-22-enhancerbyspringcglib/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;在 IDEA debug 窗口中看到了这样的标识符号：&lt;/p&gt;
&lt;img src="EnhancerBySpringCGLIB.png" alt=""&gt;&lt;p&gt;如果一个类名是这个样子的，表示这个类是由 CGLIB 库生成的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$$&lt;/code&gt;符号是 CGLIB 生成的类的分隔符：&lt;/p&gt;
&lt;img src="cglib_class_separator.png" alt=""&gt;&lt;h3 id="二生成的代理类命名规则"&gt;二、生成的代理类命名规则&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;原始类名 + $$EnhancerBySpringCGLIB$$ + 随机哈希值
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="三生成名称的源码逻辑"&gt;三、生成名称的源码逻辑&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/05/2025-05-22-enhancerbyspringcglib/DefaultNamingPolicy.png"
 data-pswp-width="819"
 data-pswp-height="3237"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/05/2025-05-22-enhancerbyspringcglib/DefaultNamingPolicy.png"
 alt="生成 CGLIB 代理类的名称逻辑"
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 &lt;figcaption style="text-align: center;"&gt;生成 CGLIB 代理类的名称逻辑&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;最后一张图片里需要去 github 上下载 CGLIB 的仓库查看下对应的源码。&lt;/p&gt;</description></item><item><title>IDEA 反编译</title><link>https://ongoingblog.org/2025/05/2025-05-21-idea-decompile/</link><pubDate>Wed, 21 May 2025 14:01:31 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-21-idea-decompile/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;想要查看 jdk 动态代理生成的代理类或者 cglib 生成的代理类，找个工具。&lt;/p&gt;
&lt;h3 id="二工具"&gt;二、工具&lt;/h3&gt;
&lt;p&gt;直接使用 &lt;a href="https://ongoingblog.org/2025/06/2025-06-13-arthas/"&gt;Arthas&lt;/a&gt; 工具就很方便。&lt;/p&gt;</description></item><item><title>一个 AOP 的简单例子，用作源码触发入口</title><link>https://ongoingblog.org/2025/05/2025-05-20-aop-best-practice/</link><pubDate>Tue, 20 May 2025 13:43:20 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-20-aop-best-practice/</guid><description>&lt;p&gt;AopTest.java&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AopTest&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;testAop&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; AnnotationConfigApplicationContext context &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; AnnotationConfigApplicationContext(Application.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 获取代理对象&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; DemoService demoService &lt;span style="color:#f92672"&gt;=&lt;/span&gt; context.&lt;span style="color:#a6e22e"&gt;getBean&lt;/span&gt;(DemoService.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 触发切面方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; demoService.&lt;span style="color:#a6e22e"&gt;save&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; context.&lt;span style="color:#a6e22e"&gt;close&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Application.java&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@Configuration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@ComponentScan&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;mine.projects.aopdemo_cglib&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@EnableAspectJAutoProxy&lt;/span&gt;(proxyTargetClass &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Application&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DemoService.java&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DemoService&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;save&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Save run&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ServiceAspect.java&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@Aspect&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@Component&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ServiceAspect&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Before&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;execution(public * mine.projects.aopdemo_cglib.DemoService.*(..))&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;beforePrint&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;before run...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行结果：&lt;/p&gt;
&lt;img src="exec_result.png" alt=""&gt;&lt;p&gt;建议在空方法上声明切点，并通过空方法引用这些切点。&lt;/p&gt;
&lt;p&gt;ServiceAspect.java 的优化写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@Aspect&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@Component&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ServiceAspect&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Pointcut&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;execution(* mine.archive.aop.aopdemo_jdk.DemoService.*(..))&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pointCut&lt;/span&gt;() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Before&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;pointCut()&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;beforePrint&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;before run...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Advisor的翻译</title><link>https://ongoingblog.org/2025/05/2025-05-19-advisor-translation/</link><pubDate>Mon, 19 May 2025 17:59:24 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-19-advisor-translation/</guid><description>&lt;p&gt;在最近看的一本书中，将 Advisor 翻译为&lt;code&gt;增强器&lt;/code&gt;，但是spring文档里翻译是&lt;code&gt;通知器&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;问了下deepseek，回复是按spring文档中来的。&lt;/p&gt;
&lt;img src="advisor.png" alt=""&gt;</description></item><item><title>强制重新启动 iPhone</title><link>https://ongoingblog.org/2025/05/2025-05-17-force-restart-iphone/</link><pubDate>Sat, 17 May 2025 11:59:40 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-17-force-restart-iphone/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;1、早上使用手机时，突然在备忘录卡住了&lt;/p&gt;
&lt;p&gt;2、下拉系统菜单是正常的，听歌也是正常的&lt;/p&gt;
&lt;p&gt;3、但是主界面一直卡在了备忘录&lt;/p&gt;
&lt;p&gt;4、持续很久，一开始想着一直按右侧的那个开关键重启，但是没啥用&lt;/p&gt;
&lt;p&gt;5、去网上搜索了下重启的方式，这里记录下&lt;/p&gt;
&lt;h3 id="二强制重启步骤"&gt;二、强制重启步骤&lt;/h3&gt;
&lt;img src="force_restart.png" alt=""&gt;&lt;h3 id="三参考"&gt;三、参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://support.apple.com/zh-cn/guide/iphone/iph8903c3ee6/18.0/ios/18.0"target="_blank" rel="noopener noreferrer"&gt;https://support.apple.com/zh-cn/guide/iphone/iph8903c3ee6/18.0/ios/18.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Git merge报错：error refusing to merge unrelated histories</title><link>https://ongoingblog.org/2025/05/2025-05-16-git-error-refusing-to-merge-unrelated-histories/</link><pubDate>Fri, 16 May 2025 23:00:54 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-16-git-error-refusing-to-merge-unrelated-histories/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;电脑本地的一个仓库莫名其妙的没有远程仓库信息了(执行 &lt;code&gt;git remote -v&lt;/code&gt;什么输出都没有)，不知道是不是我误操作&lt;/li&gt;
&lt;li&gt;只能重新 set-url 下远程的仓库名称&lt;/li&gt;
&lt;li&gt;set完毕之后，我看本地 git 历史中是没有 origin 的head显示的，只有本地的。&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;git pull&lt;/code&gt;把远程仓库的信息拉取下来，这个时候遇到标题中的报错: &lt;code&gt;error refusing to merge unrelated histories&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="二修复"&gt;二、修复&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在本地仓库中执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git pull origin 你的远程仓库名称 --allow-unrelated-histories
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个命令执行完毕之后，git log 中正常出现了 origin 的标识。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来进行正常的 git 操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="三为什么会出现这样的报错"&gt;三、为什么会出现这样的报错?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;我的本地分支是一个测试分支，保留着未修改的原始 commit 信息&lt;/li&gt;
&lt;li&gt;远程的分支 commit 信息因为一些信息的变更，全部重新生成了 commit hash id ，虽然 commit message
还是原来的信息，但是 commit id 已经变更&lt;/li&gt;
&lt;li&gt;所以这两个分支虽然表面看起来一样，那些 git 提交历史一样，但是它们并没有共同的祖先，所以报错不相关。&lt;/li&gt;
&lt;li&gt;很容易的验证：查看第一个提交，内容虽然一样，但是 commit id 是不同的。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Spring 循环依赖（两个 bean 之间） - 基于构造器</title><link>https://ongoingblog.org/2025/05/2025-05-14-spring-circular-dependency-constructor/</link><pubDate>Wed, 14 May 2025 19:26:07 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-14-spring-circular-dependency-constructor/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;基于构造器的循环依赖。&lt;/p&gt;
&lt;h3 id="二流程图"&gt;二、流程图&lt;/h3&gt;
&lt;img src="process.png" alt=""&gt;&lt;img src="code_debug.png" alt=""&gt;&lt;h3 id="三测试程序"&gt;三、测试程序&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; com.ongoing.demo.circular_dependency.constructor;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; org.springframework.context.annotation.AnnotationConfigApplicationContext;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ApplicationDemo&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(String&lt;span style="color:#f92672"&gt;[]&lt;/span&gt; args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; AnnotationConfigApplicationContext applicationContext &lt;span style="color:#f92672"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; AnnotationConfigApplicationContext(&lt;span style="color:#e6db74"&gt;&amp;#34;com.ongoing.demo.circular_dependency.constructor&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; com.ongoing.demo.circular_dependency.construct;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@Component&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Cat&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Cat&lt;/span&gt;(Person person) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; com.ongoing.demo.circular_dependency.construct;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@Component&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Person&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Person&lt;/span&gt;(Cat cat) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用运行结果&lt;/p&gt;
&lt;img src="exec_result.png" alt=""&gt;&lt;h3 id="四原因"&gt;四、原因&lt;/h3&gt;
&lt;p&gt;先来看下&lt;code&gt;org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean&lt;/code&gt;的主要流程&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 1、创建新实例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;instanceWrapper &lt;span style="color:#f92672"&gt;=&lt;/span&gt; createBeanInstance(beanName, mbd, args);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 2、添加单例工厂到第三级缓存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;addSingletonFactory(beanName, () &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt; getEarlyBeanReference(beanName, mbd, bean));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 3、属性赋值、依赖注入。完成 bean 的完整创建&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;populateBean(beanName, mbd, instanceWrapper);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于构造器注入是在第一步发生的。
这里：&lt;/p&gt;</description></item><item><title>Spring 循环依赖（两个 bean 之间） - 基于@Autowired</title><link>https://ongoingblog.org/2025/05/2025-05-14-spring-circular-dependency/</link><pubDate>Wed, 14 May 2025 13:53:58 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-14-spring-circular-dependency/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;img src="img.png" alt=""&gt;&lt;p&gt;Spring 循环依赖。&lt;/p&gt;
&lt;p&gt;多 debug 几遍，孰能生巧，越来越快。&lt;/p&gt;
&lt;h3 id="二流程图"&gt;二、流程图&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/05/2025-05-14-spring-circular-dependency/spring_process-cat_person.png"
 data-pswp-width="1638"
 data-pswp-height="1276"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/05/2025-05-14-spring-circular-dependency/spring_process-cat_person.png"
 alt="循环依赖流程图"
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 &lt;figcaption style="text-align: center;"&gt;循环依赖流程图&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;解决循环依赖的关键就在于 singletonFactories 这个第三级缓存。它存放的是半成品的 bean，未进行属性赋值和依赖注入的 bean。&lt;/p&gt;
&lt;h3 id="三测试程序"&gt;三、测试程序&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; com.ongoing.demo.circular_dependency.autowired;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; org.springframework.context.annotation.AnnotationConfigApplicationContext;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * @description 测试循环依赖 基于注解类型的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ApplicationDemo&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(String&lt;span style="color:#f92672"&gt;[]&lt;/span&gt; args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; AnnotationConfigApplicationContext applicationContext &lt;span style="color:#f92672"&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; AnnotationConfigApplicationContext(&lt;span style="color:#e6db74"&gt;&amp;#34;com.ongoing.demo.circular_dependency.autowired&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; com.ongoing.demo.circular_dependency.autowired;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@Component&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Cat&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Autowired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Person person;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; com.ongoing.demo.circular_dependency.autowired;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; org.springframework.stereotype.Component;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@Component&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Person&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Autowired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Cat cat;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="四注意"&gt;四、注意&lt;/h3&gt;
&lt;p&gt;Spring 只解决单例作用域下的属性注入循环依赖，构造器注入和原型作用域的循环依赖无法自动解决，会抛出异常。&lt;/p&gt;</description></item><item><title>bash shell 的 here document</title><link>https://ongoingblog.org/2025/05/2025-05-11-shell-here-document/</link><pubDate>Sun, 11 May 2025 18:20:28 +0800</pubDate><guid>https://ongoingblog.org/2025/05/2025-05-11-shell-here-document/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;今天用 cursor 优化了下我之前写的博客创建脚本。经过它处理之后，我发现有一处标识，我之前没有见过&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat &amp;gt; file &lt;span style="color:#e6db74"&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;xxx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类似这种，具体的代码如下图所示
&lt;img src="result.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;这段代码的主要功能是：每次新建博客 markdown 文件后，自动把 hugo 对应的表头文件信息给写入进去，因为这种表头信息都是标准化的。&lt;/p&gt;
&lt;h3 id="二使用-echo-和使用-here-document-的区别"&gt;二、使用 echo 和使用 here document 的区别&lt;/h3&gt;
&lt;h4 id="优化前"&gt;优化前&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;使用 echo&lt;/li&gt;
&lt;li&gt;使用字符串&lt;/li&gt;
&lt;li&gt;针对一些符号（如引号）还需要去做转义处理&lt;/li&gt;
&lt;li&gt;换行不好处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="优化后"&gt;优化后&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不需要使用字符串&lt;/li&gt;
&lt;li&gt;不需要做转义处理&lt;/li&gt;
&lt;li&gt;换行更好处理&lt;/li&gt;
&lt;li&gt;只需要用一个新的 here doc 的标识&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="三here-document"&gt;三、Here Document&lt;/h3&gt;
&lt;p&gt;shell 中称上面那种做法叫作 here document。可以很方便地处理多行文本。&lt;/p&gt;
&lt;p&gt;一个例子：把下列内容写入文件中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;AAA
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;BBB
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bash 脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat &amp;gt; file &lt;span style="color:#e6db74"&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;AAA
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;BBB
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>IOC容器的文件扫描顺序</title><link>https://ongoingblog.org/2025/05/ioc-container-init-sequence/</link><pubDate>Fri, 09 May 2025 10:43:08 +0800</pubDate><guid>https://ongoingblog.org/2025/05/ioc-container-init-sequence/</guid><description>&lt;p&gt;先说下最终形成的顺序：按文件名称（例如&lt;code&gt;cat.class&lt;/code&gt;）进行升序排序的。&lt;/p&gt;
&lt;p&gt;源码入口位置：&lt;code&gt;org.springframework.context.annotation.AnnotationConfigApplicationContext#scan&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;代码逻辑








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/05/ioc-container-init-sequence/scan_process.png"
 data-pswp-width="928"
 data-pswp-height="5419"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/05/ioc-container-init-sequence/scan_process.png"
 alt="扫描顺序图"
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 &lt;figcaption style="text-align: center;"&gt;扫描顺序图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;</description></item><item><title>Idea debug 堆栈窗口中的符号`&lt;init&gt;`</title><link>https://ongoingblog.org/2025/05/idea-debug-stack-init/</link><pubDate>Thu, 08 May 2025 15:16:40 +0800</pubDate><guid>https://ongoingblog.org/2025/05/idea-debug-stack-init/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;img src="debug_init.png" alt=""&gt;&lt;p&gt;在 debug 时发现 IDEA 中 debug 堆栈中有一个符号&lt;code&gt;&amp;lt;init&amp;gt;&lt;/code&gt;，我不知道这是代表的什么意思。
点进去看涉及的是类中的构造方法代码。&lt;/p&gt;
&lt;h3 id="二init代表的是什么"&gt;二、&lt;code&gt;&amp;lt;init&amp;gt;&lt;/code&gt;代表的是什么？&lt;/h3&gt;
&lt;p&gt;在 IDEA 的调试堆栈中，带有&lt;code&gt;&amp;lt;init&amp;gt;&lt;/code&gt;的记录表示对象的构造函数或者实例初始化块，表示对象初始化逻辑。&lt;/p&gt;
&lt;h3 id="三示例代码"&gt;三、示例代码&lt;/h3&gt;
&lt;p&gt;如下代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DebugInitDemo&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;初始化代码块&amp;#34;&lt;/span&gt;); &lt;span style="color:#75715e"&gt;// 这里断点&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DebugInitDemo&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;构造函数&amp;#34;&lt;/span&gt;); &lt;span style="color:#75715e"&gt;// 这里断点&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(String&lt;span style="color:#f92672"&gt;[]&lt;/span&gt; args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; DebugInitDemo();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;debug 模式启动，查看调试堆栈。&lt;/p&gt;
&lt;p&gt;初始化代码块涉及的堆栈信息
&lt;img src="init_block.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;构造函数涉及的堆栈信息
&lt;img src="constructor.png" alt=""&gt;&lt;/p&gt;</description></item><item><title>流程图工具 draw.io 默认字体大小如何调整</title><link>https://ongoingblog.org/2025/05/drwoio-modify-default-font-size/</link><pubDate>Thu, 08 May 2025 10:42:35 +0800</pubDate><guid>https://ongoingblog.org/2025/05/drwoio-modify-default-font-size/</guid><description>&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#一背景"&gt;一、背景&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#二步骤"&gt;二、步骤&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#三甬道图"&gt;三、甬道图&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;想要调整下流程图工具 draw.io 的默认字体大小，因为每次新开版面，字体都很小。&lt;/p&gt;</description></item><item><title>Vim 的一些快捷操作</title><link>https://ongoingblog.org/2025/05/vim-remove-over-two-blankline/</link><pubDate>Wed, 07 May 2025 11:18:29 +0800</pubDate><guid>https://ongoingblog.org/2025/05/vim-remove-over-two-blankline/</guid><description>&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#vim-中将多个连续空行合并为单个空行"&gt;Vim 中将多个连续空行合并为单个空行&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#vim-将连续行各行之间插入空行"&gt;vim 将连续行，各行之间插入空行&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;h3 id="vim-中将多个连续空行合并为单个空行"&gt;Vim 中将多个连续空行合并为单个空行&lt;/h3&gt;
&lt;p&gt;询问的 deepseek，给的答案如下，测试正常&lt;/p&gt;</description></item><item><title>AP隔离</title><link>https://ongoingblog.org/2025/05/what-is-ap-isolation/</link><pubDate>Sat, 03 May 2025 19:54:06 +0800</pubDate><guid>https://ongoingblog.org/2025/05/what-is-ap-isolation/</guid><description>&lt;h3 id="背景"&gt;背景&lt;/h3&gt;
&lt;p&gt;ap: access point&lt;/p&gt;
&lt;p&gt;一种路由模式。
开启之后，各个客户端之间不能相互通讯，只能访问互联网。lan用户之间不能彼此发现，增加安全性。&lt;/p&gt;
&lt;p&gt;但是如果你没有路由器的控制权限的话，就不能使用AP模式了（例如路由器是房东的，你拿不到修改的权限）&lt;/p&gt;
&lt;h3 id="使用场景"&gt;使用场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;公共场所的无线网络&lt;/li&gt;
&lt;li&gt;合租网络：防止别人窥探你的设备&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>less and xxless</title><link>https://ongoingblog.org/2025/04/less-and-xxless/</link><pubDate>Thu, 24 Apr 2025 23:07:52 +0800</pubDate><guid>https://ongoingblog.org/2025/04/less-and-xxless/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;之前看源码时遇到一个单词&lt;code&gt;headless&lt;/code&gt;，表示应用的无头模式，含义是没有显示器或者其他外设也可以正常工作。还遇到一个单词是&lt;code&gt;serverless &lt;/code&gt;，翻译成中文是无服务器。&lt;/p&gt;
&lt;p&gt;不知道是不是遇到这样带有-less 后缀的单词比较少的原因，并且对于 less 这个单词又很熟悉，形成肌肉记忆的那种，比较级，少的意思。
less more 一起经常背，所以遇到 headless, serverless，第一时间是把“少”给带入进去。&lt;/p&gt;
&lt;p&gt;但是这样理解其实不太对，因为翻译成“头少”、“少头”，“服务器少”、“少服务器”不太对。
就去网络上搜索了下这两个单词的区别，这里做一下整理。&lt;/p&gt;
&lt;h3 id="二区别"&gt;二、区别&lt;/h3&gt;
&lt;p&gt;-less 要翻译成“无”的含义。
例如 xxLess: 无 xx&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;less&lt;/th&gt;
 &lt;th&gt;-less&lt;/th&gt;
 &lt;th&gt;备注&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;强调量的减少&lt;/td&gt;
 &lt;td&gt;强调质的缺失&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;less time&lt;/td&gt;
 &lt;td&gt;timeless&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;less care&lt;/td&gt;
 &lt;td&gt;careless&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;wireless 无线&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;endless 无尽&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;harmless 无害&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;useless&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;starless&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;waterless 无水&lt;/td&gt;
 &lt;td&gt;the desert is waterless.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;windowless 无窗&lt;/td&gt;
 &lt;td&gt;the room is windowless.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;stateless 无状态&lt;/td&gt;
 &lt;td&gt;http 无状态协议&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;pointless = meaningless&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;doubtless = without doubt&lt;/td&gt;
 &lt;td&gt;He is doubtless the best person for the job.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;seamless = no seam 无缝&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;td&gt;baseless = groundless = without foundation&lt;/td&gt;
 &lt;td&gt;无依据的&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="三后续"&gt;三、后续&lt;/h3&gt;
&lt;p&gt;遇到不认识的单词，先猜测一下，但是实际使用的时候还是看一下对应的英文解释之后，和自己的猜测做一个对照。&lt;/p&gt;</description></item><item><title>Git修改已提交记录的邮件地址</title><link>https://ongoingblog.org/2025/04/modify-email-address-of-your-committed-record/</link><pubDate>Thu, 24 Apr 2025 19:54:28 +0800</pubDate><guid>https://ongoingblog.org/2025/04/modify-email-address-of-your-committed-record/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;仓库中提交代码时发现邮件地址写错了，但是已经提交了，需要修改错误的邮件地址。&lt;/p&gt;
&lt;h3 id="二步骤"&gt;二、步骤&lt;/h3&gt;
&lt;h4 id="安装-git-filter-repo"&gt;安装 git-filter-repo&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install git-filter-repo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="修改邮件地址"&gt;修改邮件地址&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git filter-repo --email-callback &lt;span style="color:#e6db74"&gt;&amp;#39;return email.replace(b&amp;#34;旧邮件地址&amp;#34;, b&amp;#34;新邮件地址&amp;#34;)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="三注意"&gt;三、注意&lt;/h3&gt;
&lt;p&gt;原先的commit id会被覆盖掉，生成新的 commit id记录，可自行查看 git commit 记录的 hash id 和原来是不一样的了。&lt;/p&gt;</description></item><item><title>dependentBeanMap and dependenciesForBeanMap</title><link>https://ongoingblog.org/2025/04/dependentbeanmap-and-dependenciesforbeanmap/</link><pubDate>Wed, 23 Apr 2025 11:08:31 +0800</pubDate><guid>https://ongoingblog.org/2025/04/dependentbeanmap-and-dependenciesforbeanmap/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;org.springframework.beans.factory.support.DefaultSingletonBeanRegistry&lt;/code&gt;看到这两个变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dependentBeanMap&lt;/code&gt;: 本bean是其他bean的外部依赖，本bean是底层，别的bean需要本bean才能活下去。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependenciesForBeanMap&lt;/code&gt;: 外部依赖，本bean依赖于外部依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="二结构"&gt;二、结构&lt;/h3&gt;
&lt;p&gt;依赖关系如下图所示&lt;/p&gt;
&lt;img src="dependent_bean_and_dependency_bean.png" alt=""&gt;&lt;h4 id="dependentbeanmap反向依赖-"&gt;dependentBeanMap(反向依赖 &amp;lt;&amp;ndash;)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;存放的是&lt;code&gt;dependent bean&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;String, Set&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;String&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&lt;/span&gt; dependentBeanMap &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;beanA&amp;#34;&lt;/span&gt;: &lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;beanB&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;beanC&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// beanB, beanC 依赖 beanA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;beanB&amp;#34;&lt;/span&gt;: &lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;beanD&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#75715e"&gt;// beanD 依赖 beanB&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 bean 被销毁时，通过 dependentBeanMap 找到依赖它的所有 bean，触发这些 bean 的销毁。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="dependenciesforbeanmap正向依赖-"&gt;dependenciesForBeanMap(正向依赖 &amp;ndash;&amp;gt;)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;存放的是&lt;code&gt;dependency bean&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Map&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;String, Set&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;String&lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&lt;/span&gt; dependenciesForBeanMap &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;beanB&amp;#34;&lt;/span&gt;: &lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;beanA&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// beanB 依赖 beanA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;beanC&amp;#34;&lt;/span&gt;: &lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;beanA&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// beanC 依赖 beanA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;beanD&amp;#34;&lt;/span&gt;: &lt;span style="color:#f92672"&gt;[&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;beanB&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#75715e"&gt;// beanD 依赖 beanB&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化 bean 阶段，根据这个 map 确认依赖是否已经就绪，因为需要确保依赖先就绪，再初始化本 bean&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="三dependent-bean"&gt;三、dependent bean&lt;/h3&gt;
&lt;p&gt;那么&lt;code&gt;dependent bean&lt;/code&gt;的中文释义是如何翻译的呢？&lt;/p&gt;
&lt;p&gt;依赖者。就是依赖某个bean的bean。&lt;/p&gt;
&lt;p&gt;dependency: 被依赖者。
例如项目pom文件中那些外部的依赖包，它们都是被依赖者，本项目依赖外部的那些依赖，它们不会依赖于本项目。&lt;/p&gt;</description></item><item><title>Class.isAssignableFrom()</title><link>https://ongoingblog.org/2025/04/class-isassignablefrom/</link><pubDate>Thu, 17 Apr 2025 16:06:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/class-isassignablefrom/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;在 spring 加载配置类，处理注解@Import&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;时，针对 candidate 做了比较，比较时就使用了&lt;code&gt;Class&lt;/code&gt;中的&lt;code&gt;isAssignableFrom()&lt;/code&gt;方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (SourceClass candidate : importCandidates){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(candidate.&lt;span style="color:#a6e22e"&gt;isAssignable&lt;/span&gt;(ImportSelector .&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;)){}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(candidate.&lt;span style="color:#a6e22e"&gt;isAssignable&lt;/span&gt;(ImportBeanDefinitionRegistrar .&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;)){}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="二使用"&gt;二、使用&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;native&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;boolean&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;isAssignableFrom&lt;/span&gt;(Class&lt;span style="color:#f92672"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; cls);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cls&lt;/code&gt;是待检查的类&lt;/li&gt;
&lt;li&gt;如果调用方法的类是 &lt;code&gt;cls&lt;/code&gt; 的父类、实现的接口，或者与 &lt;code&gt;cls&lt;/code&gt; 本身相同，返回 true.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;关系&lt;/th&gt;
 &lt;th&gt;备注&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;类继承关系&lt;/td&gt;
 &lt;td&gt;父类.isAssignableFrom(子类) → true&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;接口实现关系&lt;/td&gt;
 &lt;td&gt;接口.isAssignableFrom(实现类) → true&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;自身比较&lt;/td&gt;
 &lt;td&gt;A.isAssignableFrom(A) → true&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;原始类型与包装类&lt;/td&gt;
 &lt;td&gt;原始类型（如 int）和其包装类（如 Integer）不兼容&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="三测试代码"&gt;三、测试代码&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AssignFromTest&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(String&lt;span style="color:#f92672"&gt;[]&lt;/span&gt; args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 接口实现&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(ArrayList.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;isAssignableFrom&lt;/span&gt;(List.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(List.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;isAssignableFrom&lt;/span&gt;(ArrayList.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 自身比较 true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(Client.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;isAssignableFrom&lt;/span&gt;(Client.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 继承&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(Number.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;isAssignableFrom&lt;/span&gt;(Integer.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(Integer.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;isAssignableFrom&lt;/span&gt;(Number.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 原始类型和包装类型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;isAssignableFrom&lt;/span&gt;(Integer.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(Integer.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;isAssignableFrom&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 数组&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(Object&lt;span style="color:#f92672"&gt;[]&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;isAssignableFrom&lt;/span&gt;(String&lt;span style="color:#f92672"&gt;[]&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(String&lt;span style="color:#f92672"&gt;[]&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;isAssignableFrom&lt;/span&gt;(Object.&lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果&lt;/p&gt;</description></item><item><title>当 Rime 在 IDEA 社区版中切换时，默认是英文</title><link>https://ongoingblog.org/2025/04/rime-in-ideace-default-to-ascii/</link><pubDate>Thu, 17 Apr 2025 09:43:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/rime-in-ideace-default-to-ascii/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;需求：当前电脑界面打开的是 IDEA 社区版，当我把输入法切换到 Rime 时，每次初始都是中文，我需要初始是英文。&lt;/p&gt;
&lt;h3 id="二设置步骤"&gt;二、设置步骤&lt;/h3&gt;
&lt;p&gt;电脑：Macos&lt;/p&gt;
&lt;p&gt;输入法：Rime squirrel&lt;/p&gt;
&lt;h4 id="一查看-idea-社区版-infoplist-信息"&gt;（一）查看 IDEA 社区版 info.plist 信息&lt;/h4&gt;
&lt;p&gt;方法一：直接进行查看&lt;/p&gt;
&lt;p&gt;我的这个文件位于：&lt;code&gt;/Applications/IntelliJ IDEA CE.app/Contents&lt;/code&gt;下&lt;/p&gt;
&lt;img src="info_plist.png" alt=""&gt;&lt;p&gt;把红框中 com 的这一串字符串复制出来，我们后面要用到。&lt;/p&gt;
&lt;p&gt;方法二：在命令行中执行命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mdls -name kMDItemCFBundleIdentifier Anki.app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;







&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="https://ongoingblog.org/2025/04/rime-in-ideace-default-to-ascii/anki_bundle_id.png"
 data-pswp-width="449"
 data-pswp-height="36"
 target="_blank"&gt;
 &lt;img src="https://ongoingblog.org/2025/04/rime-in-ideace-default-to-ascii/anki_bundle_id.png"
 alt="查看 anki bundle id"
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 &lt;figcaption style="text-align: center;"&gt;查看 anki bundle id&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id="二打开-rime-用户文件夹打开squirrelcustomyaml配置如下设置"&gt;（二）打开 rime 用户文件夹，打开&lt;code&gt;squirrel.custom.yaml&lt;/code&gt;，配置如下设置&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;patch&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;app_options&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;com.jetbrains.intellij.ce&lt;/span&gt;: &lt;span style="color:#75715e"&gt;# 设置 IDEA 社区版初始为英文模式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ascii_mode&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="三参考"&gt;三、参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rime/home/wiki/CustomizationGuide#%E5%9C%A8%E7%89%B9%E5%AE%9A%E7%A8%8B%E5%BA%8F%E8%A3%8F%E9%97%9C%E9%96%89%E4%B8%AD%E6%96%87%E8%BC%B8%E5%85%A5"target="_blank" rel="noopener noreferrer"&gt;在特定程序裏關閉中文輸入&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>网易云音乐歌曲同步到苹果音乐</title><link>https://ongoingblog.org/2025/04/neteasemusic-to-applemusic/</link><pubDate>Wed, 16 Apr 2025 08:14:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/neteasemusic-to-applemusic/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;由于一些音乐软件里广告太多，不限于&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次打开软件，都有一个广告界面，并且有时候不去触碰界面，也会跳转到一些购物软件中&lt;/li&gt;
&lt;li&gt;对于一些歌曲需要试听&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;发现苹果音乐的优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入无广告界面&lt;/li&gt;
&lt;li&gt;界面简洁，就是给你用来听歌的，连评论界面也没有&lt;/li&gt;
&lt;li&gt;有杜比音效，音源好&lt;/li&gt;
&lt;li&gt;每月会员消费还好，我这次有活动，3 个月只要 11 元。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于一些个人的偏好，我选择以后要多在苹果音乐里了，不想再看到什么花里胡哨的广告和控制不了的跳转。
因此搜索了如何同步歌曲歌单的步骤。&lt;/p&gt;
&lt;h3 id="二步骤"&gt;二、步骤&lt;/h3&gt;
&lt;h4 id="1-根据歌单链接获取歌曲信息"&gt;1. 根据歌单链接获取歌曲信息&lt;/h4&gt;
&lt;p&gt;工具：&lt;a href="https://music.unmeta.cn/"target="_blank" rel="noopener noreferrer"&gt;https://music.unmeta.cn/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="2-根据获取的歌曲信息将对应的歌曲导入到苹果音乐中"&gt;2. 根据获取的歌曲信息将对应的歌曲导入到苹果音乐中&lt;/h4&gt;
&lt;p&gt;工具：&lt;a href="https://www.tunemymusic.com/zh-CN"target="_blank" rel="noopener noreferrer"&gt;tunemymusic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="tunemymusic.png" alt=""&gt;
对于同步不成功的，这个平台也会把不成功的记录给显示出来。&lt;/p&gt;
&lt;p&gt;注意：在进行实际的同步时需要自己的苹果音乐对这个平台进行授权，授权之后也可以把这个申请的授权给删除。&lt;/p&gt;</description></item><item><title>Junit</title><link>https://ongoingblog.org/2025/04/junit/</link><pubDate>Tue, 15 Apr 2025 16:30:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/junit/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;Junit的使用。&lt;/p&gt;
&lt;h3 id="二一些注解"&gt;二、一些注解&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;注解&lt;/th&gt;
 &lt;th&gt;作用范围&lt;/th&gt;
 &lt;th&gt;典型用途&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;@BeforeEach&lt;/td&gt;
 &lt;td&gt;每个测试方法前执行&lt;/td&gt;
 &lt;td&gt;初始化测试环境（如创建对象）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;@AfterEach&lt;/td&gt;
 &lt;td&gt;每个测试方法后执行&lt;/td&gt;
 &lt;td&gt;清理资源或重置状态&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>Java 关键字：transient</title><link>https://ongoingblog.org/2025/04/transient/</link><pubDate>Tue, 15 Apr 2025 15:10:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/transient/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;Java 序列化机制中的排除标记，用于控制对象的持久化范围，确保敏感数据或临时数据不被保存或传输。&lt;/p&gt;
&lt;h3 id="二作用"&gt;二、作用&lt;/h3&gt;
&lt;p&gt;序列化过程中，用 transient 标记的字段会被排除在序列化过程之外，反序列化时该字段的值会被设为默认值（对象为 null, int 类型字段为 0）。&lt;/p&gt;
&lt;h3 id="三使用场景"&gt;三、使用场景&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;敏感数据保护：密码、密钥不应被传输&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;User&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;implements&lt;/span&gt; Serializable {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; String username;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;transient&lt;/span&gt; String password; &lt;span style="color:#75715e"&gt;// 序列化时忽略此字段&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免保存临时状态：例如缓存数据或中间计算结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DataProcessor&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;implements&lt;/span&gt; Serializable {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; rawData;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;transient&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; cachedResult; &lt;span style="color:#75715e"&gt;// 无需保存临时结果&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="四字段添加了-transient-和不加的对比"&gt;四、字段添加了 transient 和不加的对比&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;没有加 transient
&lt;img src="without_transient.png" alt=""&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加了 transient
&lt;img src="with_transient.png" alt=""&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>回调 Callback</title><link>https://ongoingblog.org/2025/04/java-callback/</link><pubDate>Thu, 10 Apr 2025 16:25:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/java-callback/</guid><description>&lt;h3 id="一什么是回调"&gt;一、什么是回调？&lt;/h3&gt;
&lt;img src="callback.png" alt=""&gt;&lt;p&gt;如上图所示&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;client 端调用 server 端&lt;/li&gt;
&lt;li&gt;在特定条件满足时，又由 server 端反向调用 client 端&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;25.07.08 Tue&lt;/p&gt;
&lt;p&gt;补：前几天看电影迷失东京，斯嘉丽和她在美国的朋友打电话结束的时候说“call me back”，我想着这不也是回调嘛，你调用的模块，在某个条件来临时会来调用你。&lt;/p&gt;
&lt;h3 id="二回调使用的场景"&gt;二、回调使用的场景&lt;/h3&gt;
&lt;p&gt;观察者模式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;观察者实现回调接口&lt;/li&gt;
&lt;li&gt;被观察者状态发生变更时触发回调，观察者们接收对应的状态变更消息&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="三好处"&gt;三、好处&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;调用方和被调用方分离，只通过接口进行交互&lt;/li&gt;
&lt;li&gt;被调用方可以定义逻辑顺序，不管具体实现，只需要在约定的时机触发回调&lt;/li&gt;
&lt;li&gt;至于接口方法逻辑如何被实现，由调用方自由进行控制&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="四代码例子"&gt;四、代码例子&lt;/h3&gt;
&lt;p&gt;接口定义&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * @description 回调接口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Callback&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;callbackMethod&lt;/span&gt;(String message);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用方实现接口&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * @description 调用方
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Client&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;implements&lt;/span&gt; Callback {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;callbackMethod&lt;/span&gt;(String message) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;client 执行回调方法：&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; message);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;传递对象、触发回调&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * @description 被调用方
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; Callback callback;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 注册 callback
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * @param callback
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;registCallback&lt;/span&gt;(Callback callback) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;callback&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; callback;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 调用 callback
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;triggerCallback&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;server 触发 callback!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (callback &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; callback.&lt;span style="color:#a6e22e"&gt;callbackMethod&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;事件已经触发到了！&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证执行&lt;/p&gt;</description></item><item><title>LinkedHashMap使用</title><link>https://ongoingblog.org/2025/04/linkedhashmap/</link><pubDate>Wed, 09 Apr 2025 09:45:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/linkedhashmap/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;可以用LinkedHashMap去实现LRUCache，这里说一下它的用法。&lt;/p&gt;
&lt;h3 id="二原理"&gt;二、原理&lt;/h3&gt;
&lt;p&gt;使用双向链表来维护遍历顺序。&lt;/p&gt;
&lt;h3 id="三应用场景"&gt;三、应用场景&lt;/h3&gt;
&lt;p&gt;基于LRU算法的缓存。&lt;/p&gt;
&lt;h3 id="四实现"&gt;四、实现&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;"&gt;&lt;tr&gt;&lt;td style="vertical-align:top;padding:0;margin:0;border:0;"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 1
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 2
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 3
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 4
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 5
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 6
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 7
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 8
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 9
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;10
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;11
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;12
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;13
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;14
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;15
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;16
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;17
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;18
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;19
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;20
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;21
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;22
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;23
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;24
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;25
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;26
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;27
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;28
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;29
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;30
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;31
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;32
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;33
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;34
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;35
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;36
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; java.util.LinkedHashMap;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; java.util.Map;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * @description 使用LinkedHashMap实现LRUCache
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * @date 2025-04-09
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;LRUCache&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;extends&lt;/span&gt; LinkedHashMap&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Integer, Integer&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 容量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; capacity;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 初始化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;LRUCache&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; capacity) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 注意：accessOrder必须设置为true,才会有LRU的特性。否则，只会维护插入顺序&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;super&lt;/span&gt;(capacity, 0.&lt;span style="color:#a6e22e"&gt;75f&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;); &lt;span style="color:#75715e"&gt;// loadFactor是float类型的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;capacity&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; capacity;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 根据key获取value。存在返回，不存在返回-1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; key) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;super&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;getOrDefault&lt;/span&gt;(key, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;1);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 向缓存中插入(key, value)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;put&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; key, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; value) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;super&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;put&lt;/span&gt;(key, value);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 是否移除旧结点逻辑(双向链表的头部结点)，触发条件。注意：此为实现固定大小的缓存的关键&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// it allows the map to reduce memory consumption(内存消耗) by deleting &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// stale(不新鲜的) entries.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;protected&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;boolean&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;removeEldestEntry&lt;/span&gt;(Map.&lt;span style="color:#a6e22e"&gt;Entry&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Integer, Integer&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; eldest) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;super&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;() &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; capacity;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;测试程序&lt;/p&gt;</description></item><item><title>设计 LRU</title><link>https://ongoingblog.org/2025/04/design-lru-algo/</link><pubDate>Tue, 08 Apr 2025 19:00:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/design-lru-algo/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;含义：Least Recently Used, 最近最少使用。&lt;/li&gt;
&lt;li&gt;作用：缓存空间不足时，决定哪些数据被移除。&lt;/li&gt;
&lt;li&gt;场景
&lt;ul&gt;
&lt;li&gt;内存管理，页面置换算法&lt;/li&gt;
&lt;li&gt;一种缓存淘汰策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="二原理"&gt;二、原理&lt;/h3&gt;
&lt;p&gt;局部性原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间局部性：被引用过一次的存储器位置在未来会被多次引用（通常在循环中）。&lt;/li&gt;
&lt;li&gt;空间局部性：如果一个存储器的位置被引用，那么将来他附近的位置也会被引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="三实现"&gt;三、实现&lt;/h3&gt;
&lt;p&gt;三个操作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查找 get
当某个元素被访问到，会把它移动到链表的表头&lt;/li&gt;
&lt;li&gt;插入 put
存在结点，更新
不存在，插入到表头。如果空间不足，还需要淘汰掉末尾的结点&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="单链表实现"&gt;单链表实现&lt;/h4&gt;
&lt;h4 id="双链表实现"&gt;双链表实现&lt;/h4&gt;
&lt;p&gt;双向链表 + 哈希表&lt;/p&gt;
&lt;p&gt;双向链表：最近使用的放在链表的前端，反之则是在链表的后端。&lt;/p&gt;
&lt;h4 id="linkedhashmap-实现"&gt;&lt;a href="https://ongoingblog.org/2025/04/linkedhashmap/"&gt;LinkedHashMap 实现&lt;/a&gt;&lt;/h4&gt;</description></item><item><title>Tmux 移动窗口</title><link>https://ongoingblog.org/2025/04/tmux-swap-window/</link><pubDate>Tue, 08 Apr 2025 09:21:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/tmux-swap-window/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;Tmux 移动窗口方便重新编排我的工作空间。&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;场景&lt;/th&gt;
 &lt;th&gt;命令&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;列出会话&lt;/td&gt;
 &lt;td&gt;tmux ls&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;关闭会话&lt;/td&gt;
 &lt;td&gt;tmux kill-session -t 会话名&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;加载会话&lt;/td&gt;
 &lt;td&gt;tmux attach -t 会话名&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="二一些操作"&gt;二、一些操作&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;我想要互换窗口，例如将 4 窗口换到 2 窗口
&lt;img src="img_example.png" alt=""&gt;
&lt;img src="step01.png" alt=""&gt;
&lt;img src="step02.png" alt=""&gt;
&lt;img src="step03.png" alt=""&gt;
&lt;img src="step04.png" alt=""&gt;
&lt;img src="step05.png" alt=""&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;swap-window -s &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; -t &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我想要保存当前会话，并且在使用的时候进行恢复&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存：&lt;code&gt;prefix + ctrl + s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;恢复：&lt;code&gt;prefix + ctrl + r&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭当前窗口：&lt;code&gt;prefix + &amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;img src="kill_current_windows.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 macos 上经常因为赋值粘贴导致当前的 tmux windows 死掉没有反应了&lt;/p&gt;
&lt;img src="kill_current_window.png" alt=""&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="三参考"&gt;三、参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cn.linux-terminal.com/?p=4265"target="_blank" rel="noopener noreferrer"&gt;在 Linux 中重新启动时保存和恢复 Tmux 环境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Headless Mode</title><link>https://ongoingblog.org/2025/04/java-headless-mode/</link><pubDate>Sun, 06 Apr 2025 14:47:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/java-headless-mode/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;第一次看到&lt;code&gt;headless&lt;/code&gt;这个词，先去搜索了下含义
&lt;img src="headless_meaning.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;叫作无头的，也就是说 java headless mode 翻译为中文就是 java 无头模式。&lt;/p&gt;
&lt;p&gt;依旧不懂这个名词的意思，虽然翻译过来了。&lt;/p&gt;
&lt;p&gt;继续搜索，网上的结果这样显示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java 无头模式（Headless Mode）是 Java 提供的一种特殊运行模式，允许在没有物理显示设备、键盘或鼠标的环境（如服务器、后台服务、命令行环境）中执行依赖于图形界面的操作。它通过虚拟化图形环境，支持部分图形功能（如生成图片、PDF、图表等），而无需实际显示器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;联系到这个用途我就可以理解了，就是类似后台执行的程序一样，不需要前台的一个展示界面。&lt;/p&gt;
&lt;h3 id="二java-headless-mode"&gt;二、Java Headless Mode&lt;/h3&gt;
&lt;p&gt;通过虚拟化一个“看不见的图形环境”（无头的图形环境），绕过对物理显示设备的依赖，但仍允许程序使用图形库的核心功能（如绘图、字体处理、图像生成）。&lt;/p&gt;
&lt;p&gt;在服务器等无图形设备的环境中，依然能利用图形库完成关键任务（如生成报表、处理图片），是后台自动化处理的利器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何配置&lt;code&gt;headless mode&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;System.&lt;span style="color:#a6e22e"&gt;setProperty&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;java.awt.headless&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;true&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="三类似场景"&gt;三、类似场景&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developer.chrome.google.cn/docs/chromium/headless?hl=zh-cn"target="_blank" rel="noopener noreferrer"&gt;Chrome 无头模式&lt;/a&gt;：谷歌浏览器的无界面模式，用于自动化测试。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;借助 Chrome 无头模式，您可以在无人值守的环境中运行浏览器，而无需任何可见的界面。从本质上讲，您无需 chrome 即可运行 Chrome。
&lt;img src="chrome_headful_and_headless_mode.png" alt=""&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="四参考"&gt;四、参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.oracle.com/technical-resources/articles/javase/headless.html"target="_blank" rel="noopener noreferrer"&gt;Using Headless Mode in the Java SE Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;遇到的一个产品支持的特性中有下面这样一条&lt;/li&gt;
&lt;/ul&gt;
&lt;img src="console_mode.png" alt=""&gt;</description></item><item><title>搭建 SpringBoot 源码阅读环境</title><link>https://ongoingblog.org/2025/04/build-spring-boot-source-code-environment/</link><pubDate>Sun, 06 Apr 2025 08:22:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/build-spring-boot-source-code-environment/</guid><description>&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#一背景"&gt;一、背景&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#二步骤"&gt;二、步骤&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#三框架前身-interface21-源码环境搭建"&gt;三、框架前身 interface21 源码环境搭建&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;springboot 的特点：&lt;/p&gt;</description></item><item><title>Debug 的经验</title><link>https://ongoingblog.org/2025/04/debug/</link><pubDate>Sat, 05 Apr 2025 18:34:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/debug/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;这里存放一些优化调试行为的点。&lt;/p&gt;
&lt;h3 id="二场景"&gt;二、场景&lt;/h3&gt;
&lt;h4 id="一"&gt;（一）&lt;/h4&gt;
&lt;p&gt;单元方法测试为了验证某个 assertNull(a), 可以在执行中直接 F2 修改原变量为 null，验证是否跑到。如果是整个服务范围的测试，建议从业务逻辑上考虑造出这样的数据。&lt;/p&gt;
&lt;h4 id="二条件断点语句"&gt;（二）条件断点语句&lt;/h4&gt;
&lt;p&gt;IDEA debug 查看当前 BeanPostProcessor 类型的变量 pp 是否为 InfrastructureAdvisorAutoProxyCreator，断点语句应该怎么写？&lt;/p&gt;
&lt;img src="problem.png" alt=""&gt;&lt;p&gt;条件断点表达式这样写：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pp.getClass() == org.springframework.aop.framework.autoproxy.InfrastructureAdvisorAutoProxyCreator.class&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="三给每个测试方法都起自定义名称"&gt;（三）给每个测试方法都起自定义名称&lt;/h4&gt;
&lt;p&gt;核心价值在于让测试报告自解释，使团队能快速理解测试目的，尤其在复杂业务场景中大幅提升维护效率。推荐为所有测试方法添加此注解以提升代码可读性。&lt;/p&gt;
&lt;img src="debug_test_display_name.png" alt=""&gt;&lt;h4 id="四强制跳过所有断点"&gt;（四）强制跳过所有断点&lt;/h4&gt;
&lt;img src="force_run_to_cursor.png" alt=""&gt;&lt;h4 id="五异步调试"&gt;（五）异步调试&lt;/h4&gt;
&lt;p&gt;尽量延长 main 线程的时长，在 main 方法体最后写上一句 sleep 语句，因为在测试时如果 main 线程 (非守护线程) 退出了，jvm 也会退出，这样的话就可能观察不到异步线程里的行为了。&lt;/p&gt;</description></item><item><title>百年后 - 泰戈尔</title><link>https://ongoingblog.org/2025/04/after-hundred-years/</link><pubDate>Sat, 05 Apr 2025 11:34:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/after-hundred-years/</guid><description>&lt;div style='height: 20px'&gt;&lt;/div&gt;
&lt;p&gt;百年后的今天，&lt;/p&gt;
&lt;p&gt;专心读我这首诗的你是谁？&lt;/p&gt;
&lt;p&gt;百年后的今天，&lt;/p&gt;
&lt;p&gt;我能否传寄给你，&lt;/p&gt;
&lt;p&gt;能否传寄给浸润在我深深爱意之中的你？&lt;/p&gt;
&lt;p&gt;这个春晨愉悦的轻触，&lt;/p&gt;
&lt;p&gt;花朵的芬芳，&lt;/p&gt;
&lt;p&gt;鸟儿的歌唱，&lt;/p&gt;
&lt;p&gt;今天那片鲜明色彩的光华？&lt;/p&gt;




&lt;div style='height: 20px'&gt;&lt;/div&gt;
&lt;p&gt;再一次地，&lt;/p&gt;
&lt;p&gt;敞开你向南的窗户，&lt;/p&gt;
&lt;p&gt;站在阳台上眺望远方的地平线。&lt;/p&gt;
&lt;p&gt;然后，深浸在幻想中&lt;/p&gt;
&lt;p&gt;想想那狂喜的欢乐。&lt;/p&gt;




&lt;div style='height: 20px'&gt;&lt;/div&gt;
&lt;p&gt;在百年之前，&lt;/p&gt;
&lt;p&gt;从遥远至乐的天堂倾泻而下，&lt;/p&gt;
&lt;p&gt;触摸这世界的心灵。&lt;/p&gt;
&lt;p&gt;想想青春少年的日子&lt;/p&gt;
&lt;p&gt;狂野，任性又自由！&lt;/p&gt;




&lt;div style='height: 20px'&gt;&lt;/div&gt;
&lt;p&gt;想想百年之前，&lt;/p&gt;
&lt;p&gt;在带着花粉芳香的南风里，&lt;/p&gt;
&lt;p&gt;鼓动忙碌的翅膀，&lt;/p&gt;
&lt;p&gt;用青春的色彩涂抹大地。&lt;/p&gt;
&lt;p&gt;再想想，他的心如何炽热，&lt;/p&gt;
&lt;p&gt;全神驰骋在诗歌里。&lt;/p&gt;
&lt;p&gt;百年前的早晨，&lt;/p&gt;
&lt;p&gt;那天一个诗人醒来，&lt;/p&gt;
&lt;p&gt;他千万的思绪像百花盛开，&lt;/p&gt;
&lt;p&gt;戴着爱的花环！&lt;/p&gt;




&lt;div style='height: 20px'&gt;&lt;/div&gt;
&lt;p&gt;百年后的今天，&lt;/p&gt;
&lt;p&gt;对你唱起诗歌的新诗人是谁？&lt;/p&gt;
&lt;p&gt;我将超越时光，&lt;/p&gt;
&lt;p&gt;传寄给他这春天欢乐的祝颂。&lt;/p&gt;
&lt;p&gt;百年后的今天，&lt;/p&gt;
&lt;p&gt;愿我的诗歌持续回荡，&lt;/p&gt;
&lt;p&gt;在你的春天里，&lt;/p&gt;
&lt;p&gt;在你的心跳里，&lt;/p&gt;
&lt;p&gt;在蜜蜂的低语里，&lt;/p&gt;
&lt;p&gt;在树叶的沙沙声里。&lt;/p&gt;</description></item><item><title>IDEA不识别moudle</title><link>https://ongoingblog.org/2025/04/idea-not-identify-module/</link><pubDate>Fri, 04 Apr 2025 20:47:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/idea-not-identify-module/</guid><description>&lt;h3 id="一idea中突然不识别我新建的module了"&gt;一、IDEA中突然不识别我新建的module了&lt;/h3&gt;
&lt;p&gt;显示如下图&lt;/p&gt;
&lt;img src="error_module.png" alt=""&gt;&lt;h3 id="二解决方案"&gt;二、解决方案&lt;/h3&gt;
&lt;p&gt;在网上搜索了下其他人遇到的，但是对我并不适用。&lt;/p&gt;
&lt;p&gt;索性直接新建了一个名为&lt;code&gt;my-test2&lt;/code&gt;的module，这次新建直接就是好的:
&lt;img src="good_module.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;为了避免下一次的问题出现，我想把这个样例先给commit下，发现有一个文件的变更，变更涉及到一句新增的代码:&lt;/p&gt;
&lt;p&gt;涉及文件settings.gradle&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;+ include &amp;#39;my-test2&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个文件新增了一句这个。&lt;/p&gt;
&lt;p&gt;我突然想起之前切换到源码的其他分支时，为了顺利切换，把新建my-test模块时涉及到的这个类似变更给扔到暂存里去了。&lt;/p&gt;
&lt;p&gt;我把my-test的变更恢复回来，module就能识别到了&lt;/p&gt;
&lt;img src="recovered_module.png" alt=""&gt;</description></item><item><title>JavaBean</title><link>https://ongoingblog.org/2025/04/javabean/</link><pubDate>Fri, 04 Apr 2025 19:00:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/javabean/</guid><description>&lt;h3 id="一什么是-javabean"&gt;一、什么是 JavaBean&lt;/h3&gt;
&lt;p&gt;遵守以下这些约定俗成规范的类就是 JavaBean:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是一个 public 类&lt;/li&gt;
&lt;li&gt;有一个 public 的无参构造函数&lt;/li&gt;
&lt;li&gt;所有的属性都是私有的，提供 public 的 getter/setter 方法&lt;/li&gt;
&lt;li&gt;如果希望能被持久化，需要实现&lt;a href="https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html"target="_blank" rel="noopener noreferrer"&gt;Serializable 接口&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="二例子"&gt;二、例子&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;"&gt;&lt;tr&gt;&lt;td style="vertical-align:top;padding:0;margin:0;border:0;"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 1
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 2
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 3
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 4
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 5
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 6
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 7
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 8
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 9
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;10
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;11
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;12
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;13
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;14
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;15
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;16
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;17
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;18
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;19
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;20
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;21
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;22
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;23
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;24
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;25
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;26
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;27
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;28
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;29
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;30
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;31
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;32
&lt;/span&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;33
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%"&gt;
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;@Entity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Employee&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;implements&lt;/span&gt; Serializable{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; id;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; String name; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; salary; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Employee&lt;/span&gt;() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Employee&lt;/span&gt;(String name, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; salary) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;salary&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; salary;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getId&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; id;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setId&lt;/span&gt;( &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; id ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; id;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; String &lt;span style="color:#a6e22e"&gt;getName&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setName&lt;/span&gt;( String name ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getSalary&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; salary;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setSalary&lt;/span&gt;( &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; salary ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;salary&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; salary;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="三pojoplain-old-java-object"&gt;三、POJO(Plain Old Java Object)&lt;/h3&gt;
&lt;p&gt;和 JavaBean 都是对象模型。&lt;/p&gt;</description></item><item><title>委托模式</title><link>https://ongoingblog.org/2025/04/delegation/</link><pubDate>Fri, 04 Apr 2025 12:00:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/delegation/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一种组合方法。强调组合优于继承，通过对象的协作来实现功能&lt;/li&gt;
&lt;li&gt;在委托方式下，两个对象处理一个请求，接受请求的对象将操作委托给它的代理者。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="二原理"&gt;二、原理&lt;/h3&gt;
&lt;p&gt;组成角色&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;委托者: 接受请求，派发任务&lt;/li&gt;
&lt;li&gt;委托接口: 定义实现方法&lt;/li&gt;
&lt;li&gt;具体委托对象：实际执行任务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我突然发现回调和委托逻辑很像。
回调是委托模式的一种应用场景。&lt;/p&gt;
&lt;h3 id="三与其他模式的区别"&gt;三、与其他模式的区别&lt;/h3&gt;
&lt;p&gt;委派和代理及装饰者模式不同
委派仅仅是将方法的执行工作移交给另一个对象&lt;/p&gt;
&lt;p&gt;代理可能在此做额外的处理
装饰者会在方法执行前后做增强。&lt;/p&gt;
&lt;h3 id="四例子"&gt;四、例子&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TaskHandler&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;handleTask&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Delegator&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; TaskHandler taskHandler;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setTaskHandler&lt;/span&gt;(TaskHandler taskHandler) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;taskHandler&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; taskHandler;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;executeTask&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (taskHandler &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; taskHandler.&lt;span style="color:#a6e22e"&gt;handleTask&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Delegator&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; TaskHandler taskHandler;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setTaskHandler&lt;/span&gt;(TaskHandler taskHandler) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;taskHandler&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; taskHandler;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;executeTask&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (taskHandler &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; taskHandler.&lt;span style="color:#a6e22e"&gt;handleTask&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DelegateTest&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(String&lt;span style="color:#f92672"&gt;[]&lt;/span&gt; args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Delegator delegator &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Delegator();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; delegator.&lt;span style="color:#a6e22e"&gt;setTaskHandler&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; ConcreteHandler());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; delegator.&lt;span style="color:#a6e22e"&gt;executeTask&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>CAS(compare and swap)</title><link>https://ongoingblog.org/2025/04/compare-and-set/</link><pubDate>Thu, 03 Apr 2025 19:54:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/compare-and-set/</guid><description>&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#一背景"&gt;一、背景&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#二和传统锁的对比"&gt;二、和传统锁的对比&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#三实际的使用"&gt;三、实际的使用&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#四存在的问题"&gt;四、存在的问题&lt;/a&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#一aba-问题"&gt;（一）ABA 问题&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#二开销问题"&gt;（二）开销问题&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#三只能保证一个共享变量的原子问题"&gt;（三）只能保证一个共享变量的原子问题&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;h2 id="一背景"&gt;一、背景&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;为什么要有 CAS，它解决了什么问题？&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>近期对于 Deepseek 的使用</title><link>https://ongoingblog.org/2025/04/recent-use-of-deepseek/</link><pubDate>Wed, 02 Apr 2025 22:24:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/recent-use-of-deepseek/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;总结一些 deepseek 的使用。&lt;/p&gt;
&lt;p&gt;现在主要涉及到下面这些方面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技术问题，编程&lt;/li&gt;
&lt;li&gt;英文翻译问题&lt;/li&gt;
&lt;li&gt;各种如何使用的问题，不仅仅是编程，还有生活中的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="二一些指令"&gt;二、一些指令&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/clear&lt;/code&gt;: 保留对话结构但清空内存，速度接近新对话。&lt;/p&gt;
&lt;h3 id="三经验"&gt;三、经验&lt;/h3&gt;
&lt;p&gt;如果问题不相关，就新起会话进行询问，也会快很多。&lt;/p&gt;</description></item><item><title>模板方法</title><link>https://ongoingblog.org/2025/04/template-method/</link><pubDate>Wed, 02 Apr 2025 19:37:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/template-method/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;定义操作算法中的骨架，分离可变和不变的逻辑，将一些步骤延迟到子类中。&lt;/p&gt;
&lt;h3 id="二组成要素"&gt;二、组成要素&lt;/h3&gt;
&lt;h4 id="抽象类"&gt;抽象类&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;定义模板方法算法骨架&lt;/li&gt;
&lt;li&gt;声明可变的方法和不可变的方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="模板方法"&gt;模板方法&lt;/h4&gt;
&lt;p&gt;定义整个流程。&lt;/p&gt;
&lt;h4 id="抽象方法"&gt;抽象方法&lt;/h4&gt;
&lt;p&gt;子类必须实现。&lt;/p&gt;
&lt;h4 id="钩子-hook-方法"&gt;钩子 (hook) 方法&lt;/h4&gt;
&lt;p&gt;预留扩展点，提供缺省行为 (子类可选实现)，通常是空的操作，由开发者进行扩展。&lt;/p&gt;
&lt;h3 id="三代码示例"&gt;三、代码示例&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;abstract&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AbstractApplicationContext&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 模板方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;refresh&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...固定步骤&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; postProcessBeanFactory(beanFactory); &lt;span style="color:#75715e"&gt;// &amp;lt;- HOOK 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...固定步骤&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; onRefresh(); &lt;span style="color:#75715e"&gt;// &amp;lt;- HOOK 2 (关键扩展点)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...固定步骤&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// HOOK 1: BeanFactory 后处理 (默认空实现)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;protected&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;postProcessBeanFactory&lt;/span&gt;(ConfigurableListableBeanFactory beanFactory) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// HOOK 2: 子类特殊初始化 (默认空实现)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;protected&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;onRefresh&lt;/span&gt;() {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="四spring-中的命名约定"&gt;四、Spring 中的命名约定&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;前缀 &lt;strong&gt;Do-&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;org.&lt;span style="color:#a6e22e"&gt;springframework&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;beans&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;factory&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;support&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;AbstractBeanFactory&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt;createBean
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;org.&lt;span style="color:#a6e22e"&gt;springframework&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;beans&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;factory&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;support&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;AbstractAutowireCapableBeanFactory&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt;doCreateBean
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="五参考"&gt;五、参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cnblogs.com/aibi1/p/18752390"target="_blank" rel="noopener noreferrer"&gt;https://www.cnblogs.com/aibi1/p/18752390&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Spring 源码阅读</title><link>https://ongoingblog.org/2025/04/read-spring-code/</link><pubDate>Wed, 02 Apr 2025 12:10:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/read-spring-code/</guid><description>&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#一spring-主要流程"&gt;一、spring 主要流程&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#二beanfactory-体系"&gt;二、beanFactory 体系&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#三applicationcontext-体系"&gt;三、ApplicationContext 体系&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#四我理解的依赖倒置"&gt;四、我理解的依赖倒置&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#五springboot-主要流程"&gt;五、springboot 主要流程&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#六springboot-主要流程及对应事件"&gt;六、springboot 主要流程及对应事件&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#七参考"&gt;七、参考&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;h3 id="一spring-主要流程"&gt;一、spring 主要流程&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="spring_process-spring-framework_20250812.svg"
 data-pswp-width="800"
 data-pswp-height="600"
 target="_blank"&gt;
 &lt;img src="spring_process-spring-framework_20250812.svg"
 alt=""
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 
&lt;/figure&gt;

&lt;h3 id="二beanfactory-体系"&gt;二、beanFactory 体系&lt;/h3&gt;








&lt;figure class="pswp-gallery" style="display: inline-block; margin: 0;"&gt;
 &lt;a href="spring_process-beanFactory%26applicationContext.png"
 target="_blank"&gt;
 &lt;img src="spring_process-beanFactory%26applicationContext.png"
 alt="BeanFactory 和 ApplicationContext"
 style="max-width: 100%; height: auto;" /&gt;
 &lt;/a&gt;
 &lt;figcaption style="text-align: center;"&gt;BeanFactory 和 ApplicationContext&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;下属的各种实现&lt;/p&gt;</description></item><item><title>搭建 Spring 源码阅读环境</title><link>https://ongoingblog.org/2025/04/build-spring-source-code-environment/</link><pubDate>Wed, 02 Apr 2025 12:10:00 +0800</pubDate><guid>https://ongoingblog.org/2025/04/build-spring-source-code-environment/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;搭建 Spring 源码阅读环境。&lt;/p&gt;
&lt;h3 id="二步骤"&gt;二、步骤&lt;/h3&gt;
&lt;h4 id="下载源码"&gt;下载源码&lt;/h4&gt;
&lt;p&gt;打开&lt;a href="https://github.com/spring-projects/spring-framework"target="_blank" rel="noopener noreferrer"&gt;spring-framework 仓库地址&lt;/a&gt;，将项目源码 clone 到本地。&lt;/p&gt;
&lt;h4 id="本地编译源码"&gt;本地编译源码&lt;/h4&gt;
&lt;p&gt;在用 IDEA 打开项目，这里我切换的分支是&lt;code&gt;5.3.x&lt;/code&gt;，项目就会自动拉取依赖进行编译。&lt;/p&gt;
&lt;p&gt;但问题是下载依赖的速度太慢了。最好用【三、技巧】中的方法加快一下下载速度，编译也马上就完成了。&lt;/p&gt;
&lt;h4 id="验证编译是否有问题"&gt;验证编译是否有问题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;新建一个自定义的模块&lt;/p&gt;
&lt;img src="create_a_new_module.png" alt=""&gt;&lt;p&gt;建好后模块的目录树如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;➜ my-test git:&lt;span style="color:#f92672"&gt;(&lt;/span&gt;5.3.x&lt;span style="color:#f92672"&gt;)&lt;/span&gt; ✗ tree . -L &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── build &lt;span style="color:#75715e"&gt;# 无需关注&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│   ├── classes &lt;span style="color:#75715e"&gt;# 无需关注&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│   ├── generated &lt;span style="color:#75715e"&gt;# 无需关注&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│   ├── resources &lt;span style="color:#75715e"&gt;# 无需关注&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;│   └── tmp &lt;span style="color:#75715e"&gt;# 无需关注&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;├── build.gradle &lt;span style="color:#75715e"&gt;# 需要关注&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;└── src
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ├── main &lt;span style="color:#75715e"&gt;# 需要关注&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ├── test &lt;span style="color:#75715e"&gt;# 无需关注&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; └── testFixtures &lt;span style="color:#75715e"&gt;# 无需关注&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="三技巧"&gt;三、技巧&lt;/h3&gt;
&lt;h4 id="idea-设置代理加快项目下载依赖的速度"&gt;IDEA 设置代理，加快项目下载依赖的速度&lt;/h4&gt;
&lt;p&gt;设置路径：&lt;code&gt;Settings | Appearance &amp;amp; Behavior | System Settings | HTTP Proxy&lt;/code&gt;
&lt;img src="idea_set_http_proxy.png" alt=""&gt;&lt;/p&gt;</description></item><item><title>文档组织结构</title><link>https://ongoingblog.org/2025/03/document-organization-structure/</link><pubDate>Sun, 30 Mar 2025 15:09:00 +0800</pubDate><guid>https://ongoingblog.org/2025/03/document-organization-structure/</guid><description>&lt;h4 id="一背景"&gt;一、背景&lt;/h4&gt;
&lt;p&gt;一个良好的文档组织结构可以帮你省去很多的麻烦。类似地图软件，在只知道出发点、终止地的前提下，在地图软件中输入这两个元素后就可以得到很多种方案。&lt;/p&gt;
&lt;p&gt;在我们的个人电脑中，良好的目录组织结构可以起到辅助的地图软件作用，方便给我们的日常项目进行归纳整理，而不是到了要使用的时候发现找不到文件，并且也忘记了具体的位置。&lt;/p&gt;
&lt;p&gt;将这种约定保存下来，以后任何在这份约定下的产物都可以复用这份逻辑，而不是 A 一套、B 一套，我们的脑子就可以释放空间处理更加重要的事情。&lt;/p&gt;
&lt;h4 id="二如何组织"&gt;二、如何组织？&lt;/h4&gt;
&lt;h5 id="文件夹实施中项目"&gt;文件夹：实施中项目&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;存放当前处理的项目&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id="文件夹已归档项目"&gt;文件夹：已归档项目&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;存放已完成的项目，不管是什么类型的资料，都按项目的维度进行划分。&lt;/li&gt;
&lt;li&gt;也是工作成果的一个总结，至于按什么样的维度来展示可以自行决定。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="三流转原则"&gt;三、流转原则&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;项目完毕就归档&lt;/strong&gt;。在项目结束之后，立即将相关的文件夹放入【归档】中，保证我们的处理区域是干净的。将有限的注意力放在我们需要解决的事情上，有限的注意力绝不去浪费一分。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="四参考"&gt;四、参考&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;《The PARA method》&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Pycharm报错Invalid python interpreter</title><link>https://ongoingblog.org/2025/03/pycharm-error-invalid-python-interpreter/</link><pubDate>Sun, 30 Mar 2025 11:10:00 +0800</pubDate><guid>https://ongoingblog.org/2025/03/pycharm-error-invalid-python-interpreter/</guid><description>&lt;h4 id="一背景"&gt;一、背景&lt;/h4&gt;
&lt;p&gt;今天需要使用manim来画图，用pycharm打开之后，在命令行执行&lt;code&gt;venv/bin/manim xxx&lt;/code&gt;命令报错：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Invalid python interpreter
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我调整了下pycharm中运行的configuration配置的python解释器路径（位于项目根目录下的&lt;code&gt;venv/bin&lt;/code&gt;下的python可执行程序，如下图）&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
 &lt;img src="venv_bin_python.png" alt="" style="display: block; margin: auto;" /&gt;
&lt;/div&gt;
&lt;p&gt;重新执行命令，依旧报错。&lt;/p&gt;
&lt;h4 id="二问题解决"&gt;二、问题解决&lt;/h4&gt;
&lt;p&gt;我打开&lt;code&gt;venv/bin/manim&lt;/code&gt;文件，突然发现马赛克这一段的路径并不是当前项目的路径
&lt;div style="text-align: center;"&gt;
 &lt;img src="venv_bin_manim.png" alt="" style="display: block; margin: auto;" /&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;因为最近我在整理这台电脑的文档结构目录，把各个类型的文件路径重新进行了划分，但是这里的路径还是旧项目所在的路径。&lt;/p&gt;
&lt;p&gt;重新更新了下&lt;code&gt;#!&lt;/code&gt;后面的路径，manim可以正常执行了。&lt;/p&gt;
&lt;h4 id="三第二个问题"&gt;三、第二个问题&lt;/h4&gt;
&lt;p&gt;在项目跟目录下使用命令&lt;code&gt;source venv/bin/activate&lt;/code&gt;激活虚拟环境后，&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
 &lt;img src="virtual_environment_mark.png" alt="" style="display: block; margin: auto;" /&gt;
&lt;/div&gt;
&lt;p&gt;输入指令&lt;code&gt;manim&lt;/code&gt;，还是不生效，需要指定全路径&lt;code&gt;venv/bin/manim&lt;/code&gt;才能正常执行。&lt;/p&gt;
&lt;p&gt;我问了一下deepseek这个问题
&lt;img src="question_deepseek_01.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;它可以正确识别出我的问题，并且给了五种方法
&lt;img src="answer_deepseek_01.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;我继续追问
&lt;img src="answer_deepseek_02.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;这个路径错误，我马上联想到上面的情形，可能是文件&lt;code&gt;venv/bin/activate&lt;/code&gt;中的路径也是错误的！&lt;/p&gt;
&lt;img src="venv_bin_activate.png" alt=""&gt;&lt;p&gt;确实是这个问题，重新更新成正确的路径后，manim命令可以正常识别了。&lt;/p&gt;
&lt;h4 id="四如何从根源上解决这个问题"&gt;四、如何从根源上解决这个问题？&lt;/h4&gt;
&lt;p&gt;因为项目路径可能会再变，不能下次项目文件夹再次发生了变动，又需要对venv下的命令路径重新适配.&lt;/p&gt;
&lt;p&gt;路径硬编码问题：虚拟环境中的可执行文件包含了绝对路径，移动项目后会导致路径失效。&lt;/p&gt;</description></item><item><title>查单词网站 word reference</title><link>https://ongoingblog.org/2025/03/%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%BD%91%E7%AB%99-word-reference/</link><pubDate>Sun, 23 Mar 2025 16:08:00 +0800</pubDate><guid>https://ongoingblog.org/2025/03/%E6%9F%A5%E5%8D%95%E8%AF%8D%E7%BD%91%E7%AB%99-word-reference/</guid><description>&lt;p&gt;今天发现一个很好用的&lt;strong&gt;查词网站&lt;/strong&gt; &lt;a href="www.wordreference.com"&gt;www.wordreference.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个网站中提供了一个在浏览器中更方便快捷的[查词方式]&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h3 id="使用效果"&gt;使用效果&lt;/h3&gt;
&lt;img src="img_wr_step01.png" alt=""&gt;&lt;img src="img_wr_step02.png" alt=""&gt;&lt;img src="img_wr_step03.png" alt=""&gt;&lt;p&gt;就会跳转到对应的详情界面：&lt;/p&gt;
&lt;img src="img_wr_website01.png" alt=""&gt;&lt;h3 id="设置方式"&gt;设置方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在搜索框中输入&lt;code&gt;chrome://settings/searchEngines&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在网站搜索点击【添加】&lt;/p&gt;
&lt;img src="img_wr_step04.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据图片中内容设置如下三项&lt;/p&gt;
&lt;img src="img_wr_step05.png" alt=""&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;WR English definition
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;wr
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;http://www.wordreference.com/redirect/translation.aspx?w=%s&amp;amp;dict=enzh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意链接&lt;code&gt;http://www.wordreference.com/redirect/translation.aspx?w=%s&amp;amp;dict=enzh&lt;/code&gt;中最后一个参数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dict=enzh&lt;/code&gt;中的&lt;em&gt;enzh&lt;/em&gt;代表英语 - 中文翻译。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://www.wordreference.com/Tool/Chrome-search-shortcut.aspx"target="_blank" rel="noopener noreferrer"&gt;https://www.wordreference.com/Tool/Chrome-search-shortcut.aspx&lt;/a&gt;&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>有用的电子表格</title><link>https://ongoingblog.org/2025/03/useful-spreadsheet/</link><pubDate>Sat, 01 Mar 2025 10:50:00 +0800</pubDate><guid>https://ongoingblog.org/2025/03/useful-spreadsheet/</guid><description>&lt;p&gt;前言：电子表格在工作中真是超级好用的存在。数据处理简单快速且高效，当然需要对应的应用支持。&lt;/p&gt;
&lt;p&gt;映射匹配万能函数 index + match，我几乎工作的时候，如果有那种梳理性质的工作，就会用到这个。&lt;/p&gt;
&lt;p&gt;这里说下使用的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;index(目的展示列[记得 F4 固定], match(key, 关联表的 key 范围[记得 F4 固定], 0))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我觉得它就像外键的使用，两个表中有共同的关联字段，你通过表 A 的外键找到表 B 对应的那条记录，并且输出对应的你想要的信息。&lt;/p&gt;
&lt;p&gt;有效的前提&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个基础表中的数据都要保证是有效可用的&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>使用 SQL 找出两个数据集中的不同点</title><link>https://ongoingblog.org/2025/03/find-difference-in-two-data-set-by-sql/</link><pubDate>Sat, 01 Mar 2025 10:39:00 +0800</pubDate><guid>https://ongoingblog.org/2025/03/find-difference-in-two-data-set-by-sql/</guid><description>&lt;img src="TwoCircle.png" alt=""&gt;&lt;p&gt;思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到 A 和 B 的公共部分 C, C = join A and B&lt;/li&gt;
&lt;li&gt;A 的特有部分为 A - C, not in C but in A&lt;/li&gt;
&lt;li&gt;B 的特有部分为 B - C, not in C but in B&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Linux sed 命令的使用</title><link>https://ongoingblog.org/2025/02/linux-sed/</link><pubDate>Sat, 22 Feb 2025 15:01:00 +0800</pubDate><guid>https://ongoingblog.org/2025/02/linux-sed/</guid><description>&lt;p&gt;前言: 有时需要在bash脚本中处理一些字符串的替换操作，发现 linux 下的 sed 命令可以实现这个功能。&lt;/p&gt;
&lt;p&gt;很久以前就听过 linux 命令文本处理三剑客的大名，其中一个就是 sed ，使用了下发现还不错，模式匹配的格式就是通用的正则表达式。&lt;/p&gt;
&lt;h3 id="例子"&gt;例子&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将字符空格替换为&lt;code&gt;-&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;hello hhh&amp;#34;&lt;/span&gt; | sed &lt;span style="color:#e6db74"&gt;&amp;#39;s/\ /-/&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直接修改源文件，不生成备份文件(macos写法)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sed -i &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;pattern&amp;#39;&lt;/span&gt; file.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成一个备份文件，备份文件名称为&lt;code&gt;file.txt.backup&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sed -i.backup &lt;span style="color:#e6db74"&gt;&amp;#39;pattern&amp;#39;&lt;/span&gt; file.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="参数"&gt;参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-E&lt;/code&gt;: 使用正则表达式&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>端口转发</title><link>https://ongoingblog.org/2025/02/port-forward/</link><pubDate>Sat, 22 Feb 2025 12:39:00 +0800</pubDate><guid>https://ongoingblog.org/2025/02/port-forward/</guid><description>&lt;img src="port_forward.png" alt=""&gt;</description></item><item><title>Ubuntu防火墙软件 - gufw</title><link>https://ongoingblog.org/2025/01/ubuntu-gufw/</link><pubDate>Sun, 26 Jan 2025 16:18:00 +0800</pubDate><guid>https://ongoingblog.org/2025/01/ubuntu-gufw/</guid><description>&lt;p&gt;前言: Ubuntu防火墙使用及安装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用pip安装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：如果 Ubuntu 上开启了文件共享，注意要配置下防火墙，添加白名单，否则可能会出现连接不上的情况。
因为默认是禁止所有的入向连接的。&lt;/p&gt;</description></item><item><title>Mybatis缓存机制</title><link>https://ongoingblog.org/2024/09/mybatis-cache/</link><pubDate>Tue, 03 Sep 2024 12:10:00 +0800</pubDate><guid>https://ongoingblog.org/2024/09/mybatis-cache/</guid><description>&lt;p&gt;提高查询效率和减轻数据库压力。&lt;/p&gt;
&lt;h3 id="分类"&gt;分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一级缓存&lt;/li&gt;
&lt;li&gt;二级缓存&lt;/li&gt;
&lt;li&gt;第三方缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="一级缓存"&gt;一级缓存&lt;/h3&gt;
&lt;p&gt;本地缓存。SqlSession级别。&lt;/p&gt;
&lt;p&gt;如何验证，在IDEA中查看控制台是否执行了sql查询语句，如果是直接返回结果，就是从缓存中拿的，不是去查的数据库。&lt;/p&gt;
&lt;h3 id="二级缓存"&gt;二级缓存&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;作用域比一级缓存大。&lt;/li&gt;
&lt;li&gt;多个sqlsession可以共用一级缓存。&lt;/li&gt;
&lt;li&gt;默认情况下，二级缓存关闭，需要手工开启。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;开启二级缓存后：二级缓存 - 一级缓存 - 数据库&lt;/p&gt;
&lt;h3 id="失效情形"&gt;失效情形&lt;/h3&gt;
&lt;p&gt;两次查询之间执行增删改操作，会同时清空一级缓存和二级缓存。&lt;/p&gt;</description></item><item><title>用 Idea 在 Macos 命令行中打开 Java 项目</title><link>https://ongoingblog.org/2024/07/open-java-projects-in-macos-terminal/</link><pubDate>Tue, 16 Jul 2024 21:59:00 +0800</pubDate><guid>https://ongoingblog.org/2024/07/open-java-projects-in-macos-terminal/</guid><description>&lt;p&gt;前言：在 macos terminal 中打开 java 项目。&lt;/p&gt;
&lt;h4 id="直接使用命令"&gt;直接使用命令&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;open -a &lt;span style="color:#e6db74"&gt;&amp;#34;IntelliJ IDEA CE&amp;#34;&lt;/span&gt; . &lt;span style="color:#75715e"&gt;# 这里使用社区版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="使用脚本"&gt;使用脚本&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/zsh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;DIR&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$1
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;test -z &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$DIR&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; DIR&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;pwd&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;open -a &lt;span style="color:#e6db74"&gt;&amp;#34;IntelliJ IDEA&amp;#34;&lt;/span&gt; $DIR
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开当前目录：&lt;code&gt;idae .&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="直接用命令别名更方便"&gt;直接用命令别名更方便&lt;/h4&gt;
&lt;img src="bashrc_idea_alias.png" alt=""&gt;</description></item><item><title>程序上下文</title><link>https://ongoingblog.org/2024/03/context/</link><pubDate>Sat, 16 Mar 2024 11:34:00 +0800</pubDate><guid>https://ongoingblog.org/2024/03/context/</guid><description>&lt;p&gt;前言: 程序上下文。&lt;/p&gt;
&lt;p&gt;可以理解为环境。
一段程序依赖的变量的集合，如果没有这些外部变量，这些单独的方法也做不了什么。
一个功能在应用中可能包含了多个方法集合，从请求进入，到逻辑执行，到最后的输出，会加载变量，这些变量又会进入到各种方法，方法可能会对变量产生影响，这一整个过程中
包含的各类变量大杂烩就是上下文。&lt;/p&gt;
&lt;p&gt;上下文虽然叫上下文，程序一般只有上文而已。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;读者要想解读一段由这种符号组成的信息，必须事先知道这段信息的语境 -
它的上下文关系，前因后果&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程的上下文切换&lt;/strong&gt;
当两个线程属于同一个进程时，因为虚拟内存是共享的，所以在切换时，虚拟内存资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据。&lt;/p&gt;</description></item><item><title>租房</title><link>https://ongoingblog.org/2024/02/rent-house/</link><pubDate>Mon, 19 Feb 2024 08:00:00 +0800</pubDate><guid>https://ongoingblog.org/2024/02/rent-house/</guid><description>&lt;h3 id="一地理位置"&gt;一、地理位置&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;离公司近&lt;/li&gt;
&lt;li&gt;离图书馆近 (可以坐公交 20 分钟内到达)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面两条排第一顺位&lt;/p&gt;
&lt;h3 id="二房间布局"&gt;二、房间布局&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;阳光充足&lt;/li&gt;
&lt;li&gt;有窗户&lt;/li&gt;
&lt;li&gt;有独卫&lt;/li&gt;
&lt;li&gt;最好有一个区域用来做饭&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>搬家</title><link>https://ongoingblog.org/2024/02/move-house/</link><pubDate>Mon, 19 Feb 2024 07:51:00 +0800</pubDate><guid>https://ongoingblog.org/2024/02/move-house/</guid><description>&lt;p&gt;前言：过年后想换一个新的房间，这里记录下搬家的一些注意点，方便下次再次搬家使用。&lt;/p&gt;
&lt;p&gt;如果搬家不急的话，自己可以分多次搬运。&lt;/p&gt;
&lt;p&gt;记录一下搬家物品的顺序：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;日常生活用品。睡觉用品 (被子、床单等)、洗漱用品 (洗发露等)、网络用品 (路由器等)、月亮椅&lt;/li&gt;
&lt;li&gt;电脑屏幕 (因为很近，我不用打包，直接把屏幕搬过来即可)、游戏机&lt;/li&gt;
&lt;li&gt;灯具 (todo)&lt;/li&gt;
&lt;li&gt;衣服 (todo)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一定要检查下房间内提供的洗衣机，把过滤板给抽出来看看，如果前任租客不注意这个的话，会很脏。&lt;/li&gt;
&lt;li&gt;在搬入新房间前，将屋子打扫干净，并且使用消毒剂（杀虫剂类似的）全部都喷洒一遍，防止虫子滋生。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>IKBC 键盘上的 win 键失效</title><link>https://ongoingblog.org/2023/12/keyborad-win-key-is-broken/</link><pubDate>Mon, 11 Dec 2023 23:34:00 +0800</pubDate><guid>https://ongoingblog.org/2023/12/keyborad-win-key-is-broken/</guid><description>&lt;p&gt;前言：键盘上的 win 键突然不能使用，win 电脑是这样，linux 也是如此。&lt;/p&gt;
&lt;p&gt;搜索了下，使用&lt;code&gt;Fn&lt;/code&gt;+右&lt;code&gt;win&lt;/code&gt;可以重新使&lt;code&gt;win&lt;/code&gt;键生效。&lt;/p&gt;</description></item><item><title>生产事件恢复</title><link>https://ongoingblog.org/2023/11/production-recovery/</link><pubDate>Sun, 26 Nov 2023 13:34:00 +0800</pubDate><guid>https://ongoingblog.org/2023/11/production-recovery/</guid><description>&lt;p&gt;前言：遇到生产事故的一些应急方案。&lt;/p&gt;
&lt;p&gt;遇到线上问题，不需要先找到问题的根因。
实际上对线上应用而言，最重要的是恢复可用性&lt;/p&gt;
&lt;p&gt;遇到了线上问题，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果之前是蓝绿切换，需要立刻将流量切回至蓝版本&lt;/li&gt;
&lt;li&gt;如果蓝版本已下线，那就只能回退到上一个版本&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Mac 下朗读单词语音</title><link>https://ongoingblog.org/2023/11/mac-speech/</link><pubDate>Sat, 11 Nov 2023 12:50:00 +0800</pubDate><guid>https://ongoingblog.org/2023/11/mac-speech/</guid><description>&lt;p&gt;前言：在 mac 查单词很方便，但是没有看到单词语音的选项，搜索了一下，发现设置路径是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;左上角苹果标🍎-&amp;gt;系统设置-&amp;gt;辅助功能-&amp;gt;朗读内容-&amp;gt;朗读所选内容
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个开关打开之后，使用快捷键&lt;code&gt;option + esc&lt;/code&gt;后就会有人声朗读单词了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;但是我发现有的英文单词读出来不对，最后还是用了翻译网页去查看单词读音的。&lt;/em&gt;&lt;/p&gt;</description></item><item><title>Threadlocal</title><link>https://ongoingblog.org/2023/11/threadlocal/</link><pubDate>Wed, 08 Nov 2023 22:48:00 +0800</pubDate><guid>https://ongoingblog.org/2023/11/threadlocal/</guid><description>&lt;p&gt;前言：Threadlocal 线程本地变量的例子。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ThreadlocalUtils.java&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; java.util.HashMap;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; java.util.Map;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ThreadlocalUtils&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; ThreadLocal&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;Map&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; threadlocal &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; ThreadLocal() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;protected&lt;/span&gt; Object &lt;span style="color:#a6e22e"&gt;initialValue&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;threadlocal 初始化，值为空&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setData&lt;/span&gt;(String key, Object value) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Map map &lt;span style="color:#f92672"&gt;=&lt;/span&gt; threadlocal.&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (map &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; map &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; HashMap();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; map.&lt;span style="color:#a6e22e"&gt;put&lt;/span&gt;(key, value);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; threadlocal.&lt;span style="color:#a6e22e"&gt;set&lt;/span&gt;(map);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; map.&lt;span style="color:#a6e22e"&gt;put&lt;/span&gt;(key, value);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; Object &lt;span style="color:#a6e22e"&gt;getData&lt;/span&gt;(String key) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Map map &lt;span style="color:#f92672"&gt;=&lt;/span&gt; threadlocal.&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (map &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; map.&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(key);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;clear&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; threadlocal.&lt;span style="color:#a6e22e"&gt;remove&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ThreadlocalUtilsTest.java&lt;/code&gt;&lt;/p&gt;</description></item><item><title>备份你的 Ubuntu Apt 软件包列表</title><link>https://ongoingblog.org/2023/08/backup-your-apt-package-list/</link><pubDate>Sat, 19 Aug 2023 20:54:00 +0800</pubDate><guid>https://ongoingblog.org/2023/08/backup-your-apt-package-list/</guid><description>&lt;p&gt;前言：备份在 ubuntu 中安装的包软件。&lt;/p&gt;
&lt;h2 id="backup-your-linux-apt-package"&gt;Backup your linux apt Package&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dpkg --get-selections &amp;gt; ~/Package.list
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo cp -R /etc/apt/sources.list* ~/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt-key exportall &amp;gt; ~/Repo.keys
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="restore"&gt;Restore&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt-key add ~/Repo.keys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo cp -R ~/sources.list* /etc/apt/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudoapt-getTupdate+08 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt-get install dselect
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudodselectTupdate+08 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo dpkg --set-selections &amp;lt; ~/Package.list
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt-get dselect-upgrade -y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="参考"&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/9135/how-to-backup-settings-and-list-of-installed-packages"target="_blank" rel="noopener noreferrer"&gt;https://askubuntu.com/questions/9135/how-to-backup-settings-and-list-of-installed-packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Threadpool</title><link>https://ongoingblog.org/2023/06/threadpool/</link><pubDate>Sun, 18 Jun 2023 10:13:00 +0800</pubDate><guid>https://ongoingblog.org/2023/06/threadpool/</guid><description>&lt;h3 id="一前言"&gt;一、前言&lt;/h3&gt;
&lt;p&gt;线程池在我们日常开发中扮演着重要的角色。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理线程的创建和销毁，不需要开发者关系如何运作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;keepAliveTime&lt;/code&gt;: 为了释放多余的线程资源。非核心线程，空闲时有一个最长等待时间，就是 keepAliveTime，时间到了没有任务，会被终止。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以重用线程，避免线程创建的开销&lt;/li&gt;
&lt;li&gt;任务过多时，通过排队避免创建过多线程，减少系统资源消耗&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="二涉及方法"&gt;二、涉及方法&lt;/h3&gt;
&lt;h4 id="sleep-与-yield"&gt;sleep() 与 yield()&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;sleep()
不会事线程丢失监视器所有权，当前线程仍然占用 CPU 分片。
可读性更好的写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;TimeUnit.&lt;span style="color:#a6e22e"&gt;SECONDS&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sleep&lt;/span&gt;(1);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;yield() 让步
线程让步。
对线程调度器发出一个暗示，当前线程愿意让出使用的处理器。
调用此方法后，状态可能由 running 状态转为 runnable 状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;thread.join()
表示无限等待，一直阻塞当前线程，直到目标线程执行完毕。
通常是加入的意思，一个线程要加入到另外一个线程，最好是等着它一起走。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; threadA.&lt;span style="color:#a6e22e"&gt;join&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;main 线程等待 threadA 执行完毕。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="三守护线程-daemon"&gt;三、守护线程 (Daemon)&lt;/h3&gt;
&lt;p&gt;相当于闭馆后最后一个锁大门的管理者。&lt;/p&gt;
&lt;h3 id="四注意"&gt;四、注意&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;线程池中，核心线程和最大线程是否有特殊标记？&lt;/p&gt;
&lt;p&gt;没有，无论是核心线程还是非核心线程，在线程池中都一样，当淘汰的时候，不关心是哪些线程，只需要留下核心线程数量个线程即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程数小于核心线程数，并且线程都处于空闲状态，现在提交一个任务，是新起一个线程还是给之前创建的线程运行？&lt;/p&gt;
&lt;p&gt;execute 方法的注释中写道，&lt;code&gt;If fewer than corePoolSize threads are running, try to start a new thread with the given command as its first task&lt;/code&gt;. 从注释可以知道，此时线程池会新起一个线程来运行新任务，不管老线程是否空闲。&lt;/p&gt;</description></item><item><title>Mac 命令行使用</title><link>https://ongoingblog.org/2023/02/mac-terminal-usage/</link><pubDate>Mon, 20 Feb 2023 12:49:00 +0800</pubDate><guid>https://ongoingblog.org/2023/02/mac-terminal-usage/</guid><description>&lt;p&gt;前言：一些 mac 使用体验。&lt;/p&gt;
&lt;p&gt;从当前终端打开对应文件夹：&lt;code&gt;$ open .&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="搜索"&gt;搜索&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mdfind&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mdfind -name &lt;span style="color:#e6db74"&gt;&amp;#34;文件名称&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Curl 命令的使用</title><link>https://ongoingblog.org/2023/02/curl-usage/</link><pubDate>Wed, 08 Feb 2023 22:28:00 +0800</pubDate><guid>https://ongoingblog.org/2023/02/curl-usage/</guid><description>&lt;p&gt;前言: 临时没有postman做接口测试，就直接在 terminal 里做的测试。&lt;/p&gt;
&lt;h3 id="发起get请求"&gt;发起Get请求&lt;/h3&gt;
&lt;p&gt;例如本地起的服务为&amp;quot;0.0.0.0 =8080/ask&amp;quot;，那么如何请求呢？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -G -d &lt;span style="color:#e6db74"&gt;&amp;#34;name=mike&amp;#34;&lt;/span&gt; -d &lt;span style="color:#e6db74"&gt;&amp;#34;height=170&amp;#34;&lt;/span&gt; 0.0.0.0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt;8080/ask
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里&lt;code&gt;-G&lt;/code&gt;不带的话，就为 post 请求了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带header参数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl localhost &lt;span style="color:#f92672"&gt;=&lt;/span&gt;8080/api/rmi.do -H &lt;span style="color:#e6db74"&gt;&amp;#34;key1:test1&amp;#34;&lt;/span&gt; -H &lt;span style="color:#e6db74"&gt;&amp;#34;key2:test2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="测试网址链接"&gt;测试网址链接&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -I 你的网址
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src="curl_param_i.png" alt=""&gt;&lt;h3 id="参考"&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html"target="_blank" rel="noopener noreferrer"&gt;https://www.ruanyifeng.com/blog/2019/09/curl-reference.html&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Spring ApplicationEvent</title><link>https://ongoingblog.org/2023/02/spring-applicationevent/</link><pubDate>Thu, 02 Feb 2023 12:43:00 +0800</pubDate><guid>https://ongoingblog.org/2023/02/spring-applicationevent/</guid><description>&lt;p&gt;前言：事件机制。&lt;/p&gt;
&lt;p&gt;可以进行广播。&lt;/p&gt;
&lt;p&gt;比如班级中发出一个信号，身高高于 180 厘米的同学，请起立，然后班级中高于这个身高的同学都会站起来，不用每一个单独进行通知。&lt;/p&gt;
&lt;p&gt;spring 中的事件提供了 bean 之间的通信。一个 bean 完成了一部分工作，发布了一个事件，其余订阅了这个事件的 bean 们都会知道。&lt;/p&gt;
&lt;p&gt;实现：180 厘米以上同学站起来的例子 (todo)。&lt;/p&gt;
&lt;h3 id="spring-中上下文事件-todo"&gt;Spring 中上下文事件 (todo)&lt;/h3&gt;</description></item><item><title>远程桌面软件 - Microsoft Remote Desktop for Mac</title><link>https://ongoingblog.org/2022/12/microsoft-remote-desktop-for-mac/</link><pubDate>Sun, 25 Dec 2022 13:05:00 +0800</pubDate><guid>https://ongoingblog.org/2022/12/microsoft-remote-desktop-for-mac/</guid><description>&lt;p&gt;前言：坐在 windows 电脑桌前太久了，想要换下方式办公，还有一台 mac 来办公。在网上找了下从 mac 远程回 windows 的方法。&lt;/p&gt;
&lt;p&gt;这款软件在 AppStore 中是 Free 的，但是本地区不支持下载。&lt;/p&gt;
&lt;p&gt;找到了这个链接 &lt;a href="https://go.microsoft.com/fwlink/?linkid=868963"target="_blank" rel="noopener noreferrer"&gt;Microsoft Remote Desktop for Mac&lt;/a&gt;, 可以点击直接进行下载。&lt;/p&gt;
&lt;p&gt;微软关于此软件的介绍可以看这篇文档：&lt;a href="https://learn.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-mac"target="_blank" rel="noopener noreferrer"&gt;Get started with the macOS client&lt;/a&gt;。&lt;/p&gt;</description></item><item><title>Countdownlatch</title><link>https://ongoingblog.org/2022/12/countdownlatch/</link><pubDate>Thu, 22 Dec 2022 12:34:00 +0800</pubDate><guid>https://ongoingblog.org/2022/12/countdownlatch/</guid><description>&lt;p&gt;前言：一个使用场景，例如分发 10 个线程，需要等到这 10 个线程全部都执行完毕后，再进行下一步的处理。&lt;/p&gt;
&lt;p&gt;看到过一个例子：举行跑步比赛，发令枪响后，几位选手开始跑步，当最后一位选手跑完全程，然后开始公布选手成绩、以及颁奖仪式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模拟多个线程同时执行的场景&lt;/li&gt;
&lt;li&gt;模拟依赖场景，例如一个数据的计算需要很多数据来源，需要这些数据来源全部加载完毕后才开始进行计算。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;主要方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;int getCount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;await()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;LatchTest&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;final&lt;/span&gt; Logger LOGGER &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Logger.&lt;span style="color:#a6e22e"&gt;getLogger&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;LatchTest&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;test&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CountDownLatch latch &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; CountDownLatch(1);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; 0; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; 10; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Thread(deal(i, latch)).&lt;span style="color:#a6e22e"&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; LOGGER.&lt;span style="color:#a6e22e"&gt;info&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;3 秒后开始....&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SleepUtil.&lt;span style="color:#a6e22e"&gt;sleep&lt;/span&gt;(3000);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; latch.&lt;span style="color:#a6e22e"&gt;countDown&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; Runnable &lt;span style="color:#a6e22e"&gt;deal&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; threadNum, CountDownLatch latch) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Runnable() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;run&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; latch.&lt;span style="color:#a6e22e"&gt;await&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; LOGGER.&lt;span style="color:#a6e22e"&gt;info&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;开始运行...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;throw&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; RuntimeException(e);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;test2&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CountDownLatch latch &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; CountDownLatch(10);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; 0; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; 10; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Thread(deal2(i, latch)).&lt;span style="color:#a6e22e"&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; LOGGER.&lt;span style="color:#a6e22e"&gt;info&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;等待加载中...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; latch.&lt;span style="color:#a6e22e"&gt;await&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; LOGGER.&lt;span style="color:#a6e22e"&gt;info&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;开始进入主界面&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;throw&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; RuntimeException(e);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; Runnable &lt;span style="color:#a6e22e"&gt;deal2&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; threadNum, CountDownLatch latch) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; Runnable() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;run&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; LOGGER.&lt;span style="color:#a6e22e"&gt;info&lt;/span&gt;(threadNum &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;开始运行&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SleepUtil.&lt;span style="color:#a6e22e"&gt;sleep&lt;/span&gt;(1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; LOGGER.&lt;span style="color:#a6e22e"&gt;info&lt;/span&gt;(threadNum &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;运行结束&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt; (Exception e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;finally&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; latch.&lt;span style="color:#a6e22e"&gt;countDown&lt;/span&gt;(); &lt;span style="color:#75715e"&gt;// 放在 finally 语句块中，无论程序正常执行还是出现异常，都会执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>异步的使用</title><link>https://ongoingblog.org/2022/12/async-usage/</link><pubDate>Sat, 10 Dec 2022 10:30:00 +0800</pubDate><guid>https://ongoingblog.org/2022/12/async-usage/</guid><description>&lt;p&gt;前言: 在代码逻辑中，你为什么要起异步？起异步的目的是什么？
让这个逻辑的响应顺序返回给前台？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;还是为了加快程序的处理速度，让程序并行执行，压榨机器，利用好机器的每一份性能。&lt;/li&gt;
&lt;li&gt;小心在业务程序中打日志。这是有可能影响性能的，如果要用的话，可以使用异步日志。当然这要考虑日志丢失的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本类中调用异步方法
在异步方法中断点，发现会阻断主程序。&lt;/p&gt;
&lt;p&gt;使用IDEA软件中的断点时，将断点的类型置为Thread类型。&lt;/p&gt;</description></item><item><title>事务和异步</title><link>https://ongoingblog.org/2022/12/transaction-and-async/</link><pubDate>Tue, 06 Dec 2022 22:47:00 +0800</pubDate><guid>https://ongoingblog.org/2022/12/transaction-and-async/</guid><description>&lt;p&gt;前言: 昨天在生产上遇到了一个问题。
无缘无故遇到了空指针。但是大部分都是正常的，少部分根据那个key在表中查不到数据。&lt;/p&gt;
&lt;p&gt;最后发现是因为外层事务未完成，里面起的异步线程就开始跑了，但是根据key查不到外面方法里要插的数据，因为这个时候外层方法还没有提交.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;A&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Transactional&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;exec&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 事务开始
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// insert 操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; insert(key);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 调用异步方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; method(key);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 事务结束
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;B&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Async&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;@Transactional&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;method&lt;/span&gt;(String key) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 异步操作开始
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; selectByKey(key);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 其他操作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将前面的插入操作单独起事务，在异步之前就让事务提交掉。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Linux 中的一些网络命令</title><link>https://ongoingblog.org/2022/09/network-commands-in-linux/</link><pubDate>Sun, 18 Sep 2022 12:20:00 +0800</pubDate><guid>https://ongoingblog.org/2022/09/network-commands-in-linux/</guid><description>&lt;p&gt;查看默认网关的三种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;route -n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip route show&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netstat -rn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="挂载"&gt;挂载&lt;/h3&gt;
&lt;p&gt;编辑好&lt;code&gt;/etc/fstab&lt;/code&gt;文件后，重新加载配置使更改生效，使用&lt;code&gt;sudo mount&lt;/code&gt;去刷新这个文件。&lt;/p&gt;</description></item><item><title>个人电脑的磁盘管理</title><link>https://ongoingblog.org/2022/09/my-computer-disk-management/</link><pubDate>Mon, 12 Sep 2022 21:24:00 +0800</pubDate><guid>https://ongoingblog.org/2022/09/my-computer-disk-management/</guid><description>&lt;p&gt;前言: 说下电脑的磁盘管理。&lt;/p&gt;
&lt;p&gt;现有两块硬盘. 内存12G.&lt;/p&gt;
&lt;p&gt;第一块硬盘：120G固态。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;C = windows系统盘(40G)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;D = 20G
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;E = 40G
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/boot = 600M
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二块磁盘 = 2T机械硬盘&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/ = 100G
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/home = 1000G
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/swap = 10G
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;F = 新加卷(300G)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;FREE = 剩下的留在那里没有分配
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Linux rsync 命令的使用</title><link>https://ongoingblog.org/2022/09/usage-of-rsync-command/</link><pubDate>Mon, 12 Sep 2022 21:22:00 +0800</pubDate><guid>https://ongoingblog.org/2022/09/usage-of-rsync-command/</guid><description>&lt;p&gt;前言：在备份的过程中又了解了 rsync 这个命令。这个命令第一次是全部备份。第二次同步的时候就是增量备份了。&lt;/p&gt;
&lt;h2 id="基本使用"&gt;基本使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;备份&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rsync -r source_dir target_dir 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-r&lt;/code&gt; = recursive&lt;/p&gt;
&lt;p&gt;试验的话，不进行实际操作，可以使用选项&lt;code&gt;-ni&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="参考"&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/opensourceway/rsync-backup-script"target="_blank" rel="noopener noreferrer"&gt;https://github.com/opensourceway/rsync-backup-script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linux.cn/article-8237-1.html"target="_blank" rel="noopener noreferrer"&gt;https://linux.cn/article-8237-1.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://banbanpeppa.github.io/2019/09/18/linux/rsync/"target="_blank" rel="noopener noreferrer"&gt;https://banbanpeppa.github.io/2019/09/18/linux/rsync/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://avcourt.github.io/tiny-cluster/2019/02/08/backups.html"target="_blank" rel="noopener noreferrer"&gt;https://avcourt.github.io/tiny-cluster/2019/02/08/backups.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lex-2008.github.io/en/rsync-backups.html"target="_blank" rel="noopener noreferrer"&gt;https://lex-2008.github.io/en/rsync-backups.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>boot-repair</title><link>https://ongoingblog.org/2022/09/boot-repair/</link><pubDate>Tue, 06 Sep 2022 07:25:00 +0800</pubDate><guid>https://ongoingblog.org/2022/09/boot-repair/</guid><description>&lt;p&gt;前言：windows 和 ubuntu16 双系统引导有时候会出问题，这个时候我们可以使用&lt;code&gt;boot-repair&lt;/code&gt;这个工具来修复它。&lt;/p&gt;
&lt;p&gt;我们需要准备&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个修复 u 盘，里面烧录好 ubuntu 系统，我这里是 ubuntu16&lt;/li&gt;
&lt;li&gt;bios 中选择从 u 盘启动&lt;/li&gt;
&lt;li&gt;选择试用模式 try ubuntu&lt;/li&gt;
&lt;li&gt;进入系统后，先调整系统时间，否则更新源的时候可能会有问题。&lt;/li&gt;
&lt;li&gt;换源更新&lt;/li&gt;
&lt;li&gt;从命令行中安装 boot-repair 工具&lt;/li&gt;
&lt;li&gt;启动 boot-repair，选择推荐修复&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="命令行安装-boot-repair"&gt;命令行安装 boot-repair&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 这一步如果网络不好，可能会一直卡住，似乎手机流量可以临时添加下。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo add-apt-repository ppa &lt;span style="color:#f92672"&gt;=&lt;/span&gt;yannubuntu/boot-repair 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudoapt-getTupdate+08 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt-get install -y boot-repair
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装如果出现&lt;code&gt;E = Unable to locate package boot-repair&lt;/code&gt;，则&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cd /etc/apt/sources.list.d/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开此目录下名为&lt;code&gt;yannubuntu-ubuntu-boot-repair-xenial.list&lt;/code&gt;进行如下的更改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;- deb http://ppa.launchpad.net/yannubuntu/boot-repair/ubuntu xenial main
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;+ deb http://ppa.launchpad.net/yannubuntu/boot-repair/ubuntu bionic main
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>双系统的安装：windows 和 ubuntu</title><link>https://ongoingblog.org/2022/09/install-windows-and-ubuntu-with-two-disks/</link><pubDate>Sun, 04 Sep 2022 13:24:00 +0800</pubDate><guid>https://ongoingblog.org/2022/09/install-windows-and-ubuntu-with-two-disks/</guid><description>&lt;p&gt;前言：
因为最近疫情的原因，可能需要在家办公。但是因为上次想从 ubuntu16 换到 ubuntu22 的原因，导致自己电脑上 windows 系统不能启动的原因，我需要重新装一下 windows 系统。&lt;/p&gt;
&lt;p&gt;我的电脑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两块硬盘
&lt;ul&gt;
&lt;li&gt;第一块：120G 固态&lt;/li&gt;
&lt;li&gt;第二块：2T 机械
现在选择将 windows 装在 120 G 固态上，将 ubuntu 装在机械硬盘上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="windows-安装"&gt;Windows 安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;提前准备好 PE U 盘，复制好 windows 镜像到 u 盘中&lt;/li&gt;
&lt;li&gt;使用 PE 的分区功能给硬盘分好区，可以快速分区，也可以自定义分区。
&lt;ul&gt;
&lt;li&gt;因为只有 120G，所以分了三个区 (C = 40G, D: 20G, E: 52G)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从 PE 中启动，右键镜像文件选择装载&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;setup.exe&lt;/code&gt; 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我这里点击了之后安装程序有报错：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;我们无法创建新的分区，也找不到现有的分区。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后使用复制方法安装的，复制解压后镜像中的四个文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;boot 文件夹
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sources 文件夹
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bootmgr 文件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到已经分好区的系统盘 (之前分好的 C 盘).
重启计算机即可。&lt;/p&gt;
&lt;h2 id="ubuntu16-安装"&gt;Ubuntu16 安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;关于 efi 和/boot 的安装
这次是将/boot 和 windows 装在同一块硬盘上的。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Use gpg to secure your commit</title><link>https://ongoingblog.org/2022/08/use-gpg-to-secure-your-commit/</link><pubDate>Sun, 21 Aug 2022 20:18:00 +0800</pubDate><guid>https://ongoingblog.org/2022/08/use-gpg-to-secure-your-commit/</guid><description>&lt;p&gt;前言：使用 gpg 加密自己的 commit。&lt;/p&gt;
&lt;img src="gpg-01.png" alt=""&gt;&lt;p&gt;效果：类似下图，对于 commit 会有一个 verify 的绿色小标记&lt;/p&gt;
&lt;img src="verified.png" alt=""&gt;&lt;h3 id="电脑环境"&gt;电脑环境&lt;/h3&gt;
&lt;p&gt;系统：ubuntu16.04&lt;/p&gt;
&lt;h3 id="安装流程"&gt;安装流程&lt;/h3&gt;
&lt;p&gt;&lt;a href="www.gnupg.org"&gt;源码&lt;/a&gt;编译安装。&lt;/p&gt;
&lt;h3 id="使用"&gt;使用&lt;/h3&gt;
&lt;h4 id="一查看本机的-gpg-version"&gt;一、查看本机的 gpg version&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gpg --version 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="二生成本地-gpg-key"&gt;二、生成本地 gpg key&lt;/h4&gt;
&lt;h4 id="三将-gpg-key-和-git-关联起来"&gt;三、将 gpg key 和 git 关联起来&lt;/h4&gt;
&lt;h4 id="四将-gpg-公钥上传至-github"&gt;四、将 gpg 公钥上传至 github&lt;/h4&gt;
&lt;h4 id="五git-设置-gpg"&gt;五、git 设置 gpg&lt;/h4&gt;
&lt;h4 id="五备份-gpg"&gt;五、备份 gpg&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;备份密钥分为备份公钥和私钥两个部分，备份公钥：
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gpg -o keyfilename --export KeyID
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;如果没有KeyID则是备份所有的公钥，-o表示输出到文件keyfilename中，如果加上-a的参数则输出文本格式的信息，否则输出的是二进制格式信息。
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;备份私钥：
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gpg -o keyfilename --export-secret-keys KeyID
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;如果没有KeyID则是备份所有的私钥，-o表示输出到文件keyfilename中，如果加上-a的参数则输出文本格式的信息，否则输出的是二进制格式信息。
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;然后在别的机器上可以通过
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gpg --import filename
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;导入这些密钥信息。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="六参考"&gt;六、参考&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.github.com/zh/authentication/managing-commit-signature-verification/generating-a-new-gpg-key"target="_blank" rel="noopener noreferrer"&gt;Github 官方文档&lt;/a&gt;有比较详细的说明。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/help/idea/2025.1/set-up-GPG-commit-signing.html?Set_up_GPG_commit_signing"target="_blank" rel="noopener noreferrer"&gt;IDEA 中关于 gnupg 的配置&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Linux tar 命令的使用</title><link>https://ongoingblog.org/2022/08/usage-of-tar-command/</link><pubDate>Sat, 13 Aug 2022 20:19:00 +0800</pubDate><guid>https://ongoingblog.org/2022/08/usage-of-tar-command/</guid><description>&lt;p&gt;前言：前段时间为了安装新的系统需要将需要将一些目录备份下来，搜了下可以使用&lt;code&gt;tar&lt;/code&gt;这个命令。&lt;/p&gt;
&lt;p&gt;Tar(Tape ARacive) = 磁带归档。&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;选项&lt;/th&gt;
 &lt;th&gt;含义&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;-c&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;create a new tar file&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;过程打印在 console 上&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;-f&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;指定文件&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;-z&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;gunzip&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;-j&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;bzip2&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;保留原文档的权限与属性&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;-g&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;增量同步&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用 tar 时，可以将&lt;code&gt;-f filename&lt;/code&gt;与其他选项独立出来，会比较不容易发生问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;压缩：&lt;code&gt;tar -jcv -f filename.tar.bz2 需要被压缩的文件或目录&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查询：&lt;code&gt;tar -jtv -f filename.tar.bz2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解压缩：&lt;code&gt;tar -jxv -f filename.tar.bz2 - C 放置解压缩文件的目录&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="增量备份"&gt;增量备份&lt;/h2&gt;
&lt;p&gt;一个小测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建 test_tar 文件夹，文件夹中创建三个文件 = a, b, c。创建第一个 tarball:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar -g snapshot -zcf backup_full.tar.gz test_tar 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar ztf backup_full.tar.gz 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在 test_tar 文件夹中添加新文件 d 后，创建第二个 tarball =&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar -g snapshot -zcf back_ince_01.tar.gz test_tar 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar ztf back_ince_01.tar.gz 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在 test_tar 文件夹中添加新文件 e，并且往文件中写入一句话&amp;quot;hello, tar&amp;quot;，后创建第三个 tarball =&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar -g snapshot -zcf back_ince_02.tar.gz test_tar 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar ztf back_ince_02.tar.gz 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;删除 test_tar 文件夹及其中文件，从 tarball 中还原出原来的文件：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# extract&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar zxf backup_full.tar.gz 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar zxf back_ince_01.tar.gz 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tar zxf back_ince_02.tar.gz 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打完包后如果想要加密的话，可以使用 7zip 或者其他软件进行加密。&lt;/p&gt;</description></item><item><title>数据库表定义时表中冗余代码字段的重要性</title><link>https://ongoingblog.org/2022/08/the-importance-of-speccode/</link><pubDate>Thu, 11 Aug 2022 12:45:00 +0800</pubDate><guid>https://ongoingblog.org/2022/08/the-importance-of-speccode/</guid><description>&lt;p&gt;前言：今天讲的是冗余代码的作用。&lt;/p&gt;
&lt;p&gt;冗余代码不仅在数据库表中有重要作用，也在请求接口中有重要作用！&lt;/p&gt;
&lt;p&gt;数据库中在设计表的时候就提前划分一个字段冗余码，我们后期想要添加什么信息，但是又不好动原表时，这个时候冗余码的作用就非常重要了，直接用上冗余码就好。&lt;/p&gt;
&lt;p&gt;在续传接口也可以使用。&lt;/p&gt;</description></item><item><title>表查询中的续传</title><link>https://ongoingblog.org/2022/08/resume-from-break-point/</link><pubDate>Thu, 11 Aug 2022 12:33:00 +0800</pubDate><guid>https://ongoingblog.org/2022/08/resume-from-break-point/</guid><description>&lt;p&gt;前言：关于表查询续传的注意事项。&lt;/p&gt;
&lt;p&gt;todo 建一张测试表，里面插数据&lt;/p&gt;
&lt;p&gt;InputX1.java&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;InputX1&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; String partitionNo;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; String name;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; String desc;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;InputY1.java&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;InputY1&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;boolean&lt;/span&gt; continuationCode; &lt;span style="color:#75715e"&gt;// 续传标志&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; String partitionNo; &lt;span style="color:#75715e"&gt;// 续传标志 -1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; String name; &lt;span style="color:#75715e"&gt;// 续传标志 -2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; String specCode; &lt;span style="color:#75715e"&gt;// 冗余代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：续传标志必须要为表的唯一键。&lt;/p&gt;
&lt;p&gt;关于表的查询，有分页查询，也有续传查询，这里所说的是续传查询。&lt;/p&gt;
&lt;p&gt;例如我们的&lt;code&gt;Test_T&lt;/code&gt;中记录数为 11，但是我们每次传输的数量为 10，我们作为请求记录的一方，如果第一次请求得到的记录数为 10，这个时候肯定想要知道表中是不是还有其他数据，这个时候续传的那些标志就起到的作用。&lt;/p&gt;
&lt;p&gt;模拟请求第一次查询，因为不知道数据库表中的情况，Y1 中的那些字段全部置为空 =&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;continuationCode&amp;#34;&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;partitionNo&amp;#34;&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;specCode&amp;#34;&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把这个请求发到数据库中，表中有 21 条数据，查回来 10 条，我们这个时候接收到的 Y1 =&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;continuationCode&amp;#34;&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;partitionNo&amp;#34;&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;01&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Mike_10&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;specCode&amp;#34;&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们发现续传标志为 Y，就表示表中是还存在记录的，我们继续查，将 Y1 原封不动返回回去：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;continuationCode&amp;#34;&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;partitionNo&amp;#34;&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;01&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Mike_10&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;specCode&amp;#34;&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到传回来的 Y1 =&lt;/p&gt;</description></item><item><title>程序什么时候应该重试？</title><link>https://ongoingblog.org/2022/06/when-to-retry/</link><pubDate>Thu, 09 Jun 2022 20:47:00 +0800</pubDate><guid>https://ongoingblog.org/2022/06/when-to-retry/</guid><description>&lt;p&gt;前言：两个服务交互的过程中，何时候需要去重试？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;因为网络的原因。例如网络的抖动导致响应超时。&lt;/li&gt;
&lt;li&gt;因为对方资源被其他使用方锁定，我方暂时不能使用，这个也会导致响应超时。这个时候需要等上一段时间后进行重试。&lt;/li&gt;
&lt;li&gt;重试还是失败了，这个时候怎么办？毕竟不能无限重试，总会有次数限制
&lt;ol&gt;
&lt;li&gt;是否需要状态转为人工，人为来处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Ubuntu 网络问题：device not managed</title><link>https://ongoingblog.org/2022/05/ubuntu-network-device-not-managed/</link><pubDate>Sat, 21 May 2022 21:44:00 +0800</pubDate><guid>https://ongoingblog.org/2022/05/ubuntu-network-device-not-managed/</guid><description>&lt;p&gt;前言：今天的 ubuntu 出了些问题，关于网络的。Wifi 列表突然消失，连不上网络。但是窗口里有 device not managed 的显示。&lt;/p&gt;
&lt;p&gt;解决方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编辑文件&lt;code&gt;/etc/NetworkManager/NetworkManager.conf&lt;/code&gt; 中的 managed 为 true&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[ifupdown]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;-managed=false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;+managed=true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启电脑即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>About tomorrow-night codeblock, a problem when updating my blog</title><link>https://ongoingblog.org/2022/02/a-problem-when-updating-my-blog/</link><pubDate>Fri, 18 Feb 2022 20:05:00 +0800</pubDate><guid>https://ongoingblog.org/2022/02/a-problem-when-updating-my-blog/</guid><description>&lt;p&gt;前言：晚上更新了一篇博客的部分内容，推送到远程仓库后，发现 actions 运行失败了，日志这样显示的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;INFO Start processing
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;41
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;FATAL {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;42
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; err = Error: ENOENT: no such file or directory, open &amp;#39;/home/runner/work/xxx/xxx/node_modules/highlight.js/styles/tomorrow-night.css&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为是 file not found 之类的报错，第一反应是之前依赖升级导致的（之前仓库的 bot 自动发起了 PR），升级后这个文件被删除了。&lt;/p&gt;
&lt;img src="pr.png" alt=""&gt;&lt;p&gt;然后将版本号改成 4.0.0 后更新到了远程仓库，action 运行后还是同样的报错。&lt;/p&gt;
&lt;p&gt;之后又重新看了下日志，里面主要是因为找不到名为 xx 的文件导致运行失败的，就试着在本地仓库搜索了下这个文件名称，后来发现我在 hexo 配置中对于代码背景使用了这个 =&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# _config.next.yml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;codeblock &lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# Code Highlight theme&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# All available themes : https://theme-next.js.org/highlight/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;theme &lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;light &lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;default&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;dark &lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;tomorrow-night&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里默认的代码块是使用的这个样式。
然后我又去博客使用的 next 仓库里去找了下，发现了之前的一个&lt;a href="https://github.com/next-theme/hexo-theme-next/commit/6fd36d9ab446fcfaf7357ed9f90c5c1e06115046"target="_blank" rel="noopener noreferrer"&gt;提交&lt;/a&gt;&lt;/p&gt;
&lt;img src="next-history-about-tomorrow.png" alt=""&gt;&lt;p&gt;这里将默认的代码块给修改了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;# _config.next.yml
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;codeblock :
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; # Code Highlight theme
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; # All available themes : https://theme-next.js.org/highlight/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; theme :
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; light : default
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;- dark : tomorrow-night
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;+ dark : stackoverflow-dark
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改完后更新到远程后，此时的 action 就运行正常了。&lt;/p&gt;</description></item><item><title>使用 submodule 遇到的一些坑</title><link>https://ongoingblog.org/2021/11/problems-when-using-submodule/</link><pubDate>Thu, 04 Nov 2021 21:42:00 +0800</pubDate><guid>https://ongoingblog.org/2021/11/problems-when-using-submodule/</guid><description>&lt;p&gt;前言：平时使用的一些常用的脚本以及常用组件如果在不同项目之间复制粘贴不易维护，所以把这些常使用的组件维护为一个仓库，其他项目在使用时把这个仓库添加为子模块 (submodule)，这样的话，易用性和维护性都有了提升。&lt;/p&gt;
&lt;p&gt;下面是我在使用过程中遇到的两个坑点。&lt;/p&gt;
&lt;img src="app_and_submodule.png" alt=""&gt;&lt;h3 id="第一个坑"&gt;第一个坑&lt;/h3&gt;
&lt;p&gt;我的错误做法 = 在仓库里添加了子模块后，子模块的仓库会被 clone 到当前仓库中。使用&lt;code&gt;git status&lt;/code&gt;会发现我们的子模块被添加到了 git 的缓冲区了，我之前不想让它加入缓冲区，就在仓库的 .gitignore 中添加了排除子模块的语句，之后 git push 就不能使用了。尝试重新生成 ssh key，但依旧没有起作用。&lt;/p&gt;
&lt;p&gt;解决：之后在 .gitignore 中删除了之前添加了忽略子模块的语句后，git push 就可以重新使用了。&lt;/p&gt;
&lt;h3 id="第二个坑"&gt;第二个坑&lt;/h3&gt;
&lt;p&gt;之前说过在 add submodule 后，子模块会被加到 git 的缓冲区中，类似下图中的黄色字体&lt;/p&gt;
&lt;img src="submodule.png" alt="使用 git submodule add 后 可以发现缓存区多了两项"&gt;&lt;p&gt;因为当时我还有其他更改需要进行 commit，就使用 &lt;code&gt;git rm --cached 子模块&lt;/code&gt;，把子模块从缓冲区中删除掉了，这个命令执行之后，我的 git push 再次不能不能使用了 (O x O)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并且这个时候使用 git add 把子模块重新加载到缓冲区会有问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以再次使用 git submodule add 子模块 url 命令将子模块再次添加到仓库中，这个命令执行完毕后，我们可以再次看到子模块又出现在了 git 缓冲区中。因为这个就是需要提交到远程仓库的，commit 之后 push，可以在 github 仓库中看到这样的图标：&lt;/p&gt;
&lt;img src="submodule-id.png" alt=""&gt;&lt;p&gt;之后把常用的组件直接拷贝到子模块里，项目里想使用的话直接去进行拉取，并且子模块的分支使用也很灵活。&lt;/p&gt;
&lt;h2 id="关于子仓库的使用"&gt;关于子仓库的使用&lt;/h2&gt;
&lt;p&gt;当我们克隆了一个带有 submodule 的仓库后，克隆完主仓库后，子仓库是没有代码的，只能在主仓库
根目录下看到一个空的子仓库文件夹。如果我们也想要克隆子仓库的话，那么需要以下两步：&lt;/p&gt;
&lt;h3 id="初始化子仓库"&gt;初始化子仓库&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git submodule init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="克隆子仓库"&gt;克隆子仓库&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gitsubmoduleTupdate+08 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们就可以在子仓库中看到代码了。😎&lt;/p&gt;</description></item><item><title>蛇口母港</title><link>https://ongoingblog.org/2021/10/she-kou-home-port/</link><pubDate>Sun, 24 Oct 2021 14:40:00 +0800</pubDate><guid>https://ongoingblog.org/2021/10/she-kou-home-port/</guid><description>&lt;p&gt;前言：今天早上去了深圳的蛇口油轮母港，主要是乘坐“大湾区一号”游玩港珠澳大桥。&lt;/p&gt;
&lt;img src="img-dawanqu.jpg" alt="大湾区一号引擎引起的浪花"&gt;&lt;p&gt;我买的船票是 9:50 分的，蛇口油轮母港并不是很远，早上吃完早饭后打车大概 20 多分钟（因为周末早上也没什么车）就到了。这边的空间很像一个小型的火车站。&lt;/p&gt;
&lt;p&gt;下面这艘船就是我乘坐的小型油轮。
&lt;img src="ship.jpg" alt="大湾区一号"&gt;
选择白天过来还是相当不错的，而且经过上个星期深圳些许冷的天气（我穿两件感觉都要抱着胸口），今天终于迎来了较为不错的晴朗天。
&lt;img src="bridge-1.jpg" alt="远处的港珠澳大桥 -1"&gt;
&lt;img src="bridge-2.jpg" alt="远处的港珠澳大桥 -2"&gt;
&lt;img src="bridge-3.jpg" alt=""&gt;
&lt;img src="bridge-4.jpg" alt=""&gt;
我们的船将要穿过这个桥洞，这时海上的风是真的很大，所以前往那边要多带一件外套呀！
&lt;img src="bridge-5.jpg" alt=""&gt;
因为港珠澳大桥有一段是在海底的，所以下面这个像船一样的建筑物应该就是隧道的入口了吧？
&lt;img src="entry.jpg" alt="这个应该是海底隧道的入口？"&gt;
&lt;img src="ship-catching-fish.jpg" alt="渔船正在开网捕鱼"&gt;
这次过来没有看到有货轮过来装载货物，港口都比较冷清。
&lt;img src="port.jpg" alt="充满货运机械臂的港口"&gt;&lt;/p&gt;
&lt;p&gt;在船上自己感觉还是不能感受到海洋的广阔的，可能因为离海平面太近了吧，如果再高一些，视野和感觉会不会更好一些呢？&lt;/p&gt;</description></item><item><title>关于博客的一些想法</title><link>https://ongoingblog.org/2021/10/some-thoughts-of-my-blog/</link><pubDate>Fri, 22 Oct 2021 19:14:00 +0800</pubDate><guid>https://ongoingblog.org/2021/10/some-thoughts-of-my-blog/</guid><description>&lt;p&gt;前言：下午刷到了一个后缀为&lt;code&gt;.github.io&lt;/code&gt;的博客站点，点进去发现这个博客网站很符合我的审美：它简洁大方且有重点突出，没有其他花里胡哨的东西。并且可以看出博主对待每一篇文章都是很认真的，文章并不“水”，这很重要。&lt;/p&gt;
&lt;p&gt;每次我一看到自己喜欢的博客风格，都想把它移植到我的博客上，但是奈何自己的前端太弱，也不想花太多时间在这个上面，因为博客文章终究还是需要靠质量的，就算博客主题再好看，这里有一点，我纠结的不是博客主题的好看，而是博客的简洁程度，它能够把最简洁的东西呈现在我们的浏览器上，摒弃其他很多不该要的东西，比如不需要的 UI，不需要的效果，因为这些元素的加载反而会拖慢博客文章的加载速度，这对读者并不好。&lt;/p&gt;
&lt;p&gt;我自己的博客被折腾了几次了，每次都花费一番功夫后，把博客整的跟的上现在的“潮流”，然后让它“吃灰”，不再更新有质量有价值的文章。或者说写出有质量有价值的文章要花费的功夫是远远多于“修剪”自己的博客文章主题的。&lt;/p&gt;
&lt;p&gt;如何写出对读者友好的博客是需要花费一番功夫的，不要水。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;关于博客基础设施平台的搭建，我现在使用的是使用 Github Pages 配合 Github Actions 搭建的，具体的可以参考&lt;a href="https://ongoing-z.github.io/posts/deploy-blog-by-github-actions"target="_blank" rel="noopener noreferrer"&gt;这篇文章&lt;/a&gt;,还有推荐一个写作的工具是 &lt;a href="https://www.jetbrains.com/pycharm/"target="_blank" rel="noopener noreferrer"&gt;PyCharm&lt;/a&gt;，当然 IDEA 类的软件其实都挺不错的 (缺点就是太占内存)。如果网络对于 github 网站的速度更加友好的话，可以直接使用 github issues 来书写自己的博客了，但我的电脑情况并不是这样，有时 github 的访问速度让人糟心，看着那个圈圈转了几分钟之后估计就没有写文章的心情了吧（哈哈哈）。&lt;/p&gt;
&lt;p&gt;所以一个方法还是在本地写比较好，写好之后直接推到远程仓库里，当然如果你的网络环境支持你在线进行书写那就非常好了，因为人的想法并不是对着电脑就有的，而是可能在你吃饭时、散步时、打球时等的这些不在工作时间的时候，有句话说的好：“汝欲若学诗，功夫在诗外”。&lt;/p&gt;
&lt;p&gt;文章多以纯文本为主，图片辅助，并且文章的段落需要安排好，各个段落的作用要有把控。如果有多个较短的段落，看能否把功能相同的段落合并在一起，太多闲散的段落不仅让人的注意力不能集中，并且渲染出来的样子也不是很好看。&lt;/p&gt;
&lt;p&gt;有质量的文章不是短时间可以练就的，一点点累积。在生活中任何时候想到了可以表达的话语，就可以提炼出来，作为自己文章的一部分。&lt;/p&gt;</description></item><item><title>Linux 服务器报错：No space left on device</title><link>https://ongoingblog.org/2021/10/no-space-left-on-device/</link><pubDate>Mon, 18 Oct 2021 12:56:00 +0800</pubDate><guid>https://ongoingblog.org/2021/10/no-space-left-on-device/</guid><description>&lt;p&gt;前言：之前在测试环境遇到了一个问题，查看应用的日志发现错误：No space left on device。以为是服务器磁盘满了。
首先使用了&lt;code&gt;df -h&lt;/code&gt;查看磁盘的剩余容量，发现大部分都是还没有使用的，就很奇怪为什么会报上面这个错误。&lt;/p&gt;
&lt;p&gt;因为不只是磁盘满了会报这个错误，还有另外一个错误，是关于 inode 的。&lt;/p&gt;
&lt;p&gt;如果磁盘满了或者 inode 也满了，在这两种情况中的一个发生，就会让我们在控制台上看到&lt;code&gt;No space left on device&lt;/code&gt;这样的报错。&lt;/p&gt;
&lt;img src="no-space.png" alt=""&gt;&lt;p&gt;那么如何查看当前机器上的 inode 情况呢？使用&lt;code&gt;df -i&lt;/code&gt;命令即可查看。&lt;/p&gt;
&lt;img src="df_i.png" alt=""&gt;&lt;p&gt;所以当我们使用 &lt;code&gt;df -h&lt;/code&gt; 发现磁盘还未满的时候，还要用 &lt;code&gt;df -i&lt;/code&gt; 验证下 inode 是否已满，因为有可能发生 inode 已经用光，但是硬盘还未存满的情况。这时，就无法在硬盘上创建新文件。&lt;/p&gt;
&lt;h3 id="参考"&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2011/12/inode.html"target="_blank" rel="noopener noreferrer"&gt;http://www.ruanyifeng.com/blog/2011/12/inode.html&lt;/a&gt;&lt;/p&gt;</description></item><item><title>海滩较场尾</title><link>https://ongoingblog.org/2021/08/the-end-of-the-beach/</link><pubDate>Wed, 18 Aug 2021 22:09:00 +0800</pubDate><guid>https://ongoingblog.org/2021/08/the-end-of-the-beach/</guid><description>&lt;p&gt;前言：上个月去了一趟较场尾海滩，当时是 7 月底了，正直盛夏。&lt;/p&gt;
&lt;p&gt;这算是一次团建，也是我入职之后的第一次和团队之间出去玩。其实感觉还不错。&lt;/p&gt;
&lt;p&gt;周六早上组织车队一起前往那边，大概开了两个多小时到了大棚城。不知道是不是因为酷暑的原因，太阳太大了，在路上实在是只想走在阴凉地方。还好里面有小卖部，买了一个冰棒坐在公园里“啃”。&lt;/p&gt;
&lt;p&gt;我们住在海滩旁边的民宿小镇。里面似乎全部都是自建的房子，因为房子是各式各样的。出了租住的地方，走几步就是海滩。其实第一次见到海滩有些失望呢&amp;hellip;因为它被山环绕起来了，我想见到的是一望无际的大海。去年在青岛时见到的是远方看不到边际的大海，但当时的海边实在有些浑浊，这边的也是一样。不过青岛那个广场风光着实不错，夜景让我沉迷，晚上也去了那边散步，听浪拍打岸边的声音。&lt;/p&gt;
&lt;p&gt;接下来就是晚上的烧烤加上喝酒了，不得不说如果这是在海边就更加不错了哈~&lt;/p&gt;
&lt;p&gt;下面是在海边拍的两幅图：&lt;/p&gt;
&lt;img src="sea-1.jpg" alt=""&gt;&lt;img src="sea-2.jpg" alt=""&gt;</description></item><item><title>Ubuntu16 安装 Rime 输入法</title><link>https://ongoingblog.org/2021/07/ubuntu16-install-rime-inputer/</link><pubDate>Thu, 29 Jul 2021 20:18:00 +0800</pubDate><guid>https://ongoingblog.org/2021/07/ubuntu16-install-rime-inputer/</guid><description>&lt;p&gt;前言：之前一直使用的是谷歌拼音，但是奈何谷歌拼音的词库太老了，有时候很常见的一个词语我就得慢慢挨个选字。现在我的系统里安装的都是 Rime 输入法，这个输入法自己可以定制很多信息。谷歌拼音用的太久了，也应该换个更加省力的输入法了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rime.im/"target="_blank" rel="noopener noreferrer"&gt;Rime&lt;/a&gt; 官网&lt;/li&gt;
&lt;li&gt;机器环境：Ubuntu16.04&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我选用的是 &lt;code&gt;fcitx-rime&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;主要安装步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在命令行中输入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install fcitx-rime
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装完成后系统需要&lt;code&gt;logout&lt;/code&gt;下，重新登录电脑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在命令行输入&lt;code&gt;fcitx-config-gtk3&lt;/code&gt;打开配置面板，搜索 rime&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Rime 的配置文件位于 = &lt;code&gt;~/.config/fcitx/rime&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;刚刚使用可能输出的字都是繁体的，需要打开 rime 配置界面：&lt;code&gt;ctrl + grove&lt;/code&gt;, 这里的 grave 键 是指键盘左上角带有波浪线的那个键位。&lt;/p&gt;
&lt;p&gt;并且它的配置文件里也有配置信息：&lt;/p&gt;
&lt;img src="rime-config.png" alt=""&gt;</description></item><item><title>Zsh 下粘贴中文字符出现乱码</title><link>https://ongoingblog.org/2021/07/paste-chinese-characters-then-messy-code/</link><pubDate>Tue, 27 Jul 2021 19:44:00 +0800</pubDate><guid>https://ongoingblog.org/2021/07/paste-chinese-characters-then-messy-code/</guid><description>&lt;p&gt;前言：在 zsh 下想粘贴中文的字符，但是中文字符粘贴后就是乱码，这里介绍一种解决的方法。&lt;/p&gt;
&lt;p&gt;乱码效果如下图所示：&lt;/p&gt;
&lt;img src="zsh-messy-code.png" alt=""&gt;&lt;p&gt;修改路径为&lt;code&gt;~/.oh-my-zsh/lib&lt;/code&gt;下的 &lt;code&gt;misc.zsh&lt;/code&gt; 文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;# *-magic is known buggy in some versions; disable if so
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;-if [[ $DISABLE_MAGIC_FUNCTIONS != true ]]; then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;+if [[ $DISABLE_MAGIC_FUNCTIONS = true ]]; then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;&lt;/span&gt; for d in $fpath; do
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改之处如绿色字体部分，将判断条件 &lt;code&gt;$DISABLE_MAGIC_FUNCTIONS != true&lt;/code&gt; 修改为 &lt;code&gt;$DISABLE_MAGIC_FUNCTIONS = true&lt;/code&gt;。之后重启 zsh 即可。&lt;/p&gt;</description></item><item><title>Python环境安装</title><link>https://ongoingblog.org/2021/07/install-python-environment/</link><pubDate>Tue, 27 Jul 2021 19:04:00 +0800</pubDate><guid>https://ongoingblog.org/2021/07/install-python-environment/</guid><description>&lt;p&gt;前言：在 Linux 下关于 Python3.9 版本的环境安装，在此记录下。&lt;/p&gt;
&lt;p&gt;首先在 &lt;a href="https://www.python.org/downloads/source/"target="_blank" rel="noopener noreferrer"&gt;Python官网&lt;/a&gt; 下载对应版本的源文件。&lt;/p&gt;
&lt;img src="image_python_source.png" alt=""&gt;&lt;p&gt;下载下来之后直接解压到文件夹 &lt;code&gt;/usr/local/&lt;/code&gt; 下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;➜ pwd 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/usr/local/Python-3.9.6 &lt;span style="color:#75715e"&gt;# 路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来对 Python 源码进行构建：&lt;/p&gt;
&lt;p&gt;在 Python-3.9.6 的根目录下，执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;./configure
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;make
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;make install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;注意：这里可能会出现权限不足的情况，直接 sudo 重试下。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这一步完成后，退出当前 bash/zsh 后重启执行以下命令查看 Python3 的版本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;➜ python3 -V 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Python 3.9.6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>让我困惑的 Subnet Mask(子网掩码)</title><link>https://ongoingblog.org/2021/07/the-confusing-subnet-mask/</link><pubDate>Thu, 22 Jul 2021 19:57:00 +0800</pubDate><guid>https://ongoingblog.org/2021/07/the-confusing-subnet-mask/</guid><description>&lt;p&gt;前言：之前一直不太懂 subnet mask(子网掩码) 这个家伙的作用，不管是看了别人文章里的比喻还是一些计算后，自己还是很懵。但是其实自己懂了之后，其实关键是这个“东西”的作用到底是什么，这个“东西”到底扮演了什么样的角色，这才是较为重要的，不要一上来就直接进行计算，懂得为什么会去这样做才是重中之重。&lt;/p&gt;
&lt;p&gt;首先来声明下 subnet mask 的作用：用来标识主机所连接的网络。是区分 network Id（网络号）和 host Id（主机号）的边界。至于怎么来区别我们下面来说：&lt;/p&gt;
&lt;p&gt;我们熟知的 ip 主要是由两部分组成 = &lt;code&gt;Network ID&lt;/code&gt; + &lt;code&gt;Host ID&lt;/code&gt;.中文翻译过来是 网络号 和 主机号。&lt;/p&gt;
&lt;p&gt;现假设我们的 ip 是 &lt;code&gt;99.0.129.36&lt;/code&gt;，subnet mask 是 &lt;code&gt;255.255.255.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;首先我们将 ip 转换为其二进制的形式，对于 subnet mask 也是如此。&lt;/p&gt;
&lt;img src="Ip_ManimCE_v0.8.0.png" alt=""&gt;&lt;p&gt;得到相对应的二进制编码形式后，有这样一个规则：subnet mask 二进制形式中为 1 的位，则“启用”对应的 ip 的位置，来看下面这张图：&lt;/p&gt;
&lt;img src="TestBrace_ManimCE_v0.8.0.png" alt=""&gt;&lt;p&gt;这样我们就得到了二进制形式的 Network ID = &lt;code&gt;01100011.00000000.10000001&lt;/code&gt;，转换为十进制即&lt;code&gt;99.0.129.0&lt;/code&gt;，这是网络号。&lt;/p&gt;
&lt;p&gt;剩余的位则是 Host ID，有八位。&lt;/p&gt;
&lt;p&gt;又因为在网段中有两个保留位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Host ID 全为 0 时：表示网段号，即 Network ID&lt;/li&gt;
&lt;li&gt;Host ID 全为 1 时：表示广播地址（这里是 99.0.129.255）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此这个网段可以支持的主机数量为 2^8 - 2 = 254 个。&lt;/p&gt;</description></item><item><title>2020 最新版 Next 主题配置文件修改方式</title><link>https://ongoingblog.org/2021/07/2020-latest-next-theme-config-way/</link><pubDate>Mon, 19 Jul 2021 12:30:00 +0800</pubDate><guid>https://ongoingblog.org/2021/07/2020-latest-next-theme-config-way/</guid><description>&lt;p&gt;前言：因为没有修改过的 Next 博客里的排版对于看过无数优秀版面的读者们实在是不太友好，所以需要修改下展示博客的页面。这里我只修改的两个地方的样式：一个是行距，另一个是字体的大小。&lt;/p&gt;
&lt;p&gt;但是由于最新版的 &lt;a href="https://github.com/next-theme/hexo-theme-next"target="_blank" rel="noopener noreferrer"&gt;Next&lt;/a&gt; 主题的主题配置文件修改方式已经发生改变了，所以下面展示的是最新版的配置方式。我们现在可以直接在站点配置文件的同名目录下新建一个名为&lt;code&gt;_config.next.yml&lt;/code&gt;文件，&lt;strong&gt;首次使用还请将官方主题配置文件全部复制到这里&lt;/strong&gt;，之后对于主题配置的修改就在这里修改，不再对克隆下来的主题文件夹里的配置文件进行修改。&lt;/p&gt;
&lt;p&gt;然后在里面设置启用&lt;code&gt;custom_file_path.variable&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;# Define custom file paths.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;# Create your custom files in site directory `source/_data` and uncomment needed files below.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;custom_file_path =
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;#head = source/_data/head.njk
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;#header = source/_data/header.njk
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;#sidebar = source/_data/sidebar.njk
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;#postMeta = source/_data/post-meta.njk
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;#postBodyEnd = source/_data/post-body-end.njk
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;#footer = source/_data/footer.njk
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;#bodyEnd = source/_data/body-end.njk
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;- #variable = source/_data/variables.styl
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;+ variable = source/_data/variables.styl
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;&lt;/span&gt;#mixin = source/_data/mixins.styl
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;#style = source/_data/styles.styl
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在&lt;code&gt;博客根目录/source/&lt;/code&gt;文件夹下新建&lt;code&gt;_data&lt;/code&gt;文件夹，并且在&lt;code&gt;_data&lt;/code&gt;文件夹下新建文件&lt;code&gt;variables.styl&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;touch variables.styl
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个文件里我们书写关于修改主题行高的配置，写入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yml" data-lang="yml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;// Global line height&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;$line-height-base = 2;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我将全局文章行高设置为 2，阅读起来文字效果较为友好。&lt;/p&gt;</description></item><item><title>通过 Github Actions 部署 Hexo 博客（一）</title><link>https://ongoingblog.org/2021/07/deploy-blog-by-github-actions/</link><pubDate>Mon, 12 Jul 2021 12:15:00 +0800</pubDate><guid>https://ongoingblog.org/2021/07/deploy-blog-by-github-actions/</guid><description>&lt;p&gt;前言：最近看了一些使用 Github Action 去自动化部署博客的文章，看了之后发现确实可以省去部署博客到远程仓库的步骤。使用这个可以带来的好处如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地不再需要 Hexo 环境（当然第一次初始化部署还是需要的），即写好博客后不再需要 &lt;code&gt;hexo clean &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo d&lt;/code&gt;这种生成文章并提交到远程仓库的步骤了。&lt;/li&gt;
&lt;li&gt;本地只需要写好博客源文件 (markdown 格式) 后再提交到远程仓库（也有一种更方便的 &lt;em&gt;issue blog&lt;/em&gt; ，这种后面再说，先说基础版的）&lt;/li&gt;
&lt;li&gt;第一次在 Github 上搭建好部署环境后，就可以脱离 hexo 的环境了，专注于写作上面。&lt;/li&gt;
&lt;/ol&gt;
&lt;img src="hexo_action_process.png" alt=""&gt;&lt;p&gt;下面是基础版的部署详细部署配置内容。&lt;/p&gt;
&lt;h3 id="准备本地环境"&gt;准备本地环境&lt;/h3&gt;
&lt;p&gt;第一次的使用还是需要安装 Hexo 环境的，因为需要初始化项目。&lt;/p&gt;
&lt;p&gt;如果没有安装，使用如下方式进行安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cnpm/npm instal hexo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先进行 Hexo 环境初始化（注意 hexo 初始化需要你的文件夹是空的）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;hexo init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行完毕后会发现目录下多了几个文件，如下面所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;|- .gitignore
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;|- _config.yml # 站点配置文件
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;|- package.json # 一些依赖信息
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;|- scaffolds/ # 模板文件，在本地 hexo new 时会用到，这里不会用到
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;|- source/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; |- _drafts/ # 博客草稿
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; |- _posts/ # 博客正文 markdown 文件
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;|- themes/
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; |- landscape/ # 存放博客主题，这是官方默认的 Landscape 主题
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在在本地测试下 hexo 是否正常运行：&lt;/p&gt;</description></item><item><title>gdb STL pretty printer</title><link>https://ongoingblog.org/2020/11/gdb-stl-pretty-print/</link><pubDate>Thu, 05 Nov 2020 18:19:44 +0800</pubDate><guid>https://ongoingblog.org/2020/11/gdb-stl-pretty-print/</guid><description>&lt;blockquote&gt;
&lt;p&gt;GDB = not easy to learn, but easy to use
=)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;gdb在打印普通变量时会有很好的作用，但是有时想要打印stl中的容器时，返回i的信息却并不怎么友好。&lt;/p&gt;
&lt;p&gt;例如在打印一个&lt;code&gt;map&amp;lt;int, int&amp;gt; mp;&lt;/code&gt;中的变量&lt;code&gt;mp&lt;/code&gt;时，在gdb中使用&lt;code&gt;print mp&lt;/code&gt;返回的是如下的结果&lt;/p&gt;
&lt;img src="pretty_printer_1.png" alt=""&gt;&lt;p&gt;这样的信息很杂，而一般在debug中重要的几点就是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容器中元素个数&lt;/li&gt;
&lt;li&gt;容器中元素值&lt;/li&gt;
&lt;li&gt;容器元素类型&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而上面这几项在返回的信息中很难寻找。&lt;/p&gt;
&lt;p&gt;经过一番搜索，我发现在gdb中可以使用python语言脚本，以及gdb内置的有一个名为&lt;code&gt;pretty printer&lt;/code&gt;的东西，这个东西可以使得在gdb中打印容器时返回的信息是&lt;strong&gt;非常友好&lt;/strong&gt;的！&lt;/p&gt;
&lt;p&gt;这是一篇关于gdb pretty printer的 &lt;a href="https://sourceware.org/gdb/wiki/STLSupport"target="_blank" rel="noopener noreferrer"&gt;GDB wiki STL support&lt;/a&gt;，里边有三种方式，这里展示的是第一种方法。&lt;/p&gt;
&lt;p&gt;下面的是具体的实现步骤，经过这些步骤我们再次在gdb中打印容器时，返回的就不是一大堆杂乱的信息，而是一些重要的信息，如下&lt;/p&gt;
&lt;img src="pretty_printer_2.png" alt=""&gt;&lt;p&gt;对不对，这样的信息是不是就清晰明了的许多呢？如同在ide中debug一样，并且不用使用鼠标点来点去，非常方便。&lt;/p&gt;
&lt;h4 id="使用svn下载一个官方仓库"&gt;使用&lt;code&gt;SVN&lt;/code&gt;下载一个官方仓库&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先自己创建一个文件夹存放这个仓库，例如存放在&lt;code&gt;~/.gdb&lt;/code&gt;下&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;mkdir ~/.gdb
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在本文件夹下执行如下命令
&lt;em&gt;如果没有svn，则需要先安装 Install svn(ubuntu) =&lt;/em&gt; &lt;code&gt;sudo apt-get install subversion&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;svn co svn =//gcc.gnu.org/svn/gcc/trunk/libstdc++-v3/python
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这条命令执行完毕后会发现&lt;code&gt;~/.gdb&lt;/code&gt;目录下多了一个&lt;code&gt;python&lt;/code&gt;文件夹。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;~/.gdbinit&lt;/code&gt;文件中书写如下内容(&lt;code&gt;.gdbinit&lt;/code&gt;文件如不存在则自行创建)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;python
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;import sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sys.path.insert&lt;span style="color:#f92672"&gt;(&lt;/span&gt;0, &lt;span style="color:#e6db74"&gt;&amp;#39;python文件夹的绝对路径&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;from libstdcxx.v6.printers import register_libstdcxx_printers
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;register_libstdcxx_printers &lt;span style="color:#f92672"&gt;(&lt;/span&gt;None&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;end
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;set print pretty on &lt;span style="color:#75715e"&gt;# 使格式更加美观&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;注：第三行中的路径需要根据自己clone下的python自行设定，例如如果根据我前面设定的就是&lt;code&gt;$HOME/.gdb/python&lt;/code&gt;&lt;/em&gt;(这里的&lt;code&gt;$HOME&lt;/code&gt;自行echo $HOME查看下)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经过这两步后重新启动gdb即可。&lt;/p&gt;
&lt;p&gt;当然也可以自己书写python脚本对gdb进行各种设置，这样会更加贴切自己的使用体验。&lt;/p&gt;</description></item><item><title>The max capacity of queue that is simulated by two stacks</title><link>https://ongoingblog.org/2020/11/the-max-capacity-of-queue-that-is-simulated-by-two-stacks/</link><pubDate>Tue, 03 Nov 2020 19:56:52 +0800</pubDate><guid>https://ongoingblog.org/2020/11/the-max-capacity-of-queue-that-is-simulated-by-two-stacks/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;今天在做面试题目的时候遇到了一道题：使用两个栈来模拟一个队列，栈 1 容量为 m，栈 2 容量为 n，且 m&amp;gt;n,
请问这个队列的最大容量是多少？&lt;/p&gt;
&lt;img src="capacity_1.png" alt=""&gt;&lt;p&gt;初始状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$S1.capacity() = m$&lt;/li&gt;
&lt;li&gt;$S2.capacity() = n$&lt;/li&gt;
&lt;li&gt;$Q.size() = 0$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设$S1$用作队列入队的存储空间，$S2$用作队列出对的缓存空间。&lt;/p&gt;
&lt;h3 id="二步骤"&gt;二、步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;假设现在队列 Q 进入$n$个元素，如下面这个状态&lt;/p&gt;
&lt;img src="capacity_2.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对应的，会在 S1 入栈$n$个元素&lt;/p&gt;
&lt;img src="capacity_3.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将 S1 中的元素全部出栈，这 n 个元素被放入栈 S2 中&lt;/p&gt;
&lt;img src="capacity_4.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假设现在再向队列 Q 中推入$n+1$个元素&lt;/p&gt;
&lt;img src="capacity_5.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对应的，向栈 S1 中入栈$n+1$个元素&lt;/p&gt;
&lt;img src="capacity_6.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此时进行出队操作，$E1\sim En$先出队列即：缓存栈 S2 中元素全部出栈&lt;/p&gt;
&lt;img src="capacity_7.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来继续出队&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先将 S1 中出栈 n 个元素到 S2 中&lt;/p&gt;
&lt;img src="capacity_8.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;队列继续出栈&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$E_{n+1}$出队列，对应的栈$S1$出栈最后一个元素&lt;/li&gt;
&lt;li&gt;队列中元素 En+2 到 E2n+1 出队，对应栈 S2 出栈所有元素&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从以上操作中可以看出两个栈模拟出的队列的最大容量为$\color{blue}{2n+1}$。再对队列入队的话，就不能得到正常出队序列了。&lt;/p&gt;</description></item><item><title>Linux gdb 的基本使用</title><link>https://ongoingblog.org/2020/10/gdb-basic-usage-and-some-useful-gdb-ui/</link><pubDate>Sat, 24 Oct 2020 20:31:14 +0800</pubDate><guid>https://ongoingblog.org/2020/10/gdb-basic-usage-and-some-useful-gdb-ui/</guid><description>&lt;p&gt;写 C 或者 C++ 程序时有时候发现出了问题，总是习惯于直接 printf 或者 cout，如果观察的地方比较少，用这种方法还好，但是一旦需要观察的变量多了起来，就非常麻烦。写一大堆累赘的 print 语句很麻烦，而且会让自己的程序变得混乱。&lt;/p&gt;
&lt;p&gt;知道 gdb 这个 linux 调试工具是很久之前的事情了，但是那个时候还是 print 流派（或者不想付出学习新事物的时间，觉得 print 还能应付）,但是现在因为需求的变化，在慢慢使用 gdb 的过程中，发现确实非常好用，也慢慢开始变得熟练了起来。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="gdb-的一些基本命令"&gt;gdb 的一些基本命令&lt;/h3&gt;
&lt;p&gt;注意 = &lt;code&gt;[]&lt;/code&gt;中是可以省略输入的字母。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设置断点：&lt;code&gt;b[reak] 行号&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除断点：&lt;code&gt;delete 断点id&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除所有断点 = &lt;code&gt;delete&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;展示所有断点信息 = &lt;code&gt;i[nfo] b[reakpoints]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意想要使用 gdb，在编译的时候需要在最后加上&lt;code&gt;-g&lt;/code&gt;选项，以便生成的程序中带有调试信息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcc main.c -o main -g&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行程序 = &lt;code&gt;r[un]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看变量的值 = &lt;code&gt;p[rint] 变量名&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看变量类型 = &lt;code&gt;ptype 变量名&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单步执行&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step&lt;/code&gt;
两者的区别是 next 遇到函数不会进入函数内部，step 会执行到函数内部。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看堆栈内容 = &lt;code&gt;i[nfo] frame&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看栈帧： &lt;code&gt;backtrace&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看全局变量和静态变量：&lt;code&gt;info variables&lt;/code&gt;&lt;/p&gt;</description></item><item><title>安装 gdb version 9.2</title><link>https://ongoingblog.org/2020/10/install-gdb-version-9.2/</link><pubDate>Sat, 24 Oct 2020 20:23:51 +0800</pubDate><guid>https://ongoingblog.org/2020/10/install-gdb-version-9.2/</guid><description>&lt;p&gt;想要使用 vim+gdb 的模式，但是本机上的 gdb 为 7.2, 需要手动编译最新的 gdb9.2.&lt;/p&gt;
&lt;h3 id="卸载本机-gdb"&gt;卸载本机 gdb&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;rpm -qa | grep gdb&lt;/code&gt;检查，但是虽然本机上可以使用 gdb，上一条指令却没有任何结果。最后使用&lt;code&gt;apt remove&lt;/code&gt;删除了 gdb。&lt;/p&gt;
&lt;h3 id="安装新版本-gdb"&gt;安装新版本 gdb&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;a href="http://ftp.gnu.org/gnu/gdb/"target="_blank" rel="noopener noreferrer"&gt;gun.org&lt;/a&gt;上获取 gdb-9.2.tar.gz&lt;/p&gt;
&lt;img src="install-gdb-version-9.2/gnu_gdb.png" alt=""&gt;&lt;p&gt;&lt;em&gt;注：如果使用浏览器下载太慢，可以使用&lt;a href="https://github.com/subhra74/xdm"target="_blank" rel="noopener noreferrer"&gt;xdm&lt;/a&gt;进行下载&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入解压后的文件夹&lt;code&gt;gdb-9.2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在本文件夹打开终端，如果此时直接执行&lt;code&gt;./configure&lt;/code&gt;后不会有结果，需要根据提示新建一个文件夹&lt;/p&gt;
&lt;img src="install-gdb-version-9.2/build_prob.png" alt=""&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mkdir build&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd build&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt;得到&lt;code&gt;configure&lt;/code&gt;文件的&lt;code&gt;绝对路径&lt;/code&gt;后执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;键入 make 后就需要等待一段时间了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后一步 = &lt;code&gt;sudo make install&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img src="installed_gdb_info.png" alt=""&gt;</description></item><item><title>Implement str functions: strlen, strcpy, strstr and atoi</title><link>https://ongoingblog.org/2020/10/implement-str-functions-strlen-strcpy-strstr-and-atoi/</link><pubDate>Fri, 16 Oct 2020 15:50:09 +0800</pubDate><guid>https://ongoingblog.org/2020/10/implement-str-functions-strlen-strcpy-strstr-and-atoi/</guid><description>&lt;p&gt;自己动手实现的四个库函数，分别是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;strlen&lt;/li&gt;
&lt;li&gt;strcpy&lt;/li&gt;
&lt;li&gt;strstr&lt;/li&gt;
&lt;li&gt;atoi&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;#34;dbg.h&amp;#34;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 实现 strlen，获取字符串长度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;size_t &lt;span style="color:#a6e22e"&gt;strlen&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;str)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;s;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; str; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;s; s&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; s &lt;span style="color:#f92672"&gt;-&lt;/span&gt; str;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 实现 strcpy, 字符串拷贝函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;strcpy&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;to, &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt; from)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; assert(to &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; NULL &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; from &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; NULL); &lt;span style="color:#75715e"&gt;// 注意边界条件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; to;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; ((&lt;span style="color:#f92672"&gt;*&lt;/span&gt;p&lt;span style="color:#f92672"&gt;++&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;from&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; to;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 实现 strstr, 子串查找函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;str_str&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;str, &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;sub)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; assert(str);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; assert(sub);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;str_p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; str;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;start &lt;span style="color:#f92672"&gt;=&lt;/span&gt; str; &lt;span style="color:#75715e"&gt;// start 记录匹配成功的位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;sub_p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sub;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;]; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;start)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; str_p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; start;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sub_p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sub;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 停止条件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 1. 其中一个已经到达&amp;#39;\0&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 2. 两个字符不相等
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;str_p &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;sub_p &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;str_p &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;sub_p)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; str_p&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sub_p&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;sub_p &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//dbg(sub_p);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; strcpy(res, start);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//dbg(res);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; start&lt;span style="color:#f92672"&gt;++&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// str 指针后移
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/* 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 实现 atoi(), 将一个字符串转化为整数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 边界数据：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 1. 带有正负号的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 2. 有空格的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 3. 不是数字的，如字母
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * 4. 溢出的数据
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;my_atoi&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;str)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; sign &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; strlen(str);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (str[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; len) i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 1. 去除左边空格
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 2. 带有正负号
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (str[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;) i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 正号直接过
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (str[i] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span style="color:#75715e"&gt;// 负号需要记录下来
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sign &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 3. 转换
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 无效检测
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (str[i] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; str[i] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 溢出检测
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (num &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; INT_MAX &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (num &lt;span style="color:#f92672"&gt;==&lt;/span&gt; INT_MAX &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; (str[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; INT_MAX &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; sign &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; INT_MIN &lt;span style="color:#f92672"&gt;=&lt;/span&gt; INT_MAX;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; num &lt;span style="color:#f92672"&gt;+&lt;/span&gt; (str[i] &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; sign &lt;span style="color:#f92672"&gt;*&lt;/span&gt; num;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; argc, &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 1. strlen
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; str[&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; size_t res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; strlen(str);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;length = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; res &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;====================&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 2. strcpy
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; to[&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; strcpy(to, str);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;to = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; to &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;====================&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 3. strstr
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;sub &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;or&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(str_str(str, sub));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;====================&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 4. atoi
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; dbg(my_atoi(&lt;span style="color:#e6db74"&gt;&amp;#34;124153&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(my_atoi(&lt;span style="color:#e6db74"&gt;&amp;#34;-124153000000000000000000000000000&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(my_atoi(&lt;span style="color:#e6db74"&gt;&amp;#34;hhhh&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(my_atoi(&lt;span style="color:#e6db74"&gt;&amp;#34; 132&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果
&lt;img src="str.png" alt=""&gt;&lt;/p&gt;</description></item><item><title>冒泡排序</title><link>https://ongoingblog.org/2020/10/bubble-sort/</link><pubDate>Fri, 16 Oct 2020 13:19:14 +0800</pubDate><guid>https://ongoingblog.org/2020/10/bubble-sort/</guid><description>&lt;p&gt;冒泡排序，是一种交换类的排序，通过一系列交换动作完成。在排序过程中，第一个关键字和第二个比较，若第一个大，则交换，否则不交换；然后第二个与第三个比较，进行之前类似动作，知道最大的关键字到了序列的最后，则一趟冒泡排序完成。无序序列元素减一，有序序列元素加一。经过多次排序，然后无序序列变为有序序列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法结束条件&lt;/strong&gt; = $\color{blue}{在一趟排序过程中没有发生关键字交换}$。&lt;/p&gt;
&lt;p&gt;下边是算法的具体实现 =&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;#34;dbg.h&amp;#34;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;bubbleSort&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; R[], &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; flag; &lt;span style="color:#75715e"&gt;// 交换标志
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i&lt;span style="color:#f92672"&gt;--&lt;/span&gt;) &lt;span style="color:#75715e"&gt;// 无序序列范围
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; flag &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; j &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; i; j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;) &lt;span style="color:#75715e"&gt;// i 不断减小，无序序列元素不断减少，i 之后都是有序序列元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (R[j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; R[j]) &lt;span style="color:#75715e"&gt;// 前一个关键字大于后一个，则交换
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; temp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; R[j];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; R[j] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; R[j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; R[j&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; temp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 若发生交换，将 falg 置为 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; flag &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (flag &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) &lt;span style="color:#75715e"&gt;// 一趟排序中没有发生交换，则有序，算法结束。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; argc, &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; R[] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;18&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;28&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;38&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Before sorting = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(R);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(R) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(R[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;After sorting = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bubbleSort(R, len);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(R);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果 =
&lt;img src="bubble_sort.png" alt=""&gt;&lt;/p&gt;</description></item><item><title>归并排序</title><link>https://ongoingblog.org/2020/10/merge-sort/</link><pubDate>Thu, 15 Oct 2020 17:24:27 +0800</pubDate><guid>https://ongoingblog.org/2020/10/merge-sort/</guid><description>&lt;p&gt;归并排序，将两个或两个以上的有序序列组合成一个新的有序序列。&lt;/p&gt;
&lt;p&gt;下边这种将被排序表分成$ \lceil n/2 \rceil$个长度为 2 或 1 的有序表，然后再两两归并。被称作&lt;code&gt;二路归并排序&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下边是&lt;code&gt;二路归并排序&lt;/code&gt;代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;#34;dbg.h&amp;#34;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 将 [low, mid] 和 [mid+1, high] 合成一个有序表
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;merge&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; A[], &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; low, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; mid, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; high)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i, j, k;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; B[high] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;}; &lt;span style="color:#75715e"&gt;// 定义辅助数组
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; low; k &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; high; k&lt;span style="color:#f92672"&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; B[k] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; A[k]; &lt;span style="color:#75715e"&gt;// 将 A 中元素复制到辅助数组 B 中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; low, j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mid &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, k &lt;span style="color:#f92672"&gt;=&lt;/span&gt; i; i &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; mid &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; high; k&lt;span style="color:#f92672"&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (B[i] &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; B[j]) &lt;span style="color:#75715e"&gt;// 将较小值复制到 A 中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; A[k] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; B[i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; A[k] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; B[j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 对剩余的元素进行复制
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; mid) A[k&lt;span style="color:#f92672"&gt;++&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; B[i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (j &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; high) A[k&lt;span style="color:#f92672"&gt;++&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; B[j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;mergeSort&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; A[], &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; low, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; high)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (low &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; high)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; mid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; low &lt;span style="color:#f92672"&gt;+&lt;/span&gt; (high &lt;span style="color:#f92672"&gt;-&lt;/span&gt; low) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 划分序列
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; mergeSort(A, low, mid); &lt;span style="color:#75715e"&gt;// 对左子序列进行递归排序得到一个有序序列
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; mergeSort(A, mid &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, high); &lt;span style="color:#75715e"&gt;// 对右子序列进行递归排序得到一个有序序列
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; merge(A, low, mid, high); &lt;span style="color:#75715e"&gt;// 对最终的两个有序序列进行归并
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; argc, &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; R[] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;53&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;532&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;52&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;67&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;68&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(R);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(R) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(R[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mergeSort(R, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, len &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(R);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果&lt;/p&gt;</description></item><item><title>选择排序</title><link>https://ongoingblog.org/2020/10/selection-sort/</link><pubDate>Tue, 13 Oct 2020 20:24:38 +0800</pubDate><guid>https://ongoingblog.org/2020/10/selection-sort/</guid><description>&lt;p&gt;选择排序是交换排序的一种。它的思想是每一轮选出最小者交换到左侧。&lt;/p&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;#34;dbg.h&amp;#34;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;selectSort&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; R[], &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; argc, &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; R[] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;18&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;28&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;38&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Before sorting = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(R);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(R) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(R[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;After sorting = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; selectSort(R, len);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(R);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;selectSort&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; R[], &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; minIndex &lt;span style="color:#f92672"&gt;=&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 1. 找到元素 i 右侧最小值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; j &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; n; j&lt;span style="color:#f92672"&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; minIndex &lt;span style="color:#f92672"&gt;=&lt;/span&gt; R[j] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; R[minIndex] &lt;span style="color:#f92672"&gt;?&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; minIndex;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//if (R[j] &amp;lt; R[minIndex])
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// minIndex = j;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 2. 交换
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; temp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; R[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; R[i] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; R[minIndex];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; R[minIndex] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; temp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果 =
&lt;img src="selectSort.png" alt=""&gt;&lt;/p&gt;</description></item><item><title>Java 第四部分 多态</title><link>https://ongoingblog.org/2020/10/java-review-part-4-polymorphism/</link><pubDate>Tue, 13 Oct 2020 19:48:34 +0800</pubDate><guid>https://ongoingblog.org/2020/10/java-review-part-4-polymorphism/</guid><description>&lt;p&gt;Java 基础知识第四部分。&lt;/p&gt;




&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#面向对象特性---多态"&gt;面向对象特性 - 多态&lt;/a&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#对象的向上转型"&gt;对象的向上转型&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#对象的向下转型"&gt;对象的向下转型&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#instanceof-关键字"&gt;instanceof 关键字&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#一个案例"&gt;一个案例&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#final-关键字"&gt;final 关键字&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#四种权限修饰符"&gt;四种权限修饰符&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#内部类"&gt;内部类&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;h2 id="面向对象特性---多态"&gt;面向对象特性 - 多态&lt;/h2&gt;
&lt;img src="java_31.png" alt=""&gt;&lt;p&gt;多态针对的是对象。&lt;/p&gt;</description></item><item><title>折半插入排序</title><link>https://ongoingblog.org/2020/10/binary-insertion-sort/</link><pubDate>Mon, 12 Oct 2020 20:22:56 +0800</pubDate><guid>https://ongoingblog.org/2020/10/binary-insertion-sort/</guid><description>&lt;p&gt;直接插入需要在有序数据一个个查找，找到插入位置，然后插入，效率较慢;折半插入是使用&lt;strong&gt;二分查找&lt;/strong&gt;在有序区间查找插入位置，减少查找量。&lt;/p&gt;
&lt;p&gt;总的来说，折半插入排序就是折半查找 + 插入排序。关于直接插入排序可以看这一篇&lt;a href="https://ongoing-z.github.io/blog/posts/2020/10/insertion-sort.html"target="_blank" rel="noopener noreferrer"&gt;文章&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;#34;dbg.h&amp;#34;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;binaryInsetionSort&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; R[], &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 假设初始有序序列为 R[0]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; temp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; R[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; low &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, high &lt;span style="color:#f92672"&gt;=&lt;/span&gt; i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 设置折半查找范围
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (low &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; high) &lt;span style="color:#75715e"&gt;// 开始在有序序列中进行折半查找，
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;//low 为最终查找到的插入位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; mid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; low &lt;span style="color:#f92672"&gt;+&lt;/span&gt; (high &lt;span style="color:#f92672"&gt;-&lt;/span&gt; low) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (R[mid] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; temp)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; high &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mid &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; low &lt;span style="color:#f92672"&gt;=&lt;/span&gt; mid &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; j &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; low; j&lt;span style="color:#f92672"&gt;--&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; R[j &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; R[j]; &lt;span style="color:#75715e"&gt;// 后移，将插入位置空出来
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; R[low] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; temp; &lt;span style="color:#75715e"&gt;// 插入元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; argc, &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; R[] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;18&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;28&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;38&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Before sorting = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(R);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(R) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(R[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;After sorting = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; binaryInsetionSort(R, len);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(R);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果
&lt;img src="binary_insertion_sort.png" alt=""&gt;&lt;/p&gt;</description></item><item><title>Java第三部分 继承</title><link>https://ongoingblog.org/2020/10/java-review-part-3-object-oriented-inheritance/</link><pubDate>Mon, 12 Oct 2020 19:42:44 +0800</pubDate><guid>https://ongoingblog.org/2020/10/java-review-part-3-object-oriented-inheritance/</guid><description>&lt;p&gt;Java 基础知识第三部分。&lt;/p&gt;
&lt;h2 id="面向对象特征---继承性"&gt;面向对象特征 - 继承性&lt;/h2&gt;
&lt;p&gt;继承是多态的前提。&lt;/p&gt;
&lt;p&gt;继承解决的主要问题：&lt;strong&gt;共性抽取&lt;/strong&gt;。&lt;/p&gt;
&lt;img src="java_12.png" alt=""&gt;&lt;p&gt;继承关系当中的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;子类可以拥有父类的“内容”&lt;/li&gt;
&lt;li&gt;子类还可以拥有自己专有的内容&lt;/li&gt;
&lt;/ol&gt;
&lt;img src="java_13.png" alt=""&gt;&lt;p&gt;在父子类的继承关系当中，如果成员变量重名，则&lt;em&gt;创建子类&lt;/em&gt;时，访问有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接通过&lt;strong&gt;子类对象&lt;/strong&gt;访问成员变量 : 等号左边是谁，就优先用谁，没有则向上找。&lt;/li&gt;
&lt;li&gt;间接通过&lt;strong&gt;成员方法&lt;/strong&gt;访问成员变量：该方法属于谁，就优先用谁，没有则向上找。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;区分三种变量&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;局部变量：直接写局部变量名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本类的成员变量：this.成员变量名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;父类成员变量：super.成员变量名&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;继承中成员方法访问规则&lt;/strong&gt; :&lt;/p&gt;
&lt;p&gt;在父子类的继承关系中欧给你，创建子类对象，访问成员方法规则是&lt;/p&gt;
&lt;p&gt;创建的对象是谁，就优先用谁，如果没有则向上找。、&lt;/p&gt;
&lt;p&gt;注意事项：无论是成员方法还是成员变量，如果没有都是向上找父类，不会向下找子类。&lt;/p&gt;
&lt;p&gt;继承中方法的重写(override)/&lt;strong&gt;覆盖&lt;/strong&gt; :&lt;img src="java-review-part-3-object-oriented-inheritance/java_14.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;继承关系&lt;/strong&gt;中，方法的名称一样，参数列表也一样。&lt;/p&gt;
&lt;p&gt;方法覆盖重写特点 :创建的是子类对象，则优先用子类方法&lt;/p&gt;
&lt;p&gt;注意事项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;必须保证父子类之间方法的名称相同，参数列表也相同。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@override&lt;/code&gt; :写在方法前面，用来&lt;strong&gt;检测&lt;/strong&gt;是不是有效的正确覆盖重写。&lt;/p&gt;
&lt;p&gt;写上保证更加的安全。可以不写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子类方法的返回值必须&lt;strong&gt;小于等于&lt;/strong&gt;父类方法的返回值范围。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子类方法权限必须&lt;strong&gt;大于等于&lt;/strong&gt;父类方法权限修饰符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public &amp;gt; protected &amp;gt; (default) &amp;gt; private&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注：(default)不是关键字default, 而是什么都不写，留空。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;设计原则：对于已经投入使用的类，尽量不要修改。推荐定义一个新的类，来重复利用其中共性内容，并且添加改动新内容。&lt;/p&gt;
&lt;p&gt;继承中构造方法访问特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;子类构造方法中有一个默认隐含的&amp;quot;super()&amp;ldquo;调用，所以一定是先调用的父类构造，后执行的子类构造。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子类构造可以通过super关键字来调用父类重载构造&lt;/p&gt;
&lt;img src="java-review-part-3-object-oriented-inheritance/java_15.png" alt=""&gt;&lt;img src="java-review-part-3-object-oriented-inheritance/java_16.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;super的父类构造调用，必须是子类构造方法的第一个语句。不能子类构造调用多次super构造。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img src="java_17.png" alt=""&gt;&lt;p&gt;super关键字的用法 - 3种&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在子类的成员方法中，访问父类成员变量&lt;/li&gt;
&lt;li&gt;在子类成员方法中，访问父类成员方法。&lt;/li&gt;
&lt;li&gt;在子类构造方法中，访问父类构造方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;img src="java_18.png" alt=""&gt;&lt;p&gt;this关键字的用法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在本类成员方法中，访问本类成员变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在本类成员方法中，访问本类的另一个成员方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在本类构造方法中，访问本类另一个构造方法。&lt;/p&gt;
&lt;p&gt;在第三种构造中注意：this(&amp;hellip;)调用也必须是构造方法的第一个语句。唯一一个。&lt;/p&gt;
&lt;p&gt;super和this两种构造调用，不能同时使用，只能使用一个。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;this和super内存图解&lt;/p&gt;
&lt;img src="java_19.png" alt=""&gt;&lt;p&gt;java继承的3个特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;java语言是单继承的。一个类的直接父亲只能有唯一一个。
&lt;img src="java-review-part-3-object-oriented-inheritance/java_20.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;java语言可以多级继承。父亲有父亲。&lt;/li&gt;
&lt;li&gt;一个子类的直接父类唯一，但是一个父类可以有很多子类。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="抽象"&gt;抽象&lt;/h3&gt;
&lt;img src="java_21.png" alt=""&gt;&lt;p&gt;抽象方法定义与抽象类定义&lt;/p&gt;
&lt;img src="java_22.png" alt=""&gt;&lt;p&gt;抽象类和抽象方法的使用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能直接创建new抽象类对象&lt;/li&gt;
&lt;li&gt;必须用一个子类来继承抽象父类。&lt;/li&gt;
&lt;li&gt;子类必须&lt;strong&gt;覆盖重写&lt;/strong&gt;抽象父类当中所有的抽象方法。
覆盖重写（实现）：子类去掉抽象方法的abstract关键字，补上大括号和方法体。&lt;/li&gt;
&lt;li&gt;创建子类对象进行使用。
&lt;img src="java_23.png" alt=""&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="接口"&gt;接口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;接口就是一种&lt;strong&gt;公共规范标准&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;接口是多个类的公共规范，接口是一种引用数据类型。&lt;/li&gt;
&lt;li&gt;接口&lt;strong&gt;最重要的内容&lt;/strong&gt;就是：抽象方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接口定义基本格式：&lt;/p&gt;</description></item><item><title>Java 第二部分 封装</title><link>https://ongoingblog.org/2020/10/java-review-2-object-oriented-encapsulation/</link><pubDate>Sat, 10 Oct 2020 20:25:28 +0800</pubDate><guid>https://ongoingblog.org/2020/10/java-review-2-object-oriented-encapsulation/</guid><description>&lt;p&gt;Java 基础知识第二部分。&lt;/p&gt;
&lt;h3 id="面向对象"&gt;面向对象&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;面向过程：强调步骤&lt;/li&gt;
&lt;li&gt;面向对象：强调对象
&lt;ul&gt;
&lt;li&gt;特征：封装、继承、多态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类：一组相关属性和行为的集合。
&lt;ul&gt;
&lt;li&gt;属性：状态信息&lt;/li&gt;
&lt;li&gt;行为：可以做什么&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类和对象的关系
&lt;ul&gt;
&lt;li&gt;类是对一类事物的描述，是&lt;strong&gt;抽象的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对象是一类事物的实例，是&lt;strong&gt;具体的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;类是对象的模板，对象是类的实体。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="类的定义"&gt;类的定义&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;成员变量（属性）
&lt;ul&gt;
&lt;li&gt;直接定义在类当中，&lt;strong&gt;在方法外边&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;成员方法（行为)
&lt;ul&gt;
&lt;li&gt;无&lt;code&gt;static&lt;/code&gt;关键字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个类不能直接使用，需要根据类创建一个对象，才能使用。&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导包：指出需要什么类，在什么位置。
&lt;code&gt;import 包名称.类名称&lt;/code&gt;
对于和当前类属于同一个包的情况，可以省略导包语句。&lt;/li&gt;
&lt;li&gt;创建：&lt;code&gt;类名称 对象名 = new 类名称();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用
&lt;ol&gt;
&lt;li&gt;使用成员变量：&lt;code&gt;对象名.成员变量名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用成员方法：&lt;code&gt;对象名.成员方法名(参数)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个对象的内存图
&lt;img src="java_7.png" alt=""&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法的进栈和出栈&lt;/li&gt;
&lt;li&gt;堆中&lt;code&gt;成员方法&lt;/code&gt;保存的是一个地址值&lt;/li&gt;
&lt;li&gt;方法要执行，一定要进栈，执行完毕就出栈&lt;/li&gt;
&lt;li&gt;new 之后有默认值&lt;/li&gt;
&lt;li&gt;对象的名称也叫做对象的引用名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用对象类型作为方法的参数：当一个对象作为方法的参数，传递到方法当中时，实际上传递进去的是对象的&lt;strong&gt;地址值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;使用对象作为方法的返回值：返回值其实就是对象的&lt;strong&gt;地址值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;成员变量与局部变量的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义位置不一样（重要）
&lt;ul&gt;
&lt;li&gt;成员变量：在方法外部，直接写在类中&lt;/li&gt;
&lt;li&gt;局部变量：在方法内部&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作用范围不一样（重要）
&lt;ul&gt;
&lt;li&gt;成员变量：整个类可以通用&lt;/li&gt;
&lt;li&gt;局部变量：只有方法中可以使用，出了方法不能使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;默认值不一样
&lt;ul&gt;
&lt;li&gt;成员变量：若没有赋值，会有默认值，规则和数组一样&lt;/li&gt;
&lt;li&gt;局部变量：没有默认值，如果要想使用，必须手动进行赋值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存位置不一样（了解）
&lt;ul&gt;
&lt;li&gt;成员变量：位于堆内存&lt;/li&gt;
&lt;li&gt;局部变量：位于栈内存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生命周期不一样
&lt;ul&gt;
&lt;li&gt;成员变量：随着对象创建而诞生，随着对象被垃圾回收而消失。&lt;/li&gt;
&lt;li&gt;局部变量：随着方法进栈而诞生，随着方法出栈而消失。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法的参数也是局部变量，在调用的时候必然会被赋值。&lt;/p&gt;
&lt;h2 id="面向对象---封装性"&gt;面向对象 - 封装性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;封装在 java 中体现&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法是一种封装&lt;/li&gt;
&lt;li&gt;关键字&lt;code&gt;private&lt;/code&gt;也是一种封装
使用 private 将需要保护的成员变量进行修饰。在本类中可以随意访问，但是超出本类范围之外不能&lt;strong&gt;直接&lt;/strong&gt;访问。
间接访问 private 成员变量：设置一对 getter/setter 方法
&lt;ul&gt;
&lt;li&gt;setter 方法：有参数，无返回值。方法名称必须是&lt;code&gt;set&lt;/code&gt;+首字母变大写 (setXxx)&lt;/li&gt;
&lt;li&gt;getter 方法：无参数，有返回值。方法名称必须是&lt;code&gt;get&lt;/code&gt;+首字母变大写 (getXxx)。&lt;/li&gt;
&lt;li&gt;注意：对于基本数据类型中的&lt;code&gt;boolean&lt;/code&gt;型，Getter 方法一定要写成&lt;code&gt;isXxx&lt;/code&gt;形式，setXxx 规则不变。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;封装：将一些细节信息隐藏起来，对于外界不可见。&lt;/p&gt;</description></item><item><title>Java 第一部分 基础</title><link>https://ongoingblog.org/2020/10/java-review-part-1-basic/</link><pubDate>Sat, 10 Oct 2020 19:32:48 +0800</pubDate><guid>https://ongoingblog.org/2020/10/java-review-part-1-basic/</guid><description>&lt;p&gt;学习 java 时还是大二的时候，当时很多现在新的特性都没有学习，现在重新复习一下 Java 基础部分。&lt;/p&gt;
&lt;h3 id="基础"&gt;基础&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Javaa 虚拟机本身不具备跨平台功能，每个操作系统下有不同版本的虚拟机。&lt;/p&gt;
&lt;img src="JVM.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java 的方法就是类似 C 语言的函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Java" data-lang="Java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;method_name&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 方法体;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;方法名称命名规则：例如&lt;code&gt;小驼峰&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;执行方法需要调用。&lt;/li&gt;
&lt;li&gt;方法定义的顺序无所谓。&lt;/li&gt;
&lt;li&gt;不能在一个方法内定义另一个方法，方法应该定义在类当中。&lt;/li&gt;
&lt;li&gt;方法：若干语句的功能集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译器常量优化
在给变量赋值时，如果右侧表达式都是常量，没有任何变量，那么编译器 javac 将会直接将若干个常量表达式计算得到结果。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;short&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; 3 &lt;span style="color:#f92672"&gt;+&lt;/span&gt; 8;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译之后就是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;short&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; 13;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：一旦表达式中有变量参与，就不能进行这种优化了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;overload(重载): 多个方法的名称相同，但是参数列表不一样。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; cn.mine.day01.demo01;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Demo03OverLoad&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(String&lt;span style="color:#f92672"&gt;[]&lt;/span&gt; args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(sum(10, 20));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; System.&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;println&lt;/span&gt;(sum(10, 20, 30));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sum&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; b) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; a &lt;span style="color:#f92672"&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sum&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; b, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; a &lt;span style="color:#f92672"&gt;+&lt;/span&gt; b &lt;span style="color:#f92672"&gt;+&lt;/span&gt; c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sum&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; b, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; c, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; d) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; a &lt;span style="color:#f92672"&gt;+&lt;/span&gt; b &lt;span style="color:#f92672"&gt;+&lt;/span&gt; c &lt;span style="color:#f92672"&gt;+&lt;/span&gt; d;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;好处：只需要记住一个方法名称，实现类似的多个功能。&lt;/li&gt;
&lt;li&gt;方法重载因素
&lt;ol&gt;
&lt;li&gt;参数 个数不同&lt;/li&gt;
&lt;li&gt;参数类型不同&lt;/li&gt;
&lt;li&gt;参数不同类型、且顺序不同&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;方法重载与下列因素无关
&lt;ol&gt;
&lt;li&gt;与参数名称无关&lt;/li&gt;
&lt;li&gt;与方法返回值类型无关&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在调用&lt;code&gt;println&lt;/code&gt;语句时，它就是进行了多种数据类型的重载形式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="数组"&gt;数组&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数组特点&lt;/p&gt;</description></item><item><title>插入排序</title><link>https://ongoingblog.org/2020/10/insertion-sort/</link><pubDate>Wed, 07 Oct 2020 13:09:33 +0800</pubDate><guid>https://ongoingblog.org/2020/10/insertion-sort/</guid><description>&lt;p&gt;插入排序，将被排序序列分为两个序列，一个是已经排序好的&lt;code&gt;有序序列&lt;/code&gt;, 一个是未经排序的&lt;code&gt;无序序列&lt;/code&gt;, 在排序的过程中，每次取一个无序序列元素到插入到有序序列中适当位置，直到所有无序序列元素插入到有序序列中去。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;#34;dbg.h&amp;#34;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;insertSort&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; R[], &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; temp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 初始将 index = 0 的值默认为有序序列
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; temp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; R[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 有序序列最后一个元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (j &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; temp &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; R[j])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; R[j &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; R[j]; &lt;span style="color:#75715e"&gt;// 后移
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; j&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; R[j &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; temp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; argc, &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; R[] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;18&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;28&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;38&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Before sorting = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(R);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(R) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(R[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;After sorting = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; insertSort(R, len);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(R);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果 =&lt;/p&gt;</description></item><item><title>堆排序</title><link>https://ongoingblog.org/2020/10/heap-sort/</link><pubDate>Sun, 04 Oct 2020 14:55:05 +0800</pubDate><guid>https://ongoingblog.org/2020/10/heap-sort/</guid><description>&lt;p&gt;预备知识 = &lt;a href="https://ongoing-z.github.io/blog/posts/2020/10/Data-structure-heap.html"target="_blank" rel="noopener noreferrer"&gt;Heap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;堆排序，我们知道，堆的根结点值不是最大的 (大顶堆) 就是最小的 (小顶堆)。&lt;/p&gt;
&lt;p&gt;我们将一个无序序列调整为堆后，找到最大值或者最小值交换到序列的最前面或者是最后面，这样有序序列元素就增加一个，无序序列元素减少一个，对新的无序序列进行之前的操作，这样就实现了排序。&lt;/p&gt;
&lt;p&gt;$\color{blue}{ 堆排序适用场景 }$ = 关键字很多的情况。典型例子是从 10000 个关键字中选取前 10 个最小的（或最大的)。例如面试题中经常问到的&lt;code&gt;海量数据问题&lt;/code&gt;就可以使用堆来做。&lt;/p&gt;
&lt;p&gt;如果关键字比较少，则不推荐使用堆排序。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;#34;dbg.h&amp;#34;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 大顶堆调整
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;adjustHeap&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a[], &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; p, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; curParent &lt;span style="color:#f92672"&gt;=&lt;/span&gt; a[p]; &lt;span style="color:#75715e"&gt;// 当前父亲结点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; child &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; p &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 找到当前结点左孩子，并让 child 指向左孩子
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (child &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; len)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (child &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; len &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; a[child] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; a[child &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]) &lt;span style="color:#75715e"&gt;// 如果右孩子结点值大于左孩子
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; child&lt;span style="color:#f92672"&gt;++&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// child 指向右孩子
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (curParent &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; a[child]) &lt;span style="color:#75715e"&gt;// 孩子结点值大于父亲结点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; a[p] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; a[child];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; child;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; child &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; p &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; a[p] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; curParent;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;heapSort&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a[], &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i&lt;span style="color:#f92672"&gt;--&lt;/span&gt;) &lt;span style="color:#75715e"&gt;// 建立初始堆
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; adjustHeap(a, i, len);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i&lt;span style="color:#f92672"&gt;--&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; temp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; a[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; a[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; a[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; a[i] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; temp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; adjustHeap(a, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; argc, &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a[] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;34&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;58&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;55&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;35&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;45&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Before sorting = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(a);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(a) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(a[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; heapSort(a, len);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;After sorting = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(a);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果如下 =&lt;/p&gt;</description></item><item><title>数据结构 - 堆</title><link>https://ongoingblog.org/2020/10/data-structure-heap/</link><pubDate>Sun, 04 Oct 2020 14:03:50 +0800</pubDate><guid>https://ongoingblog.org/2020/10/data-structure-heap/</guid><description>&lt;h3 id="什么是堆"&gt;什么是堆？&lt;/h3&gt;
&lt;p&gt;todo&lt;/p&gt;
&lt;h3 id="堆在生活中的应用"&gt;堆在生活中的应用&lt;/h3&gt;
&lt;p&gt;todo&lt;/p&gt;
&lt;h3 id="实现一个二叉堆"&gt;实现一个二叉堆&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;heap is a data structure
&lt;ul&gt;
&lt;li&gt;必须是一颗完全二叉树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;堆的分类
&lt;ul&gt;
&lt;li&gt;max heap(大顶堆): 父亲大孩子小&lt;/li&gt;
&lt;li&gt;min heap(小顶堆): 父亲小孩子大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;堆的插入
&lt;ul&gt;
&lt;li&gt;heap 的插入在&lt;code&gt;last position&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;last postion 位置的寻找：从上到下，从左到右&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;heap 在每次插入后，都要调整，插入后和父亲比较。
&lt;ul&gt;
&lt;li&gt;if smaller than parent(min heap), then bubble it up.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;堆的删除
&lt;ul&gt;
&lt;li&gt;remove the highest element, then put the element at last position to the top.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下边来完成一次手动模拟，步骤如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; insert(4);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; insert(10);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; insert(15);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; / \
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; / \
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; remove(); insert(0);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;第一步，向一棵空树中插入值为&lt;code&gt;4&lt;/code&gt;的结点
&lt;img src="insert_4.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;第二步，向树中插入值为&lt;code&gt;10&lt;/code&gt;的结点
&lt;img src="insert_10.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;第三步，向树中插入值为&lt;code&gt;15&lt;/code&gt;的结点
&lt;img src="insert_15.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;移除结点
&lt;img src="removal.png" alt=""&gt;&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;第三步&lt;/strong&gt;基础上插入值为&lt;code&gt;0&lt;/code&gt;的结点
&lt;img src="insert_0.png" alt=""&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Insert an element: insert into the last position and bubble it up.&lt;/p&gt;</description></item><item><title>MySQL crash course reading notes</title><link>https://ongoingblog.org/2020/10/mysql-crash-course-reading-notes/</link><pubDate>Fri, 02 Oct 2020 17:22:33 +0800</pubDate><guid>https://ongoingblog.org/2020/10/mysql-crash-course-reading-notes/</guid><description>&lt;p&gt;记录一些在读这本书&lt;a href="https://book.douban.com/subject/3354490/"target="_blank" rel="noopener noreferrer"&gt;《mysql必知必会》&lt;/a&gt;时一些重要的概念。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="一了解数据库"&gt;一、了解数据库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;database&lt;/li&gt;
&lt;li&gt;table(column, datatype, row)&lt;/li&gt;
&lt;li&gt;row == record&lt;/li&gt;
&lt;li&gt;schema(模式): 关于数据库和表的布局及特性的信息&lt;/li&gt;
&lt;li&gt;primary key&lt;/li&gt;
&lt;li&gt;表中任何列都可以作为主键
&lt;ul&gt;
&lt;li&gt;任意两行都不具有相同的主键值&lt;/li&gt;
&lt;li&gt;每个行都必须具有一个主键值(主键列不允许NULL值)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sql(structured query language): 结构化查询语言&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="二mysql简介"&gt;二、mysql简介&lt;/h3&gt;
&lt;p&gt;MySQL命令行登录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mysql -u root -p
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="三使用mysql"&gt;三、使用mysql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用数据库 = use database_name;&lt;/li&gt;
&lt;li&gt;显示数据库 = show databases;&lt;/li&gt;
&lt;li&gt;获得数据库内表的列表 = show tables;&lt;/li&gt;
&lt;li&gt;显示表列 = show columns from table_name;&lt;/li&gt;
&lt;li&gt;自增量 = auto_increment&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="4th-检索数据"&gt;4th 检索数据&lt;/h3&gt;
&lt;p&gt;mysql命令行&lt;strong&gt;必须加上分号&lt;/strong&gt;来结束sql语句。
sql语句不区分大小写，但是对关键字进行大写更易于阅读。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;检索单个列&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;select&lt;/span&gt; prod_name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;table_name&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检索多个列 = 在select后给出多个列名，列名间有逗号。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;select&lt;/span&gt; col1, col2, col3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;table_name&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检索所有列(最后不要随便使用&lt;code&gt;*&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;select&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;table_name&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;distinct关键字&lt;/p&gt;</description></item><item><title>《C and pointer》阅读笔记</title><link>https://ongoingblog.org/2020/10/c-and-pointer-reading-notes/</link><pubDate>Thu, 01 Oct 2020 11:02:57 +0800</pubDate><guid>https://ongoingblog.org/2020/10/c-and-pointer-reading-notes/</guid><description>&lt;p&gt;关于《C 和指针》这本书的读书记录。&lt;/p&gt;
&lt;h3 id="c-和指针"&gt;《C 和指针》&lt;/h3&gt;
&lt;h4 id="1th-快速上手"&gt;1th 快速上手&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数组名&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr[&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假设&lt;code&gt;int&lt;/code&gt;型变量占 4 Byte，那么这个声明，编译器会给 c 预留内存空间 4×4 Byte，并且
数组名代表着指向数组第一个元素的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串常量存储在常量区，常量区存储的内容是不能被修改的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针指定一个存储与计算机内存中的值的地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个 C 程序必须有一个 main 函数，因为它是程序执行的起点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 C 语言中，数组参数是以&lt;code&gt;引用(reference)&lt;/code&gt;形式进行传递的，即传址调用，
而标量和常量是按&lt;code&gt;值(value)&lt;/code&gt;传递的。
在函数中对标量参数的任何修改都会在函数返回时丢失，因此，被调用函数无法修改
调用函数以传值形式传递给它的参数。
然而，当被调用函数修改数组参数的其中一个元素时，调用函数所传递的数组就会被实际地修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 C 语言中，字符串是一串以&lt;code&gt;NUL&lt;/code&gt;字节结尾的字符。&lt;code&gt;NUL&lt;/code&gt;是作为字符串终止符，它本身并不被看作是字符串的一部分。字符串常量就是源程序中被&lt;code&gt;双引号&lt;/code&gt;括起来的一串字符。例如，&lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;在内存中占据 6 个字节的空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于 scanf 函数的实现原理，所有标量参数的前面必须加上一个&lt;code&gt;&amp;amp;&lt;/code&gt;符号。数组参数前面不需要加上&lt;code&gt;&amp;amp;&lt;/code&gt;符号，但是若数组参数中出现下标引用，即实际参数是数组某个特定元素，那么它的前面也必须加上&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编程提示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 while 和 if 表达式中蕴含赋值操作&lt;/li&gt;
&lt;li&gt;始终要进行检查，确保数组不越界&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="3th-数据"&gt;3th 数据&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 C 语言中，仅有 4 中基本数据类型 &amp;ndash;
整型、浮点型、指针和聚合类型（如数组和结构等).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针可以有效地实现如 tree 和 list 这类高级数据结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;房子和它的门牌号码标识&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以把计算机内存想象成一条长街上的一间间房子，每间房子都用一个唯一的号码进行标识。每个位置包含一个值，这和它的地址是独立且显著不同的，即使它们都是数字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序在使用字符串常量会生成一个“指向字符的常量指针”。当一个字符串常量出现于一个表达式中时，表达式所使用的值就是这些字符所存储的地址，而不是这些字符本身。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不能把字符串常量赋值给一个字符数组，因为字符串常量的直接值是一个指针，而不是这些字符本身。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;typedef 允许你为各种数据类型定义新名字。
&lt;code&gt;typedef int another_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用typedef声明类型可以减少使声明变得又臭又长的危险，尤其是那些复杂的声明。&lt;/p&gt;</description></item><item><title>C 语言的一些基础知识 02</title><link>https://ongoingblog.org/2020/10/c-basic-part-2/</link><pubDate>Thu, 01 Oct 2020 10:53:05 +0800</pubDate><guid>https://ongoingblog.org/2020/10/c-basic-part-2/</guid><description>&lt;p&gt;新增一些关于 C 和 C++ 的基础知识。&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数组初始化符号&lt;code&gt;{}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get array length(C)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr[];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; length &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(arr)&lt;span style="color:#f92672"&gt;/&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(arr[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]); &lt;span style="color:#75715e"&gt;// 总字节数/第一个元素字节数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;define&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#define 名字 替换文本&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;（1）符号常量通常用大写字母拼写
（2）末尾无分号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C 中常量 INT_MAX 和 INT_MIN 分别表示最大、最小整数，定义在头文件 limits.h 中。INT_MAX = 2^31-1，INT_MIN= -2^31&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑移位&lt;/p&gt;
&lt;p&gt;逻辑移位 = (1) 逻辑左移 (2) 逻辑右移; 移出的空位都用 0 来补。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nullptr&lt;/p&gt;
&lt;p&gt;其指 c++ 中的空指针常量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c++ delete&lt;/p&gt;
&lt;p&gt;假设 ptr 是一个指针，delete ptr 代表释放内存，只用来释放 ptr 指向的内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to_string()&lt;/p&gt;
&lt;p&gt;将数值转换为字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for 循环遍历字符串的一种新方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; string str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;better&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; c &lt;span style="color:#f92672"&gt;=&lt;/span&gt; str)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; printf(&lt;span style="color:#e6db74"&gt;&amp;#34;%c&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, c);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c++ auto (since C++ 11)(谨慎使用)&lt;/p&gt;</description></item><item><title>两个栈实现一个队列</title><link>https://ongoingblog.org/2020/09/two-stacks-implement-a-queue/</link><pubDate>Wed, 30 Sep 2020 13:17:19 +0800</pubDate><guid>https://ongoingblog.org/2020/09/two-stacks-implement-a-queue/</guid><description>&lt;p&gt;问题：两个栈实现一个队列&lt;/p&gt;
&lt;p&gt;可以下看一下下面这幅图理解一个过程&lt;/p&gt;
&lt;img src="two_stacks_implement_a_queue.png" alt=""&gt;</description></item><item><title>两个队列实现一个栈</title><link>https://ongoingblog.org/2020/09/two-queues-implement-a-stack/</link><pubDate>Wed, 30 Sep 2020 12:49:06 +0800</pubDate><guid>https://ongoingblog.org/2020/09/two-queues-implement-a-stack/</guid><description>&lt;p&gt;一个问题：两个队列如何实现一个栈呢？&lt;/p&gt;
&lt;p&gt;在此先来放一张图片，看一下里边的思路，其实理解起来并不难。&lt;/p&gt;
&lt;img src="two_queues_implement_stack.png" alt=""&gt;&lt;p&gt;最后还有对应的一个问题：两个栈如何实现一个队列？&lt;/p&gt;</description></item><item><title>Grub rescue</title><link>https://ongoingblog.org/2020/09/grub-rescue/</link><pubDate>Wed, 30 Sep 2020 12:06:27 +0800</pubDate><guid>https://ongoingblog.org/2020/09/grub-rescue/</guid><description>&lt;h3 id="背景1"&gt;背景1&lt;/h3&gt;
&lt;p&gt;昨天晚上(20.4.1)忽然看到&lt;code&gt;ubuntu20.04&lt;/code&gt;的操作画面，界面更加体贴用户了，配备了一些很不错的特性，其中一个我很喜欢的就是&lt;code&gt;黑夜模式&lt;/code&gt;。所以就打算换到它了，但是我一直使用的Ubuntu版本是16.04，所以就先打算升级到18.04，再升级到20.04。接下来就开始了一系列更新操作，当时也没有将软件包全部更新到最新版，主要也是因为源的问题，一些包总是&lt;code&gt;请求超时&lt;/code&gt;，所以忽略警告开始升级。&lt;/p&gt;
&lt;p&gt;升级下载过程完毕后，安装花费了很长时间，最后在安装界面上&lt;strong&gt;一直停留在那里不动了&lt;/strong&gt;，已经接近凌晨，索性&lt;code&gt;强制关机&lt;/code&gt;，去睡觉了。&lt;/p&gt;
&lt;p&gt;第二天早上起来接着开机，但是还是卡在那个地方。这个时候就决定放弃这次升级了，打算直接在官网下载&lt;code&gt;ubuntu19.10&lt;/code&gt;版本进行&lt;code&gt;u盘安装&lt;/code&gt;。将&lt;code&gt;iso文件&lt;/code&gt;烧录至u盘后，插入自己的电脑，进入&lt;code&gt;bios界面&lt;/code&gt;，选择从&lt;code&gt;u盘启动&lt;/code&gt;，接下来就是一系列配置过程，可进行&lt;code&gt;默认设置&lt;/code&gt;，或者&lt;code&gt;自定义设置&lt;/code&gt;，这里我选择了自定义设置，因为需要对那几个目录(/home等等)进行磁盘分配。&lt;/p&gt;
&lt;p&gt;设置完毕之后，重新启动，这时出现了问题，开机画面变成了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;GRUB loading
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;error =unknow filesystem
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;grub rescue&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样的字符黑乎乎的界面，上网查找资料，使用了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;grub rescue&amp;gt;set # 查看当前配置
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;grub rescue&amp;gt;ls # 查看当前磁盘及磁盘分区
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;(hd0) (hd0,msdos0)...(hd1) (hd1,msdos9) (hd1,msdos8)...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;# 这里的hd代表磁盘，msdosx代表分区(x为数字)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;开始使用&lt;code&gt;ls&lt;/code&gt;命令找&lt;code&gt;grub&lt;/code&gt;所在的磁盘，找到了，但是在&lt;code&gt;grub\&lt;/code&gt;下并没有&lt;code&gt;normal.mo d&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;所以即使设置了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;set root&lt;span style="color:#f92672"&gt;=(&lt;/span&gt;hd1,msdos6&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#75715e"&gt;# 设置grub启动分区&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;set prefix&lt;span style="color:#f92672"&gt;(&lt;/span&gt;hd1,msdos6&lt;span style="color:#f92672"&gt;)&lt;/span&gt;/boot/grub &lt;span style="color:#75715e"&gt;# 设置grub启动路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;insmod normal
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;后就会出现错误，显示&lt;code&gt;file not found&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而且此时将之强制关机后，开机后会直接进入&lt;code&gt;grub rescue&lt;/code&gt;界面，看不到开机过程中一闪而过的&lt;code&gt;进入bios&lt;/code&gt;的选项界面了，我试了下在开机后，不断按下&lt;code&gt;F2&lt;/code&gt;(我的电脑进入bios的热键是F2)，这下又出现了当初进入bios的界面了。&lt;/p&gt;
&lt;p&gt;寻找Linux核心文件所在分区 =
我的电脑在&lt;code&gt;(hd1,sdb8)&lt;/code&gt;中有名字类似与vmlinuz-3.0.0-12-generic这样的文件，这是Linux核心文件，如果找到，记下(hd1,sdb&lt;code&gt;x&lt;/code&gt;)中的x值。假设找到（hd0,5）时，显示了文件夹中的文件。&lt;/p&gt;
&lt;p&gt;然后用Live USB启动，在Live USB的Ubuntu的终端中依次输入以下命令 =&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果/boot单独分区：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mount /dev/sdb8 /mnt &lt;span style="color:#75715e"&gt;# 注意8这个数字，你需要改写成你自己的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo grub-install --boot-directory&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/mnt /dev/sda
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果/boot没有单独分区：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mount /dev/sda5 /mnt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo grub-install --boot-directory&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/mnt/boot /dev/sda
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重新启动Ubuntu后，发现熟悉的grub启动界面又回来了，这次虽然没有用到最新的20.04,
但开始使用19.10版本了，也算是更新了!&lt;/p&gt;</description></item><item><title>快速排序</title><link>https://ongoingblog.org/2020/09/quick-sort/</link><pubDate>Wed, 30 Sep 2020 11:55:13 +0800</pubDate><guid>https://ongoingblog.org/2020/09/quick-sort/</guid><description>&lt;p&gt;快速排序，顾名思义，在所有排序方法中它是最快的，先说一个它的时间复杂度是 O(nlog2N), 虽然也有其他排序方法的时间复杂度也是这个（例如堆排序），但是快排的常数项是最小的。&lt;/p&gt;
&lt;p&gt;先来看一下代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;#34;dbg.h&amp;#34;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;using&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;quickSort&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;[], &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; argc, &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; R[] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#ae81ff"&gt;49&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;38&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;65&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;97&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;76&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;13&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;27&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;49&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;sort before = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(R);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(R) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(R[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; quickSort(R, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, len &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cout &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;sort after = &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dbg(R);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;quickSort&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; R[], &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; low, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; high)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; temp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; low, j &lt;span style="color:#f92672"&gt;=&lt;/span&gt; high;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (low &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; high)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; temp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; R[low]; &lt;span style="color:#75715e"&gt;// 枢轴
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; j)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (j &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; i &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; R[j] &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; temp) j&lt;span style="color:#f92672"&gt;--&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 从右往左扫描
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; j)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; R[i] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; R[j];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; j &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; R[i] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; temp) i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// 从左往右扫描
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; j)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; R[j] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; R[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; j&lt;span style="color:#f92672"&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; R[i] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; temp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; quickSort(R, low, i &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; quickSort(R, i &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, high);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果如下 (文章中显示变量使用的是&lt;a href="https://github.com/sharkdp/dbg-macro"target="_blank" rel="noopener noreferrer"&gt;dbg&lt;/a&gt;)&lt;/p&gt;</description></item><item><title>Vim markdown即时预览</title><link>https://ongoingblog.org/2020/07/vim-instant-preview/</link><pubDate>Thu, 30 Jul 2020 22:15:03 +0800</pubDate><guid>https://ongoingblog.org/2020/07/vim-instant-preview/</guid><description>&lt;p&gt;在vim中书写markdown文件挺方便的，但是有时侯需要预览一下效果，就有些不方便了，下边我找到一个插件，可以实现这个功能。&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id="安装nodejs"&gt;安装node.js&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo add-apt-repository ppa &lt;span style="color:#f92672"&gt;=&lt;/span&gt;chris-lea/node.js
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;T sudo apt-get update+08 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt-get install nodejs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="安装instant-markdown-d"&gt;安装instant-markdown-d&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo npm -g install instant-markdown-d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注 = 如果&lt;code&gt;npm&lt;/code&gt;太慢，就改用&lt;code&gt;cnpm&lt;/code&gt;进行安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install cnpm -g --registry&lt;span style="color:#f92672"&gt;=&lt;/span&gt;https://registry.npm.taobao.org 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="安装vim插件vim-instant-markdown"&gt;安装vim插件vim-instant-Markdown&lt;/h2&gt;
&lt;p&gt;可以搭配vim插件&lt;code&gt;tabular&lt;/code&gt;和vim插件&lt;code&gt;vim-markdown&lt;/code&gt;使用。如果没有安装这两个插件，在你的&lt;code&gt;.vimrc&lt;/code&gt;文件中加入(注：这里我所使用的vim插件管理器是&lt;code&gt;vim-plug&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-vim" data-lang="vim"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;Plug&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;godlygeek/tabular&amp;#39;&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;#34; 此插件必须在vim-markdown之前&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;Plug&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;plasticboy/vim-markdown&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两个插件安装完毕之后开始安装&lt;code&gt;vim-instant-Markdown&lt;/code&gt;，在你的&lt;code&gt;.vimrc&lt;/code&gt;插件部分添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-vim" data-lang="vim"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;Plug&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;suan/vim-instant-markdown&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行&lt;code&gt;=PlugInstall&lt;/code&gt;，插件安装完成后，在vim打开markdown文件就会在电脑默认的浏览器中打开一个窗口进行实时预览。&lt;/p&gt;</description></item><item><title>shell 生产力环境恢复</title><link>https://ongoingblog.org/2020/07/recover-the-shell-production-environment/</link><pubDate>Thu, 30 Jul 2020 21:55:40 +0800</pubDate><guid>https://ongoingblog.org/2020/07/recover-the-shell-production-environment/</guid><description>&lt;p&gt;最近因为在安装一个 gdb 的浏览器版本时将 ubuntu16.04 本机的 Python2 环境给修改了，然后第二天早上打开我的电脑，发现启动不了，将修改的软链接给还原回来，还是不行&amp;hellip;&lt;/p&gt;
&lt;p&gt;借着这个&amp;quot;机会&amp;quot;，我将 windows10 又重新装入我的电脑了，因为最近刚入手一个西部数据 1T 移动硬盘，买回来之后发现识别不了，它支持的平台只有 windows 和 mac，看了希捷移动硬盘介绍，也是这样。&lt;/p&gt;
&lt;p&gt;中间省略装系统步骤&amp;hellip;这次安装的 ubuntu 版本还是 16.04，为什么呢？因为我之前也安装了 ubuntu20.04，安装好发现 vmware 在这个版本上少了一些库，但是我有好多个虚拟机需要使用，所以最后我又换回了稳定的 ubuntu16.04。&lt;/p&gt;
&lt;p&gt;下面是我恢复 shell 中包括 vim、tmux、zsh 等等的生产力步骤。&lt;/p&gt;
&lt;h2 id="快捷键映射cpas---ctrl"&gt;快捷键映射：cpas -&amp;gt; ctrl&lt;/h2&gt;
&lt;p&gt;安装 &lt;code&gt;gnome-tweak-tool&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install gnome-tweak-tool
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="tmux-tpm-插件管理器"&gt;tmux tpm 插件管理器&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/tmux-plugins/tpm"target="_blank" rel="noopener noreferrer"&gt;tpm 的 github 仓库&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装 tmux 插件命令：&lt;code&gt;prefix + I&lt;/code&gt;，默认&lt;code&gt;prefix&lt;/code&gt;是&lt;code&gt;&amp;lt;ctrl&amp;gt;b&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="zsh-install"&gt;zsh install&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install zsh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="zplug"&gt;zplug&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/zplug/zplug"target="_blank" rel="noopener noreferrer"&gt;zplug 的 github 仓库&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone https://github.com/zplug/zplug .zplug
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="oh-my-zsh"&gt;oh-my-zsh&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh"target="_blank" rel="noopener noreferrer"&gt;oh-my-zsh 的 github 仓库&lt;/a&gt;&lt;/p&gt;</description></item><item><title>二分查找</title><link>https://ongoingblog.org/2020/07/binary-search/</link><pubDate>Sun, 05 Jul 2020 20:21:23 +0800</pubDate><guid>https://ongoingblog.org/2020/07/binary-search/</guid><description>&lt;p&gt;二分法和c语言实现及时间复杂度分析&lt;/p&gt;
&lt;h2 id="1-实现---c"&gt;1. 实现 - C&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 二分查找
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 注意middle的下标和位于数组middle的值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;binary_search&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a[], &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; to_be_found, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; l &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// left index
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; r &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// right index
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (l &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; r) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;//int middle = (l + r) / 2; // find the middle number index
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; middle &lt;span style="color:#f92672"&gt;=&lt;/span&gt; l &lt;span style="color:#f92672"&gt;+&lt;/span&gt; (r &lt;span style="color:#f92672"&gt;-&lt;/span&gt; l) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// find the middle number index
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// 避免溢出
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (a[middle] &lt;span style="color:#f92672"&gt;==&lt;/span&gt; to_be_found) &lt;span style="color:#75715e"&gt;// 刚好中间数就是我们要找的数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; middle;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (a[middle] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; to_be_found) &lt;span style="color:#75715e"&gt;// 中间数 &amp;lt; 要找的数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; l &lt;span style="color:#f92672"&gt;=&lt;/span&gt; middle &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r &lt;span style="color:#f92672"&gt;=&lt;/span&gt; middle &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; argc, &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a[&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;9&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; len &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(a) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(a[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]); &lt;span style="color:#75715e"&gt;// calculate the array&amp;#39;s length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; res &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;binary_search&lt;/span&gt;(a, &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;, len);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (res &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Find out index = %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, res);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;No answer!&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="2-时间复杂度分析"&gt;2. 时间复杂度分析&lt;/h2&gt;
&lt;p&gt;假设数组长度为n，每次查找后长度减半&lt;/p&gt;</description></item><item><title>wps-for-linux 的字体添加及配置</title><link>https://ongoingblog.org/2020/05/the-font-configuration-of-wps-for-linux/</link><pubDate>Sat, 16 May 2020 08:38:48 +0800</pubDate><guid>https://ongoingblog.org/2020/05/the-font-configuration-of-wps-for-linux/</guid><description>&lt;h3 id="一背景"&gt;一、背景&lt;/h3&gt;
&lt;p&gt;这两天需要在 wps 中写点东西，但是里边并没有 word 软件中文的大部分字体，所以需要添加一些字体。&lt;/p&gt;
&lt;p&gt;因为我的系统 (ubuntu16.04) 默认的是英文环境，所以在 wps 的字体选项中没有任何中文选项，就先将系统默认环境改成了中文。在系统应用中搜索&lt;code&gt;language support&lt;/code&gt;，然后将选择语言中的&lt;code&gt;中文&lt;/code&gt;调到第一项中，之后&lt;code&gt;应用到整个环境&lt;/code&gt;，这些都做完之后，登出重新登录。&lt;/p&gt;
&lt;p&gt;现在打开 wps for linux，我发现字体选项中多了几种中文字体，但是常见的字体如“宋体”/“黑体”这些并没有。所以需要为 wps 配置字体。&lt;/p&gt;
&lt;h3 id="二配置字体步骤"&gt;二、配置字体步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果旁边有另一台配置 windows 系统的电脑或者本机里有 windows 电脑，就很方便，直接从&lt;code&gt;C:\windows\fonts\&lt;/code&gt;下复制字体文件，需要什么字体就在文件夹下搜索字体名称即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将复制的字体拷贝到 ubuntu 下的&lt;code&gt;/usr/share/fonts/&lt;/code&gt;下，下一步执行以下命令，生成字体的索引信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mkfontscale
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mkfontdir
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo fc-cache
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启 wps 后发现字体选项中中文字体出现了我们新添加的几种字体。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="三参考"&gt;三、参考&lt;/h3&gt;
&lt;p&gt;[1] &lt;a href="https://blog.csdn.net/liweibin1994/article/details/73384790"target="_blank" rel="noopener noreferrer"&gt;Ubuntu 下 WPS 中文字体显示问题&lt;/a&gt;&lt;/p&gt;</description></item><item><title>记录一些Vim基础</title><link>https://ongoingblog.org/2020/05/record-some-basics-of-vim/</link><pubDate>Wed, 13 May 2020 09:26:21 +0800</pubDate><guid>https://ongoingblog.org/2020/05/record-some-basics-of-vim/</guid><description>&lt;p&gt;记录自己在使用vim中使用的命令和一些方法。&lt;/p&gt;
&lt;h2 id="basic"&gt;Basic&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;: Insert text before the cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt;: Begin a new line below the cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt;: Replace character continually&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt;: Replace character once&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 vi 的环境中,如何将目前正在编辑的文件另存新档名为 newfilename&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;:w newfilename
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到达指定行
2.1 In normal mode: &lt;code&gt;line_numberG&lt;/code&gt;
例: 到达第九行即&lt;code&gt;9G&lt;/code&gt;
2.2 In command mode: &lt;code&gt;:line_number&lt;/code&gt;
例: 到达第九行即&lt;code&gt;:9&lt;/code&gt;
&lt;strong&gt;注&lt;/strong&gt;: 认为第一种方法更为快速，因为如果是第二种方法的话，目光还需要向下移动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到达指定行
( vim &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt;键: &lt;code&gt;\&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vim 替换
具体查看vim帮助文档&lt;code&gt;:h substitute&lt;/code&gt;
全局替换: &lt;code&gt;:%s/search_string/substituted_string/g&lt;/code&gt;
此处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;: 指范围，相当于&lt;code&gt;1~$&lt;/code&gt;，文档的第一行到最后一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g&lt;/code&gt;: replace all occurrences in the line. Without this argument, replacement occurs only for the first occurrence in each line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vim 替换
vim精确查找
先看一个例子，准确查找字符串int：&lt;/p&gt;</description></item><item><title>文章关联 github 及查看文章源文件更新历史</title><link>https://ongoingblog.org/2020/05/link-to-github-and-view-the-updated-history-of-articles-0800/</link><pubDate>Wed, 06 May 2020 16:57:40 +0800</pubDate><guid>https://ongoingblog.org/2020/05/link-to-github-and-view-the-updated-history-of-articles-0800/</guid><description>&lt;p&gt;一段时间之前，看到过一篇博客，博客的最下方有一个按钮，点击之后可以看到博主同步在 github 中的 markdown 源文件，我觉得这个作用很不错。所以经过一番搜索之后，发现了一篇实现此功能的博客 (参考中的第一篇)，还搜索了一下&lt;code&gt;swig&lt;/code&gt;的语法特性，当然是不需要太多的知识的，因为参考中是&lt;code&gt;ejs&lt;/code&gt;语法，这里大概就只需要知道**{{var}}**是变量的写法就足够了。&lt;/p&gt;
&lt;h2 id="作用"&gt;作用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;点击进入仓库可以清晰发现文章增加或者删减的历史记录&lt;/li&gt;
&lt;li&gt;可以在 github 的&lt;code&gt;issues&lt;/code&gt;中讨论（稍稍充当评论系统？??)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="效果"&gt;效果&lt;/h2&gt;
&lt;p&gt;&lt;img src="display.png" alt=""&gt;+08 = &amp;lsquo;00&amp;rsquo;
可以看到&lt;strong&gt;更新历史&lt;/strong&gt;一行有三项 =&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Blame&lt;/code&gt; = 左边是&lt;code&gt;commit&lt;/code&gt;信息，右边是对应代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;History&lt;/code&gt; = 文章修改历史&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.md Raw&lt;/code&gt; = 文章 markdown 源文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="步骤"&gt;步骤&lt;/h2&gt;
&lt;p&gt;首先需要新建一个仓库。仓库建好之后，将&lt;code&gt;博客根目录/source/_posts/&lt;/code&gt;文件夹下的文件 push 到 github 我们新建的仓库中，在我们的博客修改过后，需要我们手动进行上传。&lt;/p&gt;
&lt;p&gt;将下方代码添加至&lt;code&gt;themes/next/layout/_macro/my-copyright-swig&lt;/code&gt;下&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;, 注意这里的&lt;code&gt;my-copyright-swig&lt;/code&gt;是我另建的显示文章结束后&lt;strong&gt;版权&lt;/strong&gt;的文件。创建博客版权的文章在&lt;a href="https://www.jianshu.com/p/93170e7413e9"target="_blank" rel="noopener noreferrer"&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{% if page.copyright %}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;div class=&amp;#34;my_post_copyright&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;script src=&amp;#34;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;!-- JS库 sweetalert 可修改路径 --&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;script src=&amp;#34;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;p&amp;gt;&amp;lt;span&amp;gt;本文标题 =&amp;#34;&amp;lt;/span&amp;gt;{{ page.title }}&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;p&amp;gt;&amp;lt;span&amp;gt;文章作者 =&amp;lt;/span&amp;gt;{{ theme.author }}&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;T&amp;lt;p&amp;gt;&amp;lt;span&amp;gt;发布时间 = &amp;#39;&amp;lt;/span&amp;gt;{{ page.date.format(&amp;#34;YYYY年MM月DD日 - HH:mm:ss&amp;#34;) }}&amp;lt;/p&amp;gt;+08:00&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;T&amp;lt;p&amp;gt;&amp;lt;span&amp;gt;最后更新 = &amp;#39;&amp;lt;/span&amp;gt;{{ page.updated.format(&amp;#34;YYYY年MM月DD日 - HH:mm:ss&amp;#34;) }}&amp;lt;/p&amp;gt;+08:00&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;+ &amp;lt;p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;+ &amp;lt;span&amp;gt;更新历史 =&amp;lt;/span&amp;gt;&amp;lt;i class=&amp;#34;fa fa-github&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;+T &amp;lt;a href=&amp;#39;&amp;#34;&amp;#34;https://github.com/ONGOING-Z/Hexo-blog-backup/blame/master/{{ page.date.format(&amp;#34;YYYY-MM-DD&amp;#34;) }}-{{ page.title }}.md&amp;#34; title=&amp;#34;顺序查看文章各部分修改记录&amp;#34; target = &amp;#34;_blank&amp;#34;&amp;gt;Blame&amp;lt;/a&amp;gt;,&amp;#34;+08:00&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;+T &amp;lt;a href=&amp;#39;&amp;#34;&amp;#34;https://github.com/ONGOING-Z/Hexo-blog-backup/commits/master/{{ page.date.format(&amp;#34;YYYY-MM-DD&amp;#34;) }}-{{ page.title }}.md&amp;#34; title=&amp;#34;查看文章有关更新记录&amp;#34; target = &amp;#34;_blank&amp;#34;&amp;gt;History&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;#34;raw&amp;#34;&amp;gt;文本模式:&amp;lt;/span&amp;gt;&amp;lt;i class=&amp;#34;fa fa-file-text-o&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;#34;+08:00&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;+T &amp;lt;a href=&amp;#39;&amp;#34;&amp;#34;https://raw.githubusercontent.com/ONGOING-Z/Hexo-blog-backup/commits/master/{{ page.date.format(&amp;#34;YYYY-MM-DD&amp;#34;) }}-{{ page.title }}.md&amp;#34; title=&amp;#34;查看 &amp;amp; 下载文章 Markdown 原始文本&amp;#34; target = &amp;#34;_blank&amp;#34;&amp;gt; .md Raw&amp;lt;/a&amp;gt;&amp;#34;+08:00&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;+ &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;&lt;/span&gt; &amp;lt;p&amp;gt;&amp;lt;span&amp;gt;原始链接 =&amp;#34;&amp;lt;/span&amp;gt;&amp;lt;a href=&amp;#34;{{ url_for(page.path) }}&amp;#34; title=&amp;#34;{{ page.title }}&amp;#34;&amp;gt;{{ page.permalink }}&amp;lt;/a&amp;gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;span class=&amp;#34;&amp;#34;copy-path&amp;#34; title=&amp;#34;点击复制文章链接&amp;#34;&amp;gt;&amp;lt;i class=&amp;#34;fa fa-clipboard&amp;#34; data-clipboard-text=&amp;#34;{{ page.permalink }}&amp;#34; aria-label=&amp;#34;复制成功！&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;p&amp;gt;&amp;lt;span&amp;gt;许可协议 =&amp;#34;&amp;lt;/span&amp;gt;&amp;lt;i class=&amp;#34;fa fa-creative-commons&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;a rel=&amp;#34;license&amp;#34; href=&amp;#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&amp;#34; target=&amp;#34;_blank&amp;#34; title=&amp;#34;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&amp;#34;&amp;gt;署名-非商业性使用-禁止演绎 4.0 国际&amp;lt;/a&amp;gt; 转载请保留原文链接及作者。&amp;lt;/p&amp;gt; &amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;script&amp;gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; var clipboard = new Clipboard(&amp;#39;.fa-clipboard&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; clipboard.on(&amp;#39;success&amp;#39;, $(function(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; $(&amp;#34;.fa-clipboard&amp;#34;).click(function(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; swal({ 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; title = &amp;#34;&amp;#34;&amp;#34;, &amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; text = &amp;#39;复制成功&amp;#39;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; html = false,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; timer = 500, 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; showConfirmButton = false
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })); 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{% endif %}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中绿色部分代码是实现效果的代码。这之中我们修改&lt;code&gt;href&lt;/code&gt;的属性对应自己的&lt;strong&gt;仓库信息&lt;/strong&gt;和&lt;strong&gt;文章信息&lt;/strong&gt;即可。&lt;/p&gt;</description></item><item><title>一些Linux的使用</title><link>https://ongoingblog.org/2020/05/some-linux-usage-record/</link><pubDate>Sun, 03 May 2020 23:10:08 +0800</pubDate><guid>https://ongoingblog.org/2020/05/some-linux-usage-record/</guid><description>&lt;p&gt;记录自己在使用linux中渐渐使用的命令和一些方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在一个终端中打开另一个窗口&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ctrl + shift + t
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回到上一次目录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cd -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列出当前登录用户&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;w
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux进出sudo的方法&lt;/p&gt;
&lt;p&gt;进入&lt;code&gt;sudo&lt;/code&gt;mode = &lt;code&gt;sudo -i&lt;/code&gt;
退出&lt;code&gt;sudo&lt;/code&gt;mode = &lt;code&gt;ctrl + d&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;grep(general regular expression print)
&lt;code&gt;ls | grep &amp;quot;linux&amp;quot;&lt;/code&gt; = List file that its name includes string &amp;ldquo;linux&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clear commands history
&lt;code&gt;history -c&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;终端锁定与退出锁定(终端无法输入的假死问题)&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;终端锁定
&lt;code&gt;ctrl + s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;退出锁定
&lt;code&gt;ctrl + q&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;File permission&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chmod&lt;/code&gt;
Change mode.
10number = &lt;code&gt;d&lt;/code&gt;(directory) or &lt;code&gt;-&lt;/code&gt;(that represents file)
Permission =
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; = (100)&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; //4&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt; = (010)&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; //2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; = (001)&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; //1
eg. &lt;code&gt;chmod 777 file/dir&lt;/code&gt; // Give file/dir rwx permission.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chgrp&lt;/code&gt;
Change file group.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chown&lt;/code&gt;
Change file owner.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change font size in terminal&lt;/p&gt;</description></item><item><title>Git 基础</title><link>https://ongoingblog.org/2020/04/git/</link><pubDate>Sun, 26 Apr 2020 13:11:41 +0800</pubDate><guid>https://ongoingblog.org/2020/04/git/</guid><description>&lt;div class="toc-container"&gt;
 &lt;h2 class="toc-title"&gt;文章目录&lt;/h2&gt;
 &lt;div class="toc-content"&gt;
 &lt;nav id="TableOfContents"&gt;
 &lt;ul&gt;
 &lt;li&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;a href="#查看修改用户名与密码"&gt;查看修改用户名与密码&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#本地与远程仓库关联与解除"&gt;本地与远程仓库关联与解除&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#github-快速更换绑定邮箱"&gt;GitHub 快速更换绑定邮箱&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#推送到远程仓库"&gt;推送到远程仓库&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#github-如何删除仓库"&gt;github 如何删除仓库&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#查看本地与远程的连接"&gt;查看本地与远程的连接&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#git-在本地配置公钥"&gt;git 在本地配置公钥&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#对文件或文件夹重命名"&gt;对文件或文件夹重命名&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#git-基本操作"&gt;git 基本操作&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#git-删除-add-中的文件缓存文件"&gt;git 删除 add 中的文件（缓存文件）&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#git-每次-push-都需要输入用户名与密码"&gt;Git 每次 push 都需要输入用户名与密码&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#发现-github-上的绿色格子几天没有亮了"&gt;发现 github 上的绿色格子几天没有亮了&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#在终端中键入-git-status-后显示中文乱码"&gt;在终端中键入 git status 后显示中文乱码&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#重写最后一个-commit-信息"&gt;重写最后一个 commit 信息&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#恢复-git-rm-的文件"&gt;恢复 git rm 的文件&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#下载最新版本库不带有历史库"&gt;下载最新版本库，不带有历史库&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#tag-管理"&gt;tag 管理&lt;/a&gt;&lt;/li&gt;
 &lt;/ul&gt;
 &lt;/li&gt;
 &lt;/ul&gt;
&lt;/nav&gt;
 &lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
 .toc-container {
 border-left: 3px solid #4a86e8;
 padding: 1.2rem 1.8rem;
 margin: 2.5rem 0;
 background: #f8fbfe;
 border-radius: 0 8px 8px 0;
 box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
 }

 .toc-title {
 font-size: 1.4rem;
 margin-top: 0;
 margin-bottom: 1rem;
 color: #2c5282;
 padding-bottom: 0.5rem;
 border-bottom: 1px solid #e2e8f0;
 }

 .toc-content ul {
 list-style: none;
 padding-left: 1.2rem;
 margin: 0;
 }

 .toc-content li {
 margin: 0.7rem 0;
 line-height: 1.1;
 position: relative;
 }

 .toc-content a {
 color: #3182ce;
 text-decoration: none;
 transition: all 0.3s ease;
 display: block;
 padding: 0.3rem 0.5rem;
 border-radius: 4px;
 }

 .toc-content a:hover {
 color: #020202;
 background: #ebf4ff;
 padding-left: 0.8rem;
 }

 .toc-warning {
 padding: 1.2rem;
 background: #fffaf0;
 border: 1px solid #feebc8;
 border-radius: 6px;
 color: #dd6b20;
 margin: 2rem 0;
 }

 .toc-warning p {
 margin: 0.5rem 0;
 }

 .toc-highlight {
 animation: highlight-fade 2s ease;
 background-color: rgba(255, 230, 0, 0.3);
 }

 @keyframes highlight-fade {
 0% { background-color: rgba(255, 230, 0, 0.8); }
 100% { background-color: transparent; }
 }

 
 .toc-debug {
 font-size: 0.9rem;
 color: #4a5568;
 }
 .toc-debug h4 {
 margin-top: 0;
 color: #2b6cb0;
 }
&lt;/style&gt;
&lt;h3 id="查看修改用户名与密码"&gt;查看修改用户名与密码&lt;/h3&gt;
&lt;p&gt;查看用户名&lt;/p&gt;</description></item><item><title>SQL 语言的基本使用</title><link>https://ongoingblog.org/2020/04/basic-of-sql/</link><pubDate>Sun, 19 Apr 2020 19:41:09 +0800</pubDate><guid>https://ongoingblog.org/2020/04/basic-of-sql/</guid><description>&lt;p&gt;一月份的时候有一个考察，但是当时连一个很简单的语句都不会写了，之后就在&lt;a href="https://sqlbolt.com"target="_blank" rel="noopener noreferrer"&gt;SQLBolt&lt;/a&gt;上进行了一个回顾，这里进行记录，以后方便随时回来查看。&lt;/p&gt;
&lt;h3 id="1-select"&gt;1. SELECT&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-SQL" data-lang="SQL"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;table_name&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="2-queries-with-constraints"&gt;2. Queries with constraints&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;WHERE clause&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;column&lt;/span&gt;,...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;FORM &lt;span style="color:#66d9ef"&gt;table&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; condition
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Operator | SQL Example
=-: | :-:
BETWEEN &amp;hellip; AND &amp;hellip; | clo_name &lt;strong&gt;BETWEEN&lt;/strong&gt; 0.5 &lt;strong&gt;AND&lt;/strong&gt; 1.5
NOT BETWEEN &amp;hellip; AND &amp;hellip; | clo_name NOT &lt;strong&gt;BETWEEN&lt;/strong&gt; 2000 &lt;strong&gt;AND&lt;/strong&gt; 2010
IN (&amp;hellip;) | clo_name &lt;strong&gt;IN&lt;/strong&gt; (1, 3, 5)
NOT IN (&amp;hellip;) | col_name &lt;strong&gt;NOT IN&lt;/strong&gt; (1, 3, 5)
表 1&lt;/p&gt;
&lt;p&gt;Operator | Condition | Example
=-: | :-: | :-:
LIKE | Case insensitive exact string comparison | col_name &lt;strong&gt;LIKE&lt;/strong&gt; &amp;lsquo;abc&amp;rsquo;
NOT LIKE | Case insensitive exact string inequality comparison | col_name &lt;strong&gt;NOT LIKE&lt;/strong&gt; &amp;lsquo;abc&amp;rsquo;
% | Match(only with LIKE or NOT LIKE | col_name &lt;strong&gt;LIKE&lt;/strong&gt; &amp;lsquo;%hello%&amp;rsquo;
_ | Used to match a single character(only with LIKE or NOT LIKE) | col_name &lt;strong&gt;LIKE&lt;/strong&gt; &amp;ldquo;AN_&amp;rdquo;
IN (&amp;hellip;) | String exists in a list | col_name &lt;strong&gt;IN&lt;/strong&gt; (&amp;ldquo;A&amp;rdquo;, &amp;ldquo;B&amp;rdquo;)
NOT IN (&amp;hellip;) | String does not exit in a list | col_name &lt;strong&gt;NOT IN&lt;/strong&gt; (&amp;ldquo;C&amp;rdquo;, &amp;ldquo;E&amp;rdquo;)
表 2&lt;/p&gt;</description></item><item><title>在 Linux mint 中安装 Yahei Consolas Hybrid 字体</title><link>https://ongoingblog.org/2020/04/install-yahei-consolas-hybrid-font-in-linux-mint/</link><pubDate>Thu, 16 Apr 2020 16:18:51 +0800</pubDate><guid>https://ongoingblog.org/2020/04/install-yahei-consolas-hybrid-font-in-linux-mint/</guid><description>&lt;p&gt;由于刚刚安装的 Linux mint 终端中的中文字体显示为&lt;strong&gt;楷体&lt;/strong&gt;，但是这个楷体在终端中显示有些问题：字与字之间空隙很大。所以就打算换一款字体。&lt;/p&gt;
&lt;h3 id="一字体介绍及下载"&gt;一、字体介绍及下载&lt;/h3&gt;
&lt;p&gt;关于&lt;code&gt;Yahei Consolas Hybrid&lt;/code&gt;这个字体我是从&lt;a href="http://forum.ubuntu.org.cn/viewtopic.php?p=1312510"target="_blank" rel="noopener noreferrer"&gt;怎样修改终端字体&lt;/a&gt;这篇文章中发现的。关于这款字体 linux 公社有一篇文章&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;，其中有这样一段描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Consolas 雅黑混合字体是什么？？Consolas 是一种专门为编程人员设计的字体，这一字体的特性是所有字母、数字与符号均能非常容易辨认！而且所有字符都具有相同的宽度，让编程人员看着更舒服，当然在打个人和商业信函的时候，用这个字体也是不错的选择，这一字体还专门为 ClearType 做了优化，可以让它更舒适地展示在屏幕上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这款字体的下载链接在这里&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h3 id="二字体的安装"&gt;二、字体的安装&lt;/h3&gt;
&lt;p&gt;将&lt;code&gt;YaHei.Consolas.1.11b.rar&lt;/code&gt;解压，得到&lt;code&gt;YaHei.Consolas.1.11b.ttf&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;之后在 linux mint 系统字体文件夹中建立对应的字体文件夹&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mkdir /usr/share/fonts/vista
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;复制字体文件到对应的文件夹下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo cp YaHei.Consolas.1.11b.ttf /usr/share/fonts/vista
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更改字体文件权限&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo chmod &lt;span style="color:#ae81ff"&gt;644&lt;/span&gt; /usr/share/fonts/vista/YaHei.Consolas.1.11b.ttf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;刷新并安装字体&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mkfontscale &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo mkfontdir &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo fc-cache -fv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="三安装之后设置字体"&gt;三、安装之后设置字体&lt;/h3&gt;
&lt;p&gt;在 mint 的左下角&lt;code&gt;Menu&lt;/code&gt;中搜索&lt;code&gt;appearance&lt;/code&gt;，打开。如下边这个界面&lt;/p&gt;
&lt;p&gt;&lt;img src="Appearance_Preferences_001.png" alt=""&gt;
在这里面可以设置应用字体，文档字体，桌面字体，窗口标题字体等等。&lt;/p&gt;
&lt;p&gt;下面设置&lt;strong&gt;终端字体&lt;/strong&gt;
打开终端，在终端左上角&lt;code&gt;Edit -&amp;gt; Profiles&lt;/code&gt;，打开&lt;/p&gt;
&lt;p&gt;&lt;img src="Profiles_002.png" alt=""&gt;
点击右边的&lt;code&gt;Edit&lt;/code&gt;, 就可以在&lt;code&gt;General&lt;/code&gt;界面下的&lt;code&gt;font&lt;/code&gt;进行选择字体了，在其中选择我们之前已经安装好了的 Yahei Consolas Hybrid 字体即可。&lt;/p&gt;
&lt;img src="Editing_Profile_Default_004.png" alt=""&gt;&lt;h3 id="四参考"&gt;四、参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forum.ubuntu.org.cn/viewtopic.php?p=1312510"target="_blank" rel="noopener noreferrer"&gt;怎样修改终端字体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.linuxidc.com/Linux/2011-08/40747.htm"target="_blank" rel="noopener noreferrer"&gt;Consolas 雅黑混合版 yahei consolas hybrid 编程字体下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://linux.linuxidc.com/linuxconf/download.php?file=Li9saW51eGZpbGVzL3B1Yi9PdGhlci/X1szlL0NvbnNvbGFz0cW62rvsus&amp;#43;w5nlhaGVpIGNvbnNvbGFzIGh5YnJpZLHgs8zX1szlz8LU2C8lNUJMaW51eElEQy5jb20lNURZYUhlaS5Db25zb2xhcy4xLjExYi5yYXI="target="_blank" rel="noopener noreferrer"&gt;下载 yahei consolas hybrid 字体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/MonkeyF/archive/2013/05/13/3076466.html"target="_blank" rel="noopener noreferrer"&gt;Linux 下设置雅黑-Consolas 混合字体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.iteye.com/blog/fooler5-2406227"target="_blank" rel="noopener noreferrer"&gt;ubuntu 安装微软雅黑和 Consolas 字体&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://www.linuxidc.com/Linux/2011-08/40747.htm"target="_blank" rel="noopener noreferrer"&gt;Consolas 雅黑混合版 yahei consolas hybrid 编程字体下载&lt;/a&gt;&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;</description></item><item><title>在 Vmware 中安装 linux mint</title><link>https://ongoingblog.org/2020/04/install-linux-mint-in-vmware-and-other-preparations/</link><pubDate>Thu, 16 Apr 2020 11:40:57 +0800</pubDate><guid>https://ongoingblog.org/2020/04/install-linux-mint-in-vmware-and-other-preparations/</guid><description>&lt;p&gt;因为想要将Hexo博客的书写单独分离出一个生产环境，这样之后如果宿主操作系统更换之后博客的环境就不用再次安装了，因此昨天晚上在VMware虚拟机中安装了Linux mint（之前一直使用的桌面是Ubuntu16.04），今天来写一个安装过程以及安装好之后的一些准备工作。&lt;/p&gt;
&lt;h2 id="1--安装"&gt;1 | 安装&lt;/h2&gt;
&lt;p&gt;下载&lt;a href="https://www.linuxmint.com/edition.php?id=276"target="_blank" rel="noopener noreferrer"&gt;Linux mint镜像文件&lt;/a&gt;，这里我下载的是&lt;code&gt;MATE&lt;/code&gt;，官网可能下载的有些慢，可以使用&lt;code&gt;xdm&lt;/code&gt;进行下载。
下载之后就可以使用虚拟机了，之后的安装步骤就不多说了，一些简单的步骤。&lt;/p&gt;
&lt;h2 id="2--下载之后的使用"&gt;2 | 下载之后的使用&lt;/h2&gt;
&lt;h3 id="换源"&gt;换源&lt;/h3&gt;
&lt;h3 id="vim"&gt;vim&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install vim
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install vim-gtk
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意将vim的桌面版本也下载上，不然可能vim的终端版本的&lt;code&gt;clipboard&lt;/code&gt;没有安装上，使用&lt;code&gt;$vim version | grep &amp;quot;clipboard&amp;quot;&lt;/code&gt;进行查看，如果有&lt;code&gt;+clipboard&lt;/code&gt;即表示已经安装上。&lt;/p&gt;
&lt;h3 id="git"&gt;git&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="tmux"&gt;tmux&lt;/h3&gt;
&lt;h3 id="输入法"&gt;输入法&lt;/h3&gt;
&lt;h3 id="离线安装nodejs"&gt;离线安装nodejs&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;nodejs是hexo运行所必须的环境，下载&lt;a href="https://cdn.npm.taobao.org/dist/node/v12.16.2/node-v12.16.2-linux-x64.tar.xz"target="_blank" rel="noopener noreferrer"&gt;nodejs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载完毕后，解压，并将解压后的文件夹移入自己的某个文件夹中，这里我将文件夹放置在&lt;code&gt;/usr/local/lib/nodejs&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mkdir /usr/local/lib/nodejs
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo tar -xJvf node-xxx-xxx.tar.xz -C /usr/local/lib/nodejs
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo mv /usr/local/lib/nodejs/node-xxx-xxx /usr/local/lib/nodejs/node-xxx &lt;span style="color:#75715e"&gt;# 更改名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置环境变量，在&lt;code&gt;/etc/profile&lt;/code&gt;中，在文件最后添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Nodejs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;export NODEJS_HOME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr/local/lib/nodejs/node-xxx/bin &lt;span style="color:#75715e"&gt;# xxx是版本号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;export PATH&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$NODEJS_HOME &lt;span style="color:#f92672"&gt;=&lt;/span&gt;$PATH
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;刷新文件配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;. /etc/profile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;node -v
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建sudo链接&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ln -s /usr/local/lib/nodejs/node-xxx/bin/node /usr/bin/node
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ln -s /usr/local/lib/nodejs/node-xxx/bin/npm /usr/bin/npm
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo ln -s /usr/local/lib/nodejs/node-xxx/bin/npx /usr/bin/npx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="其它一些配置"&gt;其它一些配置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;将caps lock映射为ctrl&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>博客写作规则</title><link>https://ongoingblog.org/2020/04/blogs-writing-rules/</link><pubDate>Sun, 12 Apr 2020 17:09:29 +0800</pubDate><guid>https://ongoingblog.org/2020/04/blogs-writing-rules/</guid><description>&lt;ol&gt;
&lt;li&gt;我认为&lt;code&gt;脚注&lt;/code&gt;在长文章中是非常有用的，脚注对于一个个小点的标注会使人知道它的“来源”，而&lt;code&gt;参考&lt;/code&gt;则更多是针对于全局文章。&lt;/li&gt;
&lt;li&gt;博客文章结构
&lt;ul&gt;
&lt;li&gt;序言&lt;/li&gt;
&lt;li&gt;目录&lt;/li&gt;
&lt;li&gt;正文&lt;/li&gt;
&lt;li&gt;参考&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要在小标题最后设置脚注，不然 hexo-toc 生成的目录点击不会跳转。&lt;/li&gt;
&lt;li&gt;代码数较长的代码段在 md 文件中写出后，在下方贴上此段代码文件链接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;标签&lt;/code&gt;和&lt;code&gt;分类&lt;/code&gt;在使用英文时&lt;strong&gt;首字母大写&lt;/strong&gt;，并且标签和分类是包含关系，分类包含标签。&lt;/li&gt;
&lt;li&gt;多用代码说话。&lt;/li&gt;
&lt;li&gt;博客文章不应该是网上已有信息的堆砌，而更多的是自己的思考过程。&lt;/li&gt;
&lt;li&gt;针对数字说明，用 1 万而不是 10000，用 1 千而不是 1000，降低阅读难度。&lt;/li&gt;
&lt;li&gt;所有你写的句子都应要有标点符号。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Markdown 的 diff 语法</title><link>https://ongoingblog.org/2020/04/diff-synatx-in-code-blocks/</link><pubDate>Sun, 12 Apr 2020 13:23:32 +0800</pubDate><guid>https://ongoingblog.org/2020/04/diff-synatx-in-code-blocks/</guid><description>&lt;p&gt;这几次看别人博客时总是发现了一些东西，比如有的博客中总是出现下面的这种样式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;// this is a test.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;- this is removed;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;+ this is added.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;这样的样式，很方便：红色表示被删减，绿色表示被增加。人眼对色彩是非常敏感的，这样鲜明的对比很容易被人识别出来，方便阅读博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一次见到&lt;code&gt;diff syntax&lt;/code&gt;这个词是在这个&lt;a href="https://io-oi.me/tech/hexo-next-optimization/#fnref:1"target="_blank" rel="noopener noreferrer"&gt;地方&lt;/a&gt;，其中讲述到这个功能的地方如下图&lt;/p&gt;
&lt;img src="diff_example.png" alt=""&gt;&lt;p&gt;当时很想找到如何才能在自己博客的代码段实现这个功能，百度中也未搜索到这个东西，在不知道这个功能名称的前提下去根据功能的描述进行搜索，很费脑筋去想关键词，这样一来如果自己的描述关键词不沾边，结果可想而知。&lt;/p&gt;
&lt;p&gt;想要实现这个效果：
在代码块中制定语言，在**```**后加上&lt;code&gt;diff&lt;/code&gt;表示语言，然后接着如下进行书写就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-diff" data-lang="diff"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;- removed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;+ added
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="参考"&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://io-oi.me/tech/hexo-next-optimization/#fnref:1"target="_blank" rel="noopener noreferrer"&gt;打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/40883421/diff-syntax-highlighting-in-github-markdown"target="_blank" rel="noopener noreferrer"&gt;stackoverflow: Diff syntax highlighting in Github Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/salmedina/ad8bea4f46de97ea132f71b0bca73663#file-markdowndiffexample-md"target="_blank" rel="noopener noreferrer"&gt;MarkdownDiffExample.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>设置自己的进入网站主页</title><link>https://ongoingblog.org/2020/04/%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BF%9B%E5%85%A5%E7%BD%91%E7%AB%99%E4%B8%BB%E9%A1%B5/</link><pubDate>Sat, 11 Apr 2020 10:02:55 +0800</pubDate><guid>https://ongoingblog.org/2020/04/%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BF%9B%E5%85%A5%E7%BD%91%E7%AB%99%E4%B8%BB%E9%A1%B5/</guid><description>&lt;p&gt;将&lt;code&gt;~/public/blog/&lt;/code&gt;下的&lt;code&gt;index.html&lt;/code&gt;替换为自己设置的网站进入页面，如果有css文件和图片文件自己设置好路径。&lt;/p&gt;</description></item><item><title>备份Hexo网站源码</title><link>https://ongoingblog.org/2020/04/how-to-backx-up-my-hexo-blog-source-code/</link><pubDate>Fri, 10 Apr 2020 21:41:28 +0800</pubDate><guid>https://ongoingblog.org/2020/04/how-to-backx-up-my-hexo-blog-source-code/</guid><description>&lt;p&gt;今天忽然想起博客在github上存放的只是public中的文件，其他的建站源代码只保存在本地，这样的话如果本地电脑系统坏掉了或者发生了意外电脑不见了，那么没有了建站源码，我的网站不就gg了嘛！，所以上网搜了下备份网站源码的教程，下文是记录。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先在github博客所在仓库(即&lt;code&gt;yourname.github.io&lt;/code&gt;)中&lt;code&gt;新建分支Hexo&lt;/code&gt;(名字任意)，并且将其设为默认分支，
在网站中进行设置即可；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将博客仓库&lt;code&gt;clone&lt;/code&gt;至本地，将之前本地博客&lt;strong&gt;根文件夹&lt;/strong&gt;下的&lt;code&gt;_config.yml&lt;/code&gt;，&lt;code&gt;themes/&lt;/code&gt;，&lt;code&gt;source/&lt;/code&gt;，&lt;code&gt;scffolds/&lt;/code&gt;，&lt;code&gt;package.json&lt;/code&gt;，&lt;code&gt;.gitignore&lt;/code&gt;
复制到clone的文件夹&lt;code&gt;yourname.github.io/&lt;/code&gt;下；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将&lt;code&gt;themes/next/&lt;/code&gt;(next为使用的主题)中的**.git/**删除，否则无法将主题文件夹push；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;yourname.github.io/&lt;/code&gt;下执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$npm install
$npm install hexo-deployer-git
$npm install hexo-server --save // 为使用本地测试hexo s作准备
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来就可以将网站源码备份了&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$git add *
$git commit -m &amp;#34;your message&amp;#34;
$git push origin Hexo // 这里的Hexo是你新建的仓库分支名称
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行&lt;code&gt;hexo g -d&lt;/code&gt;生成静态页面并部署至github仓库中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;写一下书写hexo博客的依赖&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;git&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nodejs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;npm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;github博客仓库clone至本地&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在clone文件夹下执行&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$npm install hexo-cli -g
$npm install
$npm install hexo-deployer-git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;这种方法对于我的设置出问题了&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前我是将自己的主页设置成了自己的页面，也就是自己的域名打开后是自己写的界面，在自己的页面点击
博客图标才是进入自己的博客&lt;code&gt;域名/blog&lt;/code&gt;，这个界面就是使用&lt;code&gt;hexo + next&lt;/code&gt;的界面，但是打开后是404.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后使用了这种方法就出了问题，&lt;code&gt;hexo g&lt;/code&gt;自动生成的文件在&lt;code&gt;public/blog&lt;/code&gt;，这个不需改变
这个问题先放在这里。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;21.8.1&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;上面的这种方法已经过时了，现在我的博客是使用 &lt;a href="https://ongoing-z.github.io/posts/deploy-blog-by-github-actions.html"target="_blank" rel="noopener noreferrer"&gt;github action 来进行部署&lt;/a&gt; 的，博客源文件放在一个仓库里，博客生成的 html 文件放在另一个公开仓库里。也起到了备份网站源码的作用。&lt;/p&gt;
&lt;h3 id="参考"&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jianshu.com/p/baab04284923"target="_blank" rel="noopener noreferrer"&gt;怎么去备份你的Hexo博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>博客文章链接优化</title><link>https://ongoingblog.org/2020/04/optimize-blog-article-link/</link><pubDate>Thu, 09 Apr 2020 12:07:42 +0800</pubDate><guid>https://ongoingblog.org/2020/04/optimize-blog-article-link/</guid><description>&lt;p&gt;自定义文章链接&lt;/p&gt;
&lt;p&gt;使用插件：&lt;a href="https://github.com/rozbo/hexo-abbrlink"target="_blank" rel="noopener noreferrer"&gt;hexo-abbrlink&lt;/a&gt;，安装:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install hexo-abbrlink --save
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改&lt;code&gt;站点配置文件&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;permalink = :abbrlink/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后在自己的博客文章开头中加入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;abbrlink = seourl
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此处&lt;code&gt;seouel&lt;/code&gt;填写自己的链接名称
当然可以看官方文档增加其它的链接字段，比如在链接中自动生成日期加入，等等。&lt;/p&gt;
&lt;p&gt;在生成的文章链接中添加日期，例如下面这种样式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;your_domain/posts/2020/04/diff-synatx-in-code-blocks.html
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要在&lt;code&gt;站点配置文件&lt;/code&gt;中配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;permalink = posts/:year/:month/:abbrlink.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并且这样做后生成的图片也不会乱，不必再次进行整理。&lt;/p&gt;
&lt;h3 id="参考"&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.zuiyu1818.cn/posts/NexT_seourl.html"target="_blank" rel="noopener noreferrer"&gt;博客文章链接优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>hexo出现的问题</title><link>https://ongoingblog.org/2020/04/some-problems-when-using-hexo/</link><pubDate>Wed, 08 Apr 2020 12:41:14 +0800</pubDate><guid>https://ongoingblog.org/2020/04/some-problems-when-using-hexo/</guid><description>&lt;h2 id="在next主题中点击tags出现cannot-get-tags20"&gt;在next主题中点击tags出现“Cannot GET /tags/%20/”&amp;quot;&lt;/h2&gt;
&lt;p&gt;%20是网页地址的空格符。
在&lt;code&gt;主题配置文件&lt;/code&gt;搜索&lt;code&gt;menu&lt;/code&gt;后将&lt;code&gt;||&lt;/code&gt;前的空格删除即可。&lt;/p&gt;
&lt;h2 id="hexo不能使用hexo-s命令"&gt;hexo不能使用hexo s命令&lt;/h2&gt;
&lt;p&gt;原因：未安装&lt;code&gt;hexo-server&lt;/code&gt;
安装：&lt;code&gt;npm install hexo-server --save&lt;/code&gt;&lt;/p&gt;</description></item><item><title>编译 Vim 8.2源码时遇到的错误</title><link>https://ongoingblog.org/2020/04/the-errors-when-compeling-vim8.2/</link><pubDate>Sat, 04 Apr 2020 19:02:39 +0800</pubDate><guid>https://ongoingblog.org/2020/04/the-errors-when-compeling-vim8.2/</guid><description>&lt;p&gt;一些自己在编译 vim 8.2 版本源码时遇到的一些错误。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Error information below =&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;no terminal library found
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;checking for tgetent()... configure = error: NOT FOUND!
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;You need to install a terminal library; for example ncurses.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Or specify the name of the library with --with-tlib.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决方法 =&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt-get install libncurses5-dev libncursesw5-dev
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It worked on Ubuntu16.04.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;E492 = Not an editor command: NERDTreeToggle
此错误是在我使用&lt;code&gt;=PlugInstall&lt;/code&gt;后按下&lt;code&gt;F3&lt;/code&gt;(此处F3是开启目录树)出现的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;说出来你可能不相信，我忘记将&lt;code&gt;Plug nerdtree...&lt;/code&gt;写进自己的配置文件了。一直
以为是其他的什么问题。原来最大的问题就是自己没有装这个插件!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tarbar不能使用
前提是安装好ctags&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;leaderF
vim.error = Vim: E117: unknown function: bufadd
猜测原因 = vim版本的原因，现在的是vim7.4，但是那个popup界面是需要vim8的.&lt;/p&gt;</description></item><item><title>如何在ubuntu16中安装vim8.2</title><link>https://ongoingblog.org/2020/04/how-to-install-vim8.2-in-ubuntu16.04/</link><pubDate>Sat, 04 Apr 2020 18:58:15 +0800</pubDate><guid>https://ongoingblog.org/2020/04/how-to-install-vim8.2-in-ubuntu16.04/</guid><description>&lt;h2 id="如何在ubuntu命令行升级进行安装"&gt;如何在ubuntu命令行升级进行安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo add-apt-repository ppa &lt;span style="color:#f92672"&gt;=&lt;/span&gt;jonathonf/vim
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudoaptTupdate+08 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;00&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install vim
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：这种方法可能会非常慢!&lt;/p&gt;
&lt;h2 id="ubuntu-1604-编译安装vim-v82推荐"&gt;Ubuntu 16.04 编译安装Vim v8.2(推荐)&lt;/h2&gt;
&lt;p&gt;先卸载原本的vim&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt-get remove vim vim-runtime gvim vim-tiny vim-common vim-gui-common
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来将&lt;code&gt;vim源码&lt;/code&gt;从github上clone下来后进行编译，注意编译的过程中可能会遇到各种各样的环
境或依赖不匹配，根据自己的需要去进行安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$git clone https://github.com/vim/vim.git
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$cd vim
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$./configure --with-features&lt;span style="color:#f92672"&gt;=&lt;/span&gt;huge --enable-gui&lt;span style="color:#f92672"&gt;=&lt;/span&gt;auto --enable-cscope &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --prefix&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr -enable-python3interp&lt;span style="color:#f92672"&gt;=&lt;/span&gt;yes &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --with-python3-command&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr/bin/python3 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --with-python3-config-dir&lt;span style="color:#f92672"&gt;=&lt;/span&gt;your_python3_path
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$sudo make VIMRUNTIMEDIR&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr/share/vim/vim82
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$sudo make install
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$vim --version &lt;span style="color:#75715e"&gt;# 检查vim版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装完成后需要检查安装好的vim中有没有&lt;code&gt;clipboard&lt;/code&gt;，使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vim --version | grep &lt;span style="color:#e6db74"&gt;&amp;#34;clipboard&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;来检查，这一样对于粘贴板是非常重要的。如果没有的话就需要自己去分析是什么原因了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;20.9.3&lt;/em&gt; = 第二次编译安装vim8.2依旧是没有clipboard这一项的，依旧使用了我的老办法&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;a href="https://ongoingblog.org/2020/04/the-errors-when-compeling-vim8.2/"&gt;编译 Vim 8.2源码时遇到的错误&lt;/a&gt;&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description></item><item><title>hexo的写作方法</title><link>https://ongoingblog.org/2020/04/writing-skill-in-hexo/</link><pubDate>Sat, 04 Apr 2020 18:53:22 +0800</pubDate><guid>https://ongoingblog.org/2020/04/writing-skill-in-hexo/</guid><description>&lt;p&gt;这篇文章记录我自己在使用Hexo过程遇到的问题和一些使用方法。&lt;/p&gt;
&lt;h2 id="创建一篇新文章"&gt;创建一篇新文章&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;$hexo new [layout] &amp;lt;title&amp;gt;&lt;/code&gt;&amp;quot;&lt;/p&gt;
&lt;h2 id="添加文章更新时间"&gt;添加文章更新时间&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;p&gt;首先修改&lt;code&gt;/themes/next/layout/_macro/&lt;/code&gt;下的&lt;code&gt;post.swig&lt;/code&gt;文件，在&lt;code&gt;&amp;lt;span class=&amp;quot;post-time&amp;quot;&amp;gt;...&amp;lt;/span&amp;gt;&lt;/code&gt;
标签后添加如下内容 =&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{%ifpost.updatedTand post.updated &amp;gt; post.date%}+08 = &amp;#39;00&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;T&amp;lt;span class=&amp;#39;&amp;#34;post-updated&amp;#34;&amp;gt;+08 = 00&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;T &amp;amp;nbsp; | &amp;amp;nbsp; {{ __(&amp;#39;post.updated&amp;#39;) }}+08 = &amp;#39;00&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;T &amp;lt;time itemprop=&amp;#39;&amp;#34;dateUpdated&amp;#34; datetime=&amp;#34;{{ moment(post.updated).format() }}&amp;#34; content=&amp;#34;{{ date(post.updated, config.date_format) }}&amp;#34;&amp;gt;+08 = 00&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;T {{ date(post.updated, config.date_format) }}+08 = &amp;#39;00&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;/time&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;/span&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{% endif %}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其次若博客站点默认语言为中文，则修改&lt;code&gt;/themes/next/languages/&lt;/code&gt;下的&lt;code&gt;zh_Hans.yml&lt;/code&gt;文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;post =&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;Tupdated = &amp;#39;更新于+08:00&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;若为其他语言，则修改对应的语言文件即可。
最后修改&lt;code&gt;主题配置文件&lt;/code&gt;，添加如下内容&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;display_updated = &amp;#39;true+08:00&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="添加gitalk"&gt;添加Gitalk&lt;/h2&gt;
&lt;h3 id="error--not-found"&gt;Error = not found&lt;/h3&gt;
&lt;p&gt;看了很多帖子，但是还是没有解决。&lt;/p&gt;</description></item><item><title>C 语言的一些基础知识</title><link>https://ongoingblog.org/2020/04/some-basic-knowledge-of-cc-/</link><pubDate>Sat, 04 Apr 2020 15:18:31 +0800</pubDate><guid>https://ongoingblog.org/2020/04/some-basic-knowledge-of-cc-/</guid><description>&lt;hr&gt;
&lt;h3 id="一些细节"&gt;一些细节&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;linux 下编译运行 c++ 程序&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;g&lt;span style="color:#f92672"&gt;++&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;W file_name.cpp &lt;span style="color:#f92672"&gt;-&lt;/span&gt;o another_name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#f92672"&gt;/&lt;/span&gt;file_name
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-W&lt;/code&gt; = 输入错误信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符数组的输入输出&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scanf&lt;/code&gt;输入，&lt;code&gt;printf&lt;/code&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; str[&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; scanf(&lt;span style="color:#e6db74"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, str);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; printf(&lt;span style="color:#e6db74"&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, str);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：&lt;code&gt;%s&lt;/code&gt;识别&lt;code&gt;空格&lt;/code&gt;作为字符串的结尾；&lt;code&gt;scanf&lt;/code&gt;在使用&lt;code&gt;%s&lt;/code&gt;时，对应数组名是不需要加&lt;code&gt;&amp;amp;&lt;/code&gt;运算符的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数组初始化符号&lt;code&gt;{}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ascii&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A = 65; a: 97&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结构体的初始化&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;scanf(&lt;span style="color:#e6db74"&gt;&amp;#34;%d %c %d&amp;#34;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;a, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;data, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;b);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;node[a] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {data, b, false}; &lt;span style="color:#75715e"&gt;// 注意时花括号，和数组初始化一样。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高位补 0 与高位补空&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;printf(&lt;span style="color:#e6db74"&gt;&amp;#34;%05d&amp;#34;&lt;/span&gt;, i); &lt;span style="color:#75715e"&gt;// 使不足5位的整数的高位补0。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;printf(&lt;span style="color:#e6db74"&gt;&amp;#34;%5d&amp;#34;&lt;/span&gt;, i); &lt;span style="color:#75715e"&gt;// 使不足5位的整数的高位补为空。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;scanf()&lt;/code&gt;使用&lt;code&gt;%c&lt;/code&gt;可以读入&lt;code&gt;空格&lt;/code&gt;，要注意格式！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;scanf(&lt;span style="color:#e6db74"&gt;&amp;#34;%d %c&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 new 运算符为链表结点分配内存空间&lt;/p&gt;
&lt;p&gt;使用方法：&lt;code&gt;typename *p = new typename;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例子如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;node &lt;span style="color:#f92672"&gt;*&lt;/span&gt;p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; node;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; arr[&lt;span style="color:#ae81ff"&gt;10000&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;memset&lt;/code&gt;对数组中每一个元素赋相同的值&lt;/p&gt;</description></item><item><title>换入新ubuntu要做的几件事情</title><link>https://ongoingblog.org/2020/04/things-should-be-done-when-change-into-new-ubuntu/</link><pubDate>Sat, 04 Apr 2020 13:11:08 +0800</pubDate><guid>https://ongoingblog.org/2020/04/things-should-be-done-when-change-into-new-ubuntu/</guid><description>&lt;p&gt;记录自己换入新ubuntu系统后的一些操作。&lt;/p&gt;
&lt;h3 id="一换源"&gt;一、换源&lt;/h3&gt;
&lt;p&gt;到阿里云或者其他镜像网站复制对应安装版本的源&lt;/p&gt;
&lt;h3 id="二zsh"&gt;二、Zsh&lt;/h3&gt;
&lt;p&gt;替换机器自带的Bash.&lt;/p&gt;
&lt;h3 id="三vim-8"&gt;三、Vim 8+&lt;/h3&gt;
&lt;p&gt;安装vim的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将源文件下载下来后可以采用编译的方法进行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在命令行中安装&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install vim
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install vim-gtk3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装完毕后安装&lt;code&gt;vim-plug&lt;/code&gt;，其作用是管理vim的插件。安装有以下两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在终端中键入下边命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将&lt;a href="https://github.com/ONGOING-Z/dotfiles"target="_blank" rel="noopener noreferrer"&gt;plug.vim&lt;/a&gt;下载下来后移入&lt;code&gt;~/.vim/autoload&lt;/code&gt;文件夹下即可使用。
&lt;strong&gt;注&lt;/strong&gt; = 使用vim-plug必须先安装git，不然不能使用!
使用自己的&lt;a href="https://github.com/ONGOING-Z/dotfiles"target="_blank" rel="noopener noreferrer"&gt;.vimrc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="四tmux"&gt;四、Tmux&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install tmux
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用自己的&lt;a href="https://github.com/ONGOING-Z/dotfiles"target="_blank" rel="noopener noreferrer"&gt;.tmux.conf&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="五git"&gt;五、Git&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="六googlepinyin"&gt;六、Googlepinyin&lt;/h3&gt;
&lt;p&gt;在&lt;code&gt;text entry setting&lt;/code&gt;可以设置，可能出现安装之后重新启动又得再次选择输入法的情况．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在命令行中输入&lt;code&gt;fcitx&lt;/code&gt;，检查其是否已经安装，如果未安装，执行&lt;code&gt;sudo apt install fcitx&lt;/code&gt;进行安装。&lt;/li&gt;
&lt;li&gt;在命令行中执行&lt;code&gt;im-config&lt;/code&gt;(Input Method Configuration)，进行一番点击之后在选择面板中选择&lt;strong&gt;fcitx&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;安装&lt;strong&gt;googlepinyin&lt;/strong&gt;，在命令行中执行&lt;code&gt;sudo apt install fcitx-googlepinyin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启电脑，使配置生效。(注意 = 不重启有可能在接下来的步骤看不到googlepinyin的选项哦！)&lt;/li&gt;
&lt;li&gt;在命令行中执行&lt;code&gt;fcitx-config-gtk3&lt;/code&gt;，打开配置面板 =
&lt;ul&gt;
&lt;li&gt;点击&lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要勾选&lt;/strong&gt;Only Show Current Language，搜索一下就可以看到&lt;code&gt;googlepinin&lt;/code&gt;了，加入即可。
&lt;strong&gt;注&lt;/strong&gt; = googlepinyin对于ubuntu20也同样适用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="七rime"&gt;七、Rime&lt;/h3&gt;
&lt;p&gt;之前一直使用的是上面的谷歌拼音，后来遇到了 Rime，要好用一些，具体的安装可以看[这篇文章][3]。&lt;/p&gt;</description></item><item><title>关于</title><link>https://ongoingblog.org/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ongoingblog.org/about/</guid><description>&lt;p&gt;邮箱：&lt;a href="mailto:contact@ongoingblog.org"&gt;contact@ongoingblog.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github：&lt;a href="https://github.com/ONGOING-Z"target="_blank" rel="noopener noreferrer"&gt;ONGOING-Z&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;希望自己多写些自己的个人见解、思考。&lt;/li&gt;
&lt;li&gt;不是单纯的问题解决方案，当然这个也很重要，遇到问题时的解决思路，是相辅相成的。&lt;/li&gt;
&lt;li&gt;问题不会一下子就被解决，如何遵循合理的路线去解决大多数的问题。&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>